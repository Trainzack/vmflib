"""
Helper classes for creating maps in any Source Engine game that uses portal.fgd.
This file was auto-generated by import_fgd.py on 2020-01-15 18:10:34.111273.
"""

from vmflib2.vmf import *


class EnvLightrailEndpoint(Entity):
    """
    Auto-generated from portal.fgd, line 338.
    Special effects for the endpoints of the lightrail.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", small_fx_scale: float=1, large_fx_scale: float=1):
        Entity.__init__(self, "env_lightrail_endpoint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Scale Small FX : Scale of the small effect.  1 is the default size, 2 is twice that, etc.
        self.small_fx_scale: float = small_fx_scale
        # Scale Large FX : Scale of the large effect.  1 is the default size, 2 is twice that, etc.
        self.large_fx_scale: float = large_fx_scale

        self.auto_properties.extend(["origin", "angles", "targetname", "parentname", "spawnflags", "small_fx_scale", "large_fx_scale"])


class EnvPortalCredits(Entity):
    """
    Auto-generated from portal.fgd, line 364.
    An entity to control the rolling credits for portal.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "env_portal_credits", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class EnvPortalPathTrack(Entity):
    """
    Auto-generated from portal.fgd, line 45.
    An entity used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the next path_track in the path.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", spawnflags="", Track_beam_scale: float=0, End_point_scale: float=0, End_point_fadeout: float=0, End_point_fadein: float=0, target: str="", altpath: str="", speed: float=0, radius: float=0, orientationtype=1):
        Entity.__init__(self, "env_portal_path_track", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Scale Track FX : The amount to scale the track FX size
        self.Track_beam_scale: float = Track_beam_scale
        # Scale Endpoint FX : The amount to scale the endpoint FX size.
        self.End_point_scale: float = End_point_scale
        # Fade Out Endpoint : Amount of time to fade out the endpoint FX
        self.End_point_fadeout: float = End_point_fadeout
        # Fade In Endpoint : Amount of time to fade in the endpoint FX
        self.End_point_fadein: float = End_point_fadein
        # Next Stop Target : The next path_track in the path.
        self.target: str = target
        # Branch Path : An alternative path_track to be the next node in the path. Useful for making branching paths. Use the ToggleAlternatePath / EnableAlternatePath inputs to make the alternative path active.
        self.altpath: str = altpath
        # New Train Speed : When the train reaches this path_track, it will set its speed to this speed. 
        self.speed: float = speed
        # Path radius : Used by NPCs who follow track paths (attack chopper/gunship). This tells them the maximum distance they're allowed to be from the path at this node.
        self.radius: float = radius
        # Orientation Type : The way that the path follower faces as it moves through this path track.
        self.orientationtype = orientationtype

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "spawnflags", "Track_beam_scale", "End_point_scale", "End_point_fadeout", "End_point_fadein", "target", "altpath", "speed", "radius", "orientationtype"])


class FuncLiquidportal(Entity):
    """
    Auto-generated from portal.fgd, line 174.
    A space that fills with portal liquid and teleports entities when done filling
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="", angles: "Origin"="0 0 0", InitialLinkedPortal: str="", FillTime: float=10):
        Entity.__init__(self, "func_liquidportal", vmf_map)

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Linked liquid portal. : 
        self.InitialLinkedPortal: str = InitialLinkedPortal
        # Fill Time (sec) : How long the volume takes to fill in seconds.
        self.FillTime: float = FillTime

        self.auto_properties.extend(["origin", "angles", "InitialLinkedPortal", "FillTime"])


class FuncNoportalVolume(Entity):
    """
    Auto-generated from portal.fgd, line 127.
    A region in which no portal can be placed
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", spawnflags=""):
        Entity.__init__(self, "func_noportal_volume", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "spawnflags"])


class FuncPortalBumper(Entity):
    """
    Auto-generated from portal.fgd, line 140.
    A region that portals trace to fit outside of but can be place on
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", spawnflags=""):
        Entity.__init__(self, "func_portal_bumper", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "spawnflags"])


class FuncPortalDetector(Entity):
    """
    Auto-generated from portal.fgd, line 154.
    A region that fires an output if a portal is placed in it
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", spawnflags="", LinkageGroupID: int=0):
        Entity.__init__(self, "func_portal_detector", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Portal pair ID that it detects : 
        self.LinkageGroupID: int = LinkageGroupID

        self.auto_properties.extend(["targetname", "parentname", "spawnflags", "LinkageGroupID"])


class FuncPortalOrientation(Entity):
    """
    Auto-generated from portal.fgd, line 107.
    Adjusts a portal's rotation to match a specified angle. The 'Bottom' of the portal points in the specified diretion.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", StartDisabled=0, AnglesToFace: "Origin"="0 0 0", MatchLinkedAngles=0):
        Entity.__init__(self, "func_portal_orientation", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Angles to face : The 'floor' of the portal pair linkage will be in this direction.
        self.AnglesToFace: "Origin" = AnglesToFace
        # Match linked angles. : If set, portals placed in this volume will have their angles match their linked portals. This only works for floor or ceiling portals with a currently linked partner.
        self.MatchLinkedAngles = MatchLinkedAngles

        self.auto_properties.extend(["targetname", "parentname", "StartDisabled", "AnglesToFace", "MatchLinkedAngles"])


class FuncWeightButton(Entity):
    """
    Auto-generated from portal.fgd, line 118.
    A button which activates after a specified amount of weight is applied
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", WeightToActivate: float=""):
        Entity.__init__(self, "func_weight_button", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Amount of weight required before this button activates. : 
        self.WeightToActivate: float = WeightToActivate

        self.auto_properties.extend(["targetname", "WeightToActivate"])


class InfoLightingRelative(Entity):
    """
    Auto-generated from portal.fgd, line 385.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", LightingLandmark: str=""):
        Entity.__init__(self, "info_lighting_relative", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Lighting Landmark : Entity at which the reference origin is contained. 
        self.LightingLandmark: str = LightingLandmark

        self.auto_properties.extend(["origin", "targetname", "parentname", "LightingLandmark"])


class NpcPortalTurretFloor(Entity):
    """
    Auto-generated from portal.fgd, line 267.
    Combine (Portal) Floor Turret
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", SkinNumber: int=0, DamageForce=1):
        Entity.__init__(self, "npc_portal_turret_floor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Skin Number : Which skin to use for this turret. Set to 0 to select randomly.
        self.SkinNumber: int = SkinNumber

        # Damage pushes player : Being hit by this turret will push the player back.
        self.DamageForce = DamageForce

        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "SkinNumber", "DamageForce"])


class NpcPortalTurretGround(Entity):
    """
    Auto-generated from portal.fgd, line 243.
    Combine (Portal) ground turret
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", parentname: str="", ConeOfFire: float=60):
        Entity.__init__(self, "npc_portal_turret_ground", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname



        # Cone of Fire : Cone of fire in degrees.
        self.ConeOfFire: float = ConeOfFire

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "parentname", "ConeOfFire"])


class NpcRocketTurret(Entity):
    """
    Auto-generated from portal.fgd, line 27.
    Aims a rocket at a target.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", targetname: str="", angles: "Origin"="0 0 0", spawnflags=""):
        Entity.__init__(self, "npc_rocket_turret", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "parentname", "targetname", "angles", "spawnflags"])


class NpcSecurityCamera(Entity):
    """
    Auto-generated from portal.fgd, line 278.
    Security Camera
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, modelscale: float="1.0", disableshadows=0, spawnflags=""):
        Entity.__init__(self, "npc_security_camera", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "skin", "modelscale", "disableshadows", "spawnflags"])


class PointEnergyBallLauncher(Entity):
    """
    Auto-generated from portal.fgd, line 15.
    Launches energy balls.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="", angles: "Origin"="0 0 0", globalname: str="", spawnflags="", ballcount: int=3, minspeed: float="300.0", maxspeed: float="600.0", ballradius: float="20.0", balltype="Combine Energy Ball 1", ballrespawntime: float="4.0f", parentname: str="", targetname: str="", BallLifetime: float=12, MinLifeAfterPortal: float=6):
        Entity.__init__(self, "point_energy_ball_launcher", vmf_map)


        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Ball count : This is how many balls will be bouncing around inside the spawner
        self.ballcount: int = ballcount
        # Min ball speed : The minimum speed of balls that fly in the spawner
        self.minspeed: float = minspeed
        # Max ball speed : The maximum speed of balls that fly in the spawner
        self.maxspeed: float = maxspeed
        # Ball radius : The radius of the energy balls
        self.ballradius: float = ballradius
        # Ball Type : 
        self.balltype = balltype
        # Ball Respawn Time : The energy balls respawn time
        self.ballrespawntime: float = ballrespawntime

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Ball Lifetime : The time in seconds the ball will live before self-destructing. A negative value will give infinite life.
        self.BallLifetime: float = BallLifetime
        # Min life after portal transition : When energy balls created by this launcher pass through a portal and their life is refreshed to be this number at minimum.
        self.MinLifeAfterPortal: float = MinLifeAfterPortal

        self.auto_properties.extend(["origin", "angles", "globalname", "spawnflags", "ballcount", "minspeed", "maxspeed", "ballradius", "balltype", "ballrespawntime", "parentname", "targetname", "BallLifetime", "MinLifeAfterPortal"])


class PropGladosCore(Entity):
    """
    Auto-generated from portal.fgd, line 249.
    Core of GlaDOS computer.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, modelscale: float="1.0", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", CoreType=1, DelayBetweenLines: float="0.4"):
        Entity.__init__(self, "prop_glados_core", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # Core Personality : Which personality VO set the core is set to.
        self.CoreType = CoreType
        # Pause (in secs) between VO Lines. : When the core is talking, this is the number of seconds delay between it's spoken lines.
        self.DelayBetweenLines: float = DelayBetweenLines

        self.auto_properties.extend(["origin", "globalname", "angles", "model", "skin", "modelscale", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "CoreType", "DelayBetweenLines"])


class PropPortal(Entity):
    """
    Auto-generated from portal.fgd, line 195.
    A portal
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", Activated=1, PortalTwo=0, LinkageGroupID: int=0):
        Entity.__init__(self, "prop_portal", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Activated : An inactive portal will not be drawn and will not teleport entites
        self.Activated = Activated
        # Portal Number : A portal has to logically be either portal 1 or portal 2
        self.PortalTwo = PortalTwo
        # Portal pair ID that it belongs to : 
        self.LinkageGroupID: int = LinkageGroupID

        self.auto_properties.extend(["origin", "targetname", "angles", "Activated", "PortalTwo", "LinkageGroupID"])


class PropPortalStatsDisplay(Entity):
    """
    Auto-generated from portal.fgd, line 308.
    Portal Stats Display
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", parentname: str="", globalname: str=""):
        Entity.__init__(self, "prop_portal_stats_display", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname


        self.auto_properties.extend(["origin", "targetname", "angles", "parentname", "globalname"])


class PropTelescopicArm(Entity):
    """
    Auto-generated from portal.fgd, line 296.
    Telescopic Arm
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, modelscale: float="1.0", disableshadows=0):
        Entity.__init__(self, "prop_telescopic_arm", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows


        self.auto_properties.extend(["origin", "targetname", "angles", "model", "skin", "modelscale", "disableshadows"])


class TriggerPortalCleanser(Entity):
    """
    Auto-generated from portal.fgd, line 98.
    A trigger volume that disolves any entities that touch it and fizzles active portals when the player touches it.
    """
    def __init__(self, vmf_map: "ValveMap", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", targetname: str=""):
        Entity.__init__(self, "trigger_portal_cleanser", vmf_map)






        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "targetname"])


class VguiNeurotoxinCountdown(Entity):
    """
    Auto-generated from portal.fgd, line 322.
    Neurotoxin Countdown
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", parentname: str="", width: int=256, height: int=128):
        Entity.__init__(self, "vgui_neurotoxin_countdown", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Panel width : Width of the panel in units.
        self.width: int = width
        # Panel height : Height of the panel in units.
        self.height: int = height

        self.auto_properties.extend(["origin", "targetname", "angles", "parentname", "width", "height"])


class WeaponPortalgun(Entity):
    """
    Auto-generated from portal.fgd, line 217.
    Portalgun
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, targetname: str="", parentname: str="", CanFirePortal1=1, CanFirePortal2=1):
        Entity.__init__(self, "weapon_portalgun", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Can Fire Portal 1 : Can this portalgun create blue portals?
        self.CanFirePortal1 = CanFirePortal1
        # Can Fire Portal 2 : Can this portalgun create red portals?
        self.CanFirePortal2 = CanFirePortal2

        self.auto_properties.extend(["origin", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale", "targetname", "parentname", "CanFirePortal1", "CanFirePortal2"])


