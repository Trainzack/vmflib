"""
Helper classes for creating maps in any Source Engine game that uses tf.fgd.
This file was auto-generated by import_fgd.py on 2018-06-20 02:19:30.438025.
"""

from vmflib2.vmf import *


class DispenserTouchTrigger(Entity):
    """
    Auto-generated from tf.fgd, line 1104.
    Trigger for dispenser healing bounds
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "dispenser_touch_trigger", vmf_map)

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["parentname", "targetname"])


class FilterActivatorTfteam(Entity):
    """
    Auto-generated from tf.fgd, line 653.
    A filter that filters by the team of the activator.  The team number to filter by. If the filter mode is Allow, only entities whose team number matches the given team will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose team number matches the given team will pass the filter.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_activator_tfteam", vmf_map)

        # Team : Team
        self.TeamNum = 0 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = "Allow entities that match criteria" 

        # Associated Control Point : The team_control_point associated with this filter. The filter does NOT need an associated control point to function properly, but ownership of the control point will control the team number the filter uses (setup during each round start).
        self.controlpoint = "" 

        self.auto_properties.extend(["TeamNum", "targetname", "Negated", "controlpoint"])


class FilterTfPlayerCanCap(Entity):
    """
    Auto-generated from tf.fgd, line 662.
    A filter that filters players that are allowed to capture objectives.If the filter mode is Allow, only entities whose team number matches the given team andare not disguised, stealthed or invuln will pass the filter.If the filter mode is Disallow, all entities EXCEPT those players will be allowed.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_tf_player_can_cap", vmf_map)

        # Team : Team
        self.TeamNum = 0 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = "Allow entities that match criteria" 


        self.auto_properties.extend(["TeamNum", "targetname", "Negated"])


class FuncCapturezone(Entity):
    """
    Auto-generated from tf.fgd, line 675.
    TF flag capture zone (set Team to 'any' for Territory Control maps).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_capturezone", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Team : Team
        self.TeamNum = 0 

        # Capture Point : Used for Attack/Defend and Territory Control maps ONLY. This is ignored for CTF maps. Set this value to the Capture Point number for this entity.
        self.capturepoint = 1 

        self.auto_properties.extend(["targetname", "StartDisabled", "TeamNum", "capturepoint"])


class FuncChangeclass(Entity):
    """
    Auto-generated from tf.fgd, line 749.
    ChangeClass zone for players.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_changeclass", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 



        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled"])


class FuncFlagAlert(Entity):
    """
    Auto-generated from tf.fgd, line 703.
    Alerts are triggered when an enemy carrying a flag starts touching the area (or any player for an area with no team).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_flag_alert", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        # Play alert sound : Play the sound when the alert is triggered.
        self.playsound = 1 
        # Delay between alerts (in seconds) : The amount of time between alerts being triggered (per team).
        self.alert_delay = 10 

        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "playsound", "alert_delay"])


class FuncNobuild(Entity):
    """
    Auto-generated from tf.fgd, line 688.
    Engineer no-build area.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_nobuild", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 



        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled"])


class FuncNogrenades(Entity):
    """
    Auto-generated from tf.fgd, line 685.
    Grenades protected area.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_nogrenades", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 



        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled"])


class FuncProprrespawnzone(Entity):
    """
    Auto-generated from tf.fgd, line 771.
    Zone that handles respawning and distribution of clientside physics props.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_proprrespawnzone", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["targetname"])


class FuncRegenerate(Entity):
    """
    Auto-generated from tf.fgd, line 691.
    Regeneration zone for players.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_regenerate", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        # Associated Model : The prop_dynamic that represents this zone in the world. The associated model should have appropriate open and close animations for when players interact with the zone.
        self.associatedmodel = "" 

        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "associatedmodel"])


class FuncRespawnflag(Entity):
    """
    Auto-generated from tf.fgd, line 697.
    Designates an area that triggers the flag to reset when it touches the area.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_respawnflag", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 



        self.auto_properties.extend(["targetname", "StartDisabled"])


class FuncRespawnroom(Entity):
    """
    Auto-generated from tf.fgd, line 700.
    Designates a respawn room for a team.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_respawnroom", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 



        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled"])


class FuncRespawnroomvisualizer(Entity):
    """
    Auto-generated from tf.fgd, line 717.
    Brushes that become visible to enemy players when they get close. Use them to mark areas that they're unable to enter (i.e. respawn rooms).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_respawnroomvisualizer", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin = ""

        # Render FX : TODO: Replace this filler.
        self.renderfx = 0 

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = 0 
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt = 255 
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor = "255 255 255" 
        # Disable Receiving Shadows : TODO: Replace this filler.
        self.disablereceiveshadows = 0 

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname = "" 

        # Input Filter : Used to specify which inputs this entity will accept.
        self.InputFilter = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Disable shadows : TODO: Replace this filler.
        self.disableshadows = 0 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # Associated Respawn Room : The func_respawnroom that this entity is visualizing. This entity will have its team matched to that for the func_respawnroom, and will have it updated if the func_respawnroom ever changes team.
        self.respawnroomname = "" 
        # Solidity : Used to control the solidity/collision of these brushes.
        self.Solidity = 1 
        # Shadows : Set this if this brush casts lightmap shadows.
        self.vrad_brush_cast_shadows = 0 
        # Solid to Enemies : Determines if this area is solid to enemy players.
        self.solid_to_enemies = 1 

        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "InputFilter", "StartDisabled", "disableshadows", "spawnflags", "respawnroomname", "Solidity", "vrad_brush_cast_shadows", "solid_to_enemies"])


class GameForcerespawn(Entity):
    """
    Auto-generated from tf.fgd, line 461.
    Removes buildings, grenades, etc., from the world and forces all players to respawn (without being killed).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_forcerespawn", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["targetname"])


class GameIntroViewpoint(Entity):
    """
    Auto-generated from tf.fgd, line 752.
    A viewpoint in the intro camera.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_intro_viewpoint", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Team : Team
        self.TeamNum = 0 
        # Step Number. Intro starts at 1. : TODO: Replace this filler.
        self.step_number = 1
        # Time to spend here. : TODO: Replace this filler.
        self.time_delay = 12
        # Hint Message here. : TODO: Replace this filler.
        self.hint_message = ""
        # Game Event To Fire : TODO: Replace this filler.
        self.event_to_fire = ""
        # Game Event fire delay : TODO: Replace this filler.
        self.event_delay = 3
        # Game Event data : TODO: Replace this filler.
        self.event_data_int = 0
        # FOV : TODO: Replace this filler.
        self.fov = 0

        self.auto_properties.extend(["angles", "TeamNum", "step_number", "time_delay", "hint_message", "event_to_fire", "event_delay", "event_data_int", "fov"])


class GameRoundWin(Entity):
    """
    Auto-generated from tf.fgd, line 537.
    Tells the game rules that the round has either been won (if a team is assigned) or enter Sudden Death mode (if no team is assigned).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_round_win", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 
        # Force map reset : Force the map to reset during the force respawn after the round is over.
        self.force_map_reset = 1 
        # Switch teams on map win? : Switch the teams when the game is going to be reset.
        self.switch_teams = 0 

        self.auto_properties.extend(["targetname", "TeamNum", "force_map_reset", "switch_teams"])


class GameTextTf(Entity):
    """
    Auto-generated from tf.fgd, line 1031.
    An entity that displays text on player's screens, in pretty tf hud format
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_text_tf", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Message Text : Message to display onscreen.
        self.message = "" 
        # Icon : Hud icon ( from mod_textures.res ) to display.
        self.icon = "" 
        # Audience : TODO: Replace this filler.
        self.display_to_team = 0 
        # Background Panel Color : TODO: Replace this filler.
        self.background = 0 

        self.auto_properties.extend(["targetname", "message", "icon", "display_to_team", "background"])


class InfoObserverPoint(Entity):
    """
    Auto-generated from tf.fgd, line 523.
    Observer Point
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_observer_point", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Associated Team Entity : An entity associated with this point that can be owned by a team (such as a flag or control point). Players will only be able to use this observer point if their team owns the associated team entity.
        self.associated_team_entity = "" 
        # Welcome Point : This marks this point as a welcome point. Players use this when connectig to servers the first time.
        self.defaultwelcome = 0 
        # FOV : TODO: Replace this filler.
        self.fov = 0

        self.auto_properties.extend(["targetname", "TeamNum", "angles", "StartDisabled", "associated_team_entity", "defaultwelcome", "fov"])


class InfoPlayerTeamspawn(Entity):
    """
    Auto-generated from tf.fgd, line 452.
    This entity marks the spawn point for Team Fortress players.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_teamspawn", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Associated Control Point : The team_control_point associated with this spawn. Ownership of control points will control this spawn point's enabled state.
        self.controlpoint = ""
        # Blue spawn for round : Blue spawn point when the associated round is being played.
        self.round_bluespawn = ""
        # Red spawn for round : Red spawn point when the associated round is being played.
        self.round_redspawn = ""

        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "angles", "controlpoint", "round_bluespawn", "round_redspawn"])


class ItemAmmopackFull(Entity):
    """
    Auto-generated from tf.fgd, line 646.
    
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "item_ammopack_full", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        # Model : Change the model to something other than the default model.
        self.powerup_model = "" 


        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "angles", "powerup_model"])


class ItemAmmopackMedium(Entity):
    """
    Auto-generated from tf.fgd, line 648.
    Ammo Pack Medium
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "item_ammopack_medium", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        # Model : Change the model to something other than the default model.
        self.powerup_model = "" 


        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "angles", "powerup_model"])


class ItemAmmopackSmall(Entity):
    """
    Auto-generated from tf.fgd, line 647.
    Ammo Pack Small
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "item_ammopack_small", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        # Model : Change the model to something other than the default model.
        self.powerup_model = "" 


        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "angles", "powerup_model"])


class ItemHealthkitFull(Entity):
    """
    Auto-generated from tf.fgd, line 642.
    Health Kit Full
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "item_healthkit_full", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        # Model : Change the model to something other than the default model.
        self.powerup_model = "" 


        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "angles", "powerup_model"])


class ItemHealthkitMedium(Entity):
    """
    Auto-generated from tf.fgd, line 644.
    Health Kit Medium
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "item_healthkit_medium", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        # Model : Change the model to something other than the default model.
        self.powerup_model = "" 


        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "angles", "powerup_model"])


class ItemHealthkitSmall(Entity):
    """
    Auto-generated from tf.fgd, line 643.
    
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "item_healthkit_small", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        # Model : Change the model to something other than the default model.
        self.powerup_model = "" 


        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "angles", "powerup_model"])


class ItemTeamflag(Entity):
    """
    Auto-generated from tf.fgd, line 473.
    Team Fortress flag entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "item_teamflag", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Game Type : Type of game this flag will be used for.
        self.GameType = 0 

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Return time (in seconds) : Length of time (in seconds) before dropped flag/intelligence returns to base.
        self.ReturnTime = 60 
        # Neutral flag (Invade) : Only used for the Invade game type. When should a dropped Invade flag become neutral?
        self.NeutralType = 1 
        # Scoring style (Invade) : Only used for the Invade game type. When the Invade flag is captured, how should the team be rewarded? 'Score' is the team score in the scoreboard. 'Capture count' is the team capture count used in the HUD.
        self.ScoringType = 0 
        # Model : The model to be used for this entity.
        self.flag_model = "models/flag/briefcase.mdl" 
        # Use Trail Effect : Use trail effect when the player is carrying the flag.
        self.trail_effect = 1 

        self.auto_properties.extend(["targetname", "parentname", "GameType", "TeamNum", "StartDisabled", "angles", "ReturnTime", "NeutralType", "ScoringType", "flag_model", "trail_effect"])


class MapobjCartDispenser(Entity):
    """
    Auto-generated from tf.fgd, line 1092.
    TF2 Dispenser
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "mapobj_cart_dispenser", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Team : Team
        self.TeamNum = 2 
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # Custom Touch Trigger : TODO: Replace this filler.
        self.touch_trigger = ""

        self.auto_properties.extend(["targetname", "parentname", "TeamNum", "spawnflags", "spawnflags", "touch_trigger"])


class ObjDispenser(Entity):
    """
    Auto-generated from tf.fgd, line 1071.
    TF2 Dispenser
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "obj_dispenser", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Team : Team
        self.TeamNum = 2 
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        self.auto_properties.extend(["targetname", "parentname", "TeamNum", "spawnflags", "angles"])


class ObjSentrygun(Entity):
    """
    Auto-generated from tf.fgd, line 1076.
    TF2 Sentrygun
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "obj_sentrygun", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Team : Team
        self.TeamNum = 2 
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Starting Upgrade Level : TODO: Replace this filler.
        self.defaultupgrade = 0 
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""

        self.auto_properties.extend(["targetname", "parentname", "TeamNum", "spawnflags", "angles", "defaultupgrade", "spawnflags"])


class PointIntermission(Entity):
    """
    Auto-generated from tf.fgd, line 517.
    Entity that ends the match and triggers an intermission.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_intermission", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["targetname"])


class TeamControlPoint(Entity):
    """
    Auto-generated from tf.fgd, line 779.
    Control Point
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "team_control_point", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # Start locked : Locked means the point will not be available for capture until it is unlocked via its input.
        self.point_start_locked = 0 
        # Print Name : TODO: Replace this filler.
        self.point_printname = "TODO
        # Group Index : Used for grouping points together under a team_control_point_master (not using control point rounds).
        self.point_group = 0 
        # Default Owner : Default Owner of the control point.
        self.point_default_owner = 0 
        # Index : Index of this point (must be unique).
        self.point_index = 0 
        # Warning Type : Type of warning to issue to the team that owns the control point when the opposing team starts to capture it.
        self.point_warn_on_cap = 0 
        # Warning sound : Sound to be played when this point is being captured (if warn on capture is set).
        self.point_warn_sound = "ControlPoint.CaptureWarn" 
        # Randomly set the owner on restart : Randomly set the owner of this point during a full restart of the map. The ratio of default owners among the points with this flag will be kept when selecting random owners.
        self.random_owner_on_restart = 0 
        # Time-based point value for RED. : TODO: Replace this filler.
        self.team_timedpoints_2 = 0
        # Time-based point value for BLUE. : TODO: Replace this filler.
        self.team_timedpoints_3 = 0
        # Reset Sound : Sound made when point resets.
        self.team_capsound_0 = "" 
        # Red Capture Sound : Sound made when RED captures.
        self.team_capsound_2 = "" 
        # Blue Capture Sound : Sound made when BLUE captures.
        self.team_capsound_3 = "" 
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.team_model_0 = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.team_model_2 = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.team_model_3 = ""
        # Reset model bodygroup : TODO: Replace this filler.
        self.team_bodygroup_0 = 3
        # RED model bodygroup : TODO: Replace this filler.
        self.team_bodygroup_2 = 1
        # BLUE model bodygroup : TODO: Replace this filler.
        self.team_bodygroup_3 = 1
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.team_icon_0 = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.team_icon_2 = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.team_icon_3 = ""
        # HUD overlay neutral : HUD material that will overlay the icon when no one owns the point.
        self.team_overlay_0 = "" 
        # HUD overlay RED : HUD material that will overlay the icon when RED owns the point.
        self.team_overlay_2 = "" 
        # HUD overlay BLUE : HUD material that will overlay the icon when BLUE owns the point.
        self.team_overlay_3 = "" 
        # RED Previous Required Point 1 : The name of a previous capture point that RED must own to be able to capture this point. If empty, the team must own all points preceding this one. Pointing to itself means no previous point required.
        self.team_previouspoint_2_0 = "" 
        # RED Previous Required Point 2 : The name of a second previous capture point that RED must own to be able to capture this point.
        self.team_previouspoint_2_1 = "" 
        # RED Previous Required Point 3 : The name of a third previous capture point that RED must own to be able to capture this point.
        self.team_previouspoint_2_2 = "" 
        # BLUE Previous Required Point 1 : The name of a previous capture point that BLUE must own to be able to capture this point. If empty, the team must own all points preceding this one. Pointing to itself means no previous point required.
        self.team_previouspoint_3_0 = "" 
        # BLUE Previous Required Point 2 : The name of a second previous capture point that BLUE must own to be able to capture this point.
        self.team_previouspoint_3_1 = "" 
        # BLUE Previous Required Point 3 : The name of a third previous capture point that BLUE must own to be able to capture this point.
        self.team_previouspoint_3_2 = "" 

        self.auto_properties.extend(["targetname", "StartDisabled", "angles", "parentname", "spawnflags", "point_start_locked", "point_printname", "point_group", "point_default_owner", "point_index", "point_warn_on_cap", "point_warn_sound", "random_owner_on_restart", "team_timedpoints_2", "team_timedpoints_3", "team_capsound_0", "team_capsound_2", "team_capsound_3", "team_model_0", "team_model_2", "team_model_3", "team_bodygroup_0", "team_bodygroup_2", "team_bodygroup_3", "team_icon_0", "team_icon_2", "team_icon_3", "team_overlay_0", "team_overlay_2", "team_overlay_3", "team_previouspoint_2_0", "team_previouspoint_2_1", "team_previouspoint_2_2", "team_previouspoint_3_0", "team_previouspoint_3_1", "team_previouspoint_3_2"])


class TeamControlPointMaster(Entity):
    """
    Auto-generated from tf.fgd, line 896.
    Control Point Master
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "team_control_point_master", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Material for the RED Base icon : TODO: Replace this filler.
        self.team_base_icon_2 = "sprites/obj_icons/icon_base_red"
        # Material for the BLUE Base icon : TODO: Replace this filler.
        self.team_base_icon_3 = "sprites/obj_icons/icon_base_blu"
        # Cap Layout : A string that tells the HUD how to lay out the cap points. It should be a string with indexes of cap points seperated by commas to denote a new line. So <2,0 1> would create a pyramid, with cap point 2 on the top and cap points 0 & 1 on the bottom.
        self.caplayout = "" 
        # Restrict team from winning : Prevent this team from winning by capping all the points. This field is ignored if you're using control_point_rounds in your map (set this field inside the rounds).
        self.cpm_restrict_team_cap_win = 0 
        # Switch teams on map win? : Switch the teams when one team has won the map and the game is going to be reset.
        self.switch_teams = 0 
        # Scoring style : Sets the style of scoring used for capture point maps.
        self.score_style = 0 
        # Play all rounds before changelevel : Determines whether the server may changelevel when mp_timelimit is up before all mini-rounds have been completed (for maps like Dustbowl).
        self.play_all_rounds = 0 
        # Partial cap rate : Rate at which to give partial cap points for area captures.
        self.partial_cap_points_rate = 0 

        self.auto_properties.extend(["targetname", "StartDisabled", "team_base_icon_2", "team_base_icon_3", "caplayout", "cpm_restrict_team_cap_win", "switch_teams", "score_style", "play_all_rounds", "partial_cap_points_rate"])


class TeamControlPointRound(Entity):
    """
    Auto-generated from tf.fgd, line 873.
    Control Point Round (you may have as many of these in the map as you would like).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "team_control_point_round", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Print Name : LOCALIZED name to print on the RoundInfo panel
        self.cpr_printname = "" 
        # Priority : The priority value for this round (must be >= 0). Higher priority rounds will be picked first. If multiple rounds have the same priority value, a random selection will be used.
        self.cpr_priority = 0 
        # Control points in this round : Names of the control points included in this round (space delimited). Control points may belong to more than one control point round.  The names of the control points (and the rounds) should all be unique.
        self.cpr_cp_names = "" 
        # Restrict team from winning : Prevent this team from winning by capping all the points
        self.cpr_restrict_team_cap_win = 0 

        self.auto_properties.extend(["targetname", "StartDisabled", "cpr_printname", "cpr_priority", "cpr_cp_names", "cpr_restrict_team_cap_win"])


class TeamRoundTimer(Entity):
    """
    Auto-generated from tf.fgd, line 568.
    Round Timer. Timer starts paused by default.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "team_round_timer", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Timer length (in seconds) : Initial timer length.
        self.timer_length = 600 
        # Max timer length (in seconds) : Maximum timer length (0 = no max). This value is used to ensure the timer never goes above this value when SetTime and AddTime are used.
        self.max_length = 0 
        # Start paused : Should the timer start paused? (will need to send a Resume input to start the timer if this is set).
        self.start_paused = 1 
        # Setup timer length (in seconds) : Length of setup time before the round begins and the timer starts to countdown the normal time. (0 = no setup time)  Setup time is run at the beginning of every round before the normal time begins.
        self.setup_length = 0 
        # Reset time on round restart : Reset the timer time after a round restart.  This is not the setup time, but the normal round time.
        self.reset_time = 0 
        # Use countdown sounds : Let the timer automatically count down the end of a round.
        self.auto_countdown = 1 
        # Show timer in the HUD : Note: You can only show one timer in the HUD at a time.
        self.show_in_hud = 1 

        self.auto_properties.extend(["targetname", "StartDisabled", "timer_length", "max_length", "start_paused", "setup_length", "reset_time", "auto_countdown", "show_in_hud"])


class TeamTrainWatcher(Entity):
    """
    Auto-generated from tf.fgd, line 983.
    Entity that tracks the train progress through train escort maps
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "team_train_watcher", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team : Team
        self.TeamNum = 0 

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Can the train recede? : Used to hide the HUD countdown.
        self.train_can_recede = 1 
        # Train to watch. : TODO: Replace this filler.
        self.train = ""
        # Node that the path starts at. : TODO: Replace this filler.
        self.start_node = ""
        # Node that the path ends at. : TODO: Replace this filler.
        self.goal_node = ""
        # Linked PathTrack 1 : TODO: Replace this filler.
        self.linked_pathtrack_1 = ""
        # Linked CP 1 : TODO: Replace this filler.
        self.linked_cp_1 = ""
        # Linked PathTrack 2 : TODO: Replace this filler.
        self.linked_pathtrack_2 = ""
        # Linked CP 2 : TODO: Replace this filler.
        self.linked_cp_2 = ""
        # Linked PathTrack 3 : TODO: Replace this filler.
        self.linked_pathtrack_3 = ""
        # Linked CP 3 : TODO: Replace this filler.
        self.linked_cp_3 = ""
        # Linked PathTrack 4 : TODO: Replace this filler.
        self.linked_pathtrack_4 = ""
        # Linked CP 4 : TODO: Replace this filler.
        self.linked_cp_4 = ""
        # Linked PathTrack 5 : TODO: Replace this filler.
        self.linked_pathtrack_5 = ""
        # Linked CP 5 : TODO: Replace this filler.
        self.linked_cp_5 = ""
        # Linked PathTrack 6 : TODO: Replace this filler.
        self.linked_pathtrack_6 = ""
        # Linked CP 6 : TODO: Replace this filler.
        self.linked_cp_6 = ""
        # Linked PathTrack 7 : TODO: Replace this filler.
        self.linked_pathtrack_7 = ""
        # Linked CP 7 : TODO: Replace this filler.
        self.linked_cp_7 = ""
        # Linked PathTrack 8 : TODO: Replace this filler.
        self.linked_pathtrack_8 = ""
        # Linked CP 8 : TODO: Replace this filler.
        self.linked_cp_8 = ""
        # Min Speed for Speed Level 1 : TODO: Replace this filler.
        self.hud_min_speed_level_1 = 30
        # Min Speed for Speed Level 2 : TODO: Replace this filler.
        self.hud_min_speed_level_2 = 60
        # Min Speed for Speed Level 3 : TODO: Replace this filler.
        self.hud_min_speed_level_3 = 90

        self.auto_properties.extend(["targetname", "TeamNum", "StartDisabled", "train_can_recede", "train", "start_node", "goal_node", "linked_pathtrack_1", "linked_cp_1", "linked_pathtrack_2", "linked_cp_2", "linked_pathtrack_3", "linked_cp_3", "linked_pathtrack_4", "linked_cp_4", "linked_pathtrack_5", "linked_cp_5", "linked_pathtrack_6", "linked_cp_6", "linked_pathtrack_7", "linked_cp_7", "linked_pathtrack_8", "linked_cp_8", "hud_min_speed_level_1", "hud_min_speed_level_2", "hud_min_speed_level_3"])


class TfGamerules(Entity):
    """
    Auto-generated from tf.fgd, line 414.
    Proxy entity for TF Gamerules
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "tf_gamerules", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Hud Type : Override the HUD type clients should display.
        self.hud_type = 0 
        # CTF Overtime : Allow Overtime for CTF maps.
        self.ctf_overtime = 1 

        self.auto_properties.extend(["targetname", "hud_type", "ctf_overtime"])


class TfLogicArena(Entity):
    """
    Auto-generated from tf.fgd, line 1108.
    
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "tf_logic_arena", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Capture Point Enable Time : TODO: Replace this filler.
        self.CapEnableDelay = 0

        self.auto_properties.extend(["targetname", "StartDisabled", "CapEnableDelay"])


class TfLogicHybridCtfCp(Entity):
    """
    Auto-generated from tf.fgd, line 1129.
    Hybrid Map Entity. This is used to detect a map that blends the CTF and CP game modes.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "tf_logic_hybrid_ctf_cp", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["targetname"])


class TfLogicKoth(Entity):
    """
    Auto-generated from tf.fgd, line 1123.
    King of the Hill Entity. This is used to detect a KOTH map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "tf_logic_koth", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Timer length (in seconds) : Initial timer length for each team.
        self.timer_length = 180 
        # Unlock Point (in seconds) : Time to wait before unlocking the point in CP KOTH maps.
        self.unlock_point = 30 

        self.auto_properties.extend(["targetname", "timer_length", "unlock_point"])


class TfLogicMultipleEscort(Entity):
    """
    Auto-generated from tf.fgd, line 1119.
    Multiple Escort Entity. This is used to detect a payload map with trains for both teams.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "tf_logic_multiple_escort", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["targetname"])


class TriggerCaptureArea(Entity):
    """
    Auto-generated from tf.fgd, line 937.
    Capture Area
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_capture_area", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Control point : Name of the control point this area is linked to.
        self.area_cap_point = "" 
        # Can RED Cap? : TODO: Replace this filler.
        self.team_cancap_2 = 1 
        # Can BLUE Cap? : TODO: Replace this filler.
        self.team_cancap_3 = 1 
        # Number of RED players to cap : TODO: Replace this filler.
        self.team_numcap_2 = 1
        # Number of BLUE players to cap : TODO: Replace this filler.
        self.team_numcap_3 = 1
        # Red Spawn Adjust : Adjust the minimum respawn time for the red team by this amount (in seconds) when red captures this point. If the red team owns this point when blue captures it, this adjustment is reversed.
        self.team_spawn_2 = 0 
        # Blue Spawn Adjust : Adjust the minimum respawn time for the blue team by this amount (in seconds) when blue captures this point. If the blue team owns this point when red captures it, this adjustment is reversed.
        self.team_spawn_3 = 0 
        # Time to cap (sec) : TODO: Replace this filler.
        self.area_time_to_cap = 5

        self.auto_properties.extend(["targetname", "StartDisabled", "parentname", "area_cap_point", "team_cancap_2", "team_cancap_3", "team_numcap_2", "team_numcap_3", "team_spawn_2", "team_spawn_3", "area_time_to_cap"])


