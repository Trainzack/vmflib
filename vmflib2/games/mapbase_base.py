"""
Helper classes for creating maps in any Source Engine game that uses mapbase_base.fgd.
This file was auto-generated by import_fgd.py on 2020-01-19 09:11:15.535462.
"""

from vmflib2.vmf import *


class AiMonitor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6033.
    Monitors NPCs for conditions and schedules. You can use this entity to either watch an entity for conditions/schedules or test whether they have them. TODO: Task support.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=1, Target: str="", MaxEnts: int=1, SetMonitorInterval: float="0.25", SetCooldownTime: float="1.0", CooldownAt=0, ConditionsSimple=0, Conditions: str="", Schedules: str="", TranslateSchedules=0, HintsSimple=0, Hints: str="", HintDistance: float="32.0"):
        Entity.__init__(self, "ai_monitor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Target NPC(s) : The NPCs that should be monitored.
        self.Target: str = Target
        # Maximum Targets : How many NPCs we're allowed to monitor. Each one will fire outputs. 0 = no limit.
        self.MaxEnts: int = MaxEnts
        # Monitor Interval : The amount of time in between monitor checks. Use 0 to monitor each tick.
        self.SetMonitorInterval: float = SetMonitorInterval
        # Cooldown Time : Whenever a monitor check succeeds, how long should this entity wait before checking again? Use -1 to disable cooldown.
        self.SetCooldownTime: float = SetCooldownTime
        # Cooldown upon first success : While actively monitoring, engage cooldown as soon as a NPC fulfills any of the evaluators instead of checking the other NPCs and letting them fire outputs as well.
        self.CooldownAt = CooldownAt
        # Condition : Which condition to monitor. Use 'Conditions (advanced)' to use conditions outside of this list or use multiple conditions.
        self.ConditionsSimple = ConditionsSimple
        # Conditions (advanced) : Allows you to specify exactly which conditions to monitor, either by their actual integer ID or their string name. Separate multiple conditions with colons: 'COND_BEHIND_ENEMY:COND_ENEMY_OCCLUDED:11'
        self.Conditions: str = Conditions
        # Schedules (advanced) : Allows you to specify exactly which schedules to monitor, either by their actual integer ID or their string name. Separate multiple schedules with colons: 'SCHED_INVESTIGATE_SOUND:SCHED_COMBAT_FACE:14'
        self.Schedules: str = Schedules
        # Translate shcedules : Translates schedules based on each NPC's behavior each time they're checked. This depends on how the NPC remaps that schedule, which may be either their own version of it or something completely different that may not be desirable. The performance impact of this setting is not known.
        self.TranslateSchedules = TranslateSchedules
        # Hint Node : Which hint to monitor. Use 'Hints (advanced)' to use conditions outside of this list or use multiple hints.
        self.HintsSimple = HintsSimple
        # Hint Nodes (advanced) : Allows you to specify exactly which hints to monitor by their integer ID. Separate multiple hints with colons: '100:101:104'
        self.Hints: str = Hints
        # Hint Distance : The maximum distance a NPC must be from their current hint node before we are allowed to check.
        self.HintDistance: float = HintDistance

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "Target", "MaxEnts", "SetMonitorInterval", "SetCooldownTime", "CooldownAt", "ConditionsSimple", "Conditions", "Schedules", "TranslateSchedules", "HintsSimple", "Hints", "HintDistance"])


class AiSpeechfilter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8368.
    An entity that can be used to control the idle speech patterns of a set of NPCs.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", ResponseContext: str="", StartDisabled=0, subject: str="", IdleModifier: float="1.0", NeverSayHello=0):
        Entity.__init__(self, "ai_speechfilter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Subject(s) : This is the NPC(s) whose speech we're filtering. May be a targetname or a classname.
        self.subject: str = subject
        # Idle modifier. : Multiplier to the percentage chance that our NPC(s) will idle speak. Set to 0 to prevent all idle speech.
        self.IdleModifier: float = IdleModifier
        # Greet Player? : If set to Yes, our NPC(s) won't greet the player when they first meet him.
        self.NeverSayHello = NeverSayHello

        self.auto_properties.extend(["origin", "targetname", "ResponseContext", "StartDisabled", "subject", "IdleModifier", "NeverSayHello"])


class AiWeaponmodifier(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6141.
    Modifies a NPC's weapon shot regulation.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, Target: str="", BurstInterval: str="0.1", RestInterval: str="0.25", BurstShotCountRange: str="2"):
        Entity.__init__(self, "ai_weaponmodifier", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Target(s) : The NPC(s) that will be modified by default.
        self.Target: str = Target
        # Burst Interval : 
        self.BurstInterval: str = BurstInterval
        # Rest Interval : 
        self.RestInterval: str = RestInterval
        # Burst Shot Count Range : 
        self.BurstShotCountRange: str = BurstShotCountRange

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "Target", "BurstInterval", "RestInterval", "BurstShotCountRange"])


class AmbientGeneric(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1096.
    Universal ambient sound. Use it to play and control a single sound.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", message: str="", health: int=10, preset=0, volstart: int=0, fadeinsecs: int=0, fadeoutsecs: int=0, pitch: int=100, pitchstart: int=100, spinup: int=0, spindown: int=0, lfotype: int=0, lforate: int=0, lfomodpitch: int=0, lfomodvol: int=0, cspinup: int=0, radius: str="1250", spawnflags="", soundflags=0, SourceEntityName: str=""):
        Entity.__init__(self, "ambient_generic", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Sound Name : Name of the GameSound entry for the sound to play. Also supports direct .wav filenames.
        self.message: str = message
        # Volume : Sound volume, expressed as a range from 0 to 10, where 10 is the loudest.
        self.health: int = health
        # Dynamic Presets : 
        self.preset = preset
        # Start Volume : 
        self.volstart: int = volstart
        # Fade in time in seconds (0-100) : 
        self.fadeinsecs: int = fadeinsecs
        # Fade out time in seconds (0-100) : 
        self.fadeoutsecs: int = fadeoutsecs
        # Pitch : Sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch.
        self.pitch: int = pitch
        # Start Pitch : 
        self.pitchstart: int = pitchstart
        # Spin up time (0-100) : 
        self.spinup: int = spinup
        # Spin down time (0-100) : 
        self.spindown: int = spindown
        # LFO type 0)off 1)sqr 2)tri 3)rnd : 
        self.lfotype: int = lfotype
        # LFO rate (0-1000) : 
        self.lforate: int = lforate
        # LFO mod pitch (0-100) : 
        self.lfomodpitch: int = lfomodpitch
        # LFO mod vol (0-100) : 
        self.lfomodvol: int = lfomodvol
        # Incremental Spinup Count : 
        self.cspinup: int = cspinup
        # Max Audible Distance : Maximum distance at which this sound is audible.
        self.radius: str = radius
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sound Flags : Additional options for your sound.
        self.soundflags = soundflags
        # SourceEntityName : If an entity is specified, sound will come from this named entity instead of the location of ambient_generic.
        self.SourceEntityName: str = SourceEntityName

        self.auto_properties.extend(["origin", "targetname", "parentname", "message", "health", "preset", "volstart", "fadeinsecs", "fadeoutsecs", "pitch", "pitchstart", "spinup", "spindown", "lfotype", "lforate", "lfomodpitch", "lfomodvol", "cspinup", "radius", "spawnflags", "soundflags", "SourceEntityName"])


class ColorCorrection(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3624.
    An entity to control the color correction in the map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, minfalloff: float="0.0", maxfalloff: float="200.0", maxweight: float="1.0", filename: str="", fadeInDuration: float="0.0", fadeOutDuration: float="0.0"):
        Entity.__init__(self, "color_correction", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Lookup Falloff Start Distance : This is the distance to the start of the falloff region (-1 = everywhere)
        self.minfalloff: float = minfalloff
        # Lookup Falloff End Distance : This is the distance to the end of the falloff region (-1 = everywhere)
        self.maxfalloff: float = maxfalloff
        # Maximum Weight : This is the maximum weight for this lookup
        self.maxweight: float = maxweight
        # Lookup Table Filename : This is the lookup table filename
        self.filename: str = filename
        # Lookup Fade In Duration : Duration of fade in on when enabled.
        self.fadeInDuration: float = fadeInDuration
        # Lookup Fade out Duration : Dration of fade out on when disabled.
        self.fadeOutDuration: float = fadeOutDuration

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "minfalloff", "maxfalloff", "maxweight", "filename", "fadeInDuration", "fadeOutDuration"])


class ColorCorrectionVolume(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3644.
    An entity to control the color correction in the map.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", StartDisabled=0, fadeDuration: float="10.0", maxweight: float="1.0", filename: str=""):
        Entity.__init__(self, "color_correction_volume", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Lookup Fade Duration : This is the duration for the lookup to fade in/out on extry/exit
        self.fadeDuration: float = fadeDuration
        # Maximum Weight : This is the maximum weight for this lookup
        self.maxweight: float = maxweight
        # Lookup Table Filename : This is the lookup table filename
        self.filename: str = filename

        self.auto_properties.extend(["targetname", "StartDisabled", "fadeDuration", "maxweight", "filename"])


class Cycler(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1671.
    An entity used to display a model for testing purposes. Shooting it with cycle through the model's animations.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, spawnflags="", model: str="", skin: int=0, sequence: int=0):
        Entity.__init__(self, "cycler", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Sequence : Default animation sequence for the model to be playing after spawning.
        self.sequence: int = sequence

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "spawnflags", "model", "skin", "sequence"])


class EnvBeam(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1714.
    An entity that creates a visible beam between two points. The points can be attached to entities to make the beam move around.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", renderfx=0, renderamt: int=100, rendercolor: "RGB"="255 255 255", Radius: int=256, life: str="1", BoltWidth: float=2, NoiseAmplitude: float=0, texture: str="sprites/laserbeam.spr", TextureScroll: int=35, framerate: int=0, framestart: int=0, StrikeTime: str="1", damage: str="0", LightningStart: str="", LightningEnd: str="", decalname: str="Bigshot", HDRColorScale: float="1.0", spawnflags="", TouchType=0, filtername: str=""):
        Entity.__init__(self, "env_beam", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Render FX : 
        self.renderfx = renderfx

        # Brightness (1 - 255) : 
        self.renderamt: int = renderamt
        # Beam Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Radius : If the 'Random Strike' spawnflag is set, this radius determines the area within which the endpoints will randomly strike.
        self.Radius: int = Radius
        # Life (seconds 0 = infinite) : Amount of time before the beam dies. Setting to zero will make the beam stay forever.
        self.life: str = life
        # Width of beam : Pixel width of the beam.
        self.BoltWidth: float = BoltWidth
        # Amount of noise (0-255) : The amount of noise in the beam. 0 is a perfectly straight beam.
        self.NoiseAmplitude: float = NoiseAmplitude
        # Sprite Name : The material used to draw the beam.
        self.texture: str = texture
        # Texture Scroll Rate (0-100) : Rate at which the beam texture should scroll along the beam.
        self.TextureScroll: int = TextureScroll
        # Frames per 10 seconds : Framerate at which the beam texture should animate, if it has multiple frames.
        self.framerate: int = framerate
        # Starting Frame : The frame to start the beam texture on.
        self.framestart: int = framestart
        # Strike again time (secs) : Refire time between random strikes of the beam. Only used if the 'Random Strike' spawnflag is set.
        self.StrikeTime: str = StrikeTime
        # Damage / second : How much damage this beam does per second to things it hits when it is continually on, or instantaneously if it strikes. For continuous damage, the value should be greater than 10 or it may not work.
        self.damage: str = damage
        # Start Entity : Entity that the beam starts at.
        self.LightningStart: str = LightningStart
        # Ending Entity : Entity that the beam ends at.
        self.LightningEnd: str = LightningEnd
        # Decal Name : Decal to be applied at the end of the beam
        self.decalname: str = decalname
        # HDR color scale. : float value to multiply sprite color by when running in HDR mode.
        self.HDRColorScale: float = HDRColorScale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Touch Type (tripwire) : If you want the beam to fire an output when touched by entities, choose the entity type here.
        self.TouchType = TouchType
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername

        self.auto_properties.extend(["origin", "targetname", "renderfx", "renderamt", "rendercolor", "Radius", "life", "BoltWidth", "NoiseAmplitude", "texture", "TextureScroll", "framerate", "framestart", "StrikeTime", "damage", "LightningStart", "LightningEnd", "decalname", "HDRColorScale", "spawnflags", "TouchType", "filtername"])


class EnvBeverage(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1781.
    HL1 Legacy: Beverage Dispenser.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", health: int=10, beveragetype=0):
        Entity.__init__(self, "env_beverage", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Capacity : Number of cans in the dispenser.
        self.health: int = health
        # Beverage Type : 
        self.beveragetype = beveragetype

        self.auto_properties.extend(["origin", "targetname", "parentname", "health", "beveragetype"])


class EnvBlood(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1836.
    An entity used to spawn blood effects.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spraydir: "Origin"="0 0 0", color=0, amount: str="100", spawnflags=""):
        Entity.__init__(self, "env_blood", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Spray Direction (Pitch Yaw Roll) : The general direction that the blood should spray and the direction to trace to apply the decal.
        self.spraydir: "Origin" = spraydir
        # Blood Color : 
        self.color = color
        # Amount of blood (damage to simulate) : 
        self.amount: str = amount
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "spraydir", "color", "amount", "spawnflags"])


class EnvBreakShooter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2397.
    An entity that shoots func_breakable gibs.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model="WoodChunks", modeltype=0, SetCount: int=15, SetDelay: float="0.0", SetGibSize: "Origin"="0 0 0", SetGibSpeed: float="200", SetRandomization: int=100, SetLifetime: float="5", SetGibFlags: int=0):
        Entity.__init__(self, "env_break_shooter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname


        # Gib Direction (Pitch Yaw Roll) : The direction the gibs will fly.
        self.angles: "Origin" = angles
        # Model : Thing(s) to shoot out. The choices only matter when the model type is Breakable Chunks. If a specific model is needed, enter its file path. If a point_template is needed, enter the point_template's name.
        self.model = model
        # Model Type : The type of model to use.
        self.modeltype = modeltype
        # Gib Count : Number of gibs to create.
        self.SetCount: int = SetCount
        # Delay : Delay until gibs are shot.
        self.SetDelay: float = SetDelay
        # Gib Size : The size of each gib.
        self.SetGibSize: "Origin" = SetGibSize
        # Gib Speed : The speed of each gib.
        self.SetGibSpeed: float = SetGibSpeed
        # Randomization : The gib direction randomization factor.
        self.SetRandomization: int = SetRandomization
        # Lifetime : The lifetime of each gib.
        self.SetLifetime: float = SetLifetime
        # Gib Flags : The flags for each gib.
        self.SetGibFlags: int = SetGibFlags

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "modeltype", "SetCount", "SetDelay", "SetGibSize", "SetGibSpeed", "SetRandomization", "SetLifetime", "SetGibFlags"])


class EnvBubbles(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1862.
    An entity used to create a volume in which to spawn bubbles.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", density: int=2, frequency: int=2, current: int=0, spawnflags=""):
        Entity.__init__(self, "env_bubbles", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Bubble density : 
        self.density: int = density
        # Bubble frequency : 
        self.frequency: int = frequency
        # Speed of Current : The speed of the water current in the volume, used to move the bubbles.
        self.current: int = current
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "density", "frequency", "current", "spawnflags"])


class EnvClosecaption(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6166.
    Sends a CC token via the 'Send' input. Unfortunately, this does not allow you to make your own and you can only use existing ones.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", flags=0, duration: float="2.5"):
        Entity.__init__(self, "env_closecaption", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Flags : Flags.
        self.flags = flags
        # Duration : The duration of the CC.
        self.duration: float = duration

        self.auto_properties.extend(["origin", "targetname", "flags", "duration"])


class EnvCredits(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8639.
    An entity to control the rolling credits.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", CreditsFile: str=""):
        Entity.__init__(self, "env_credits", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Custom Credits File : Allows a custom credits file to be loaded instead of the default 'scripts/credits.txt'.
        self.CreditsFile: str = CreditsFile

        self.auto_properties.extend(["origin", "targetname", "CreditsFile"])


class EnvCubemap(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4377.
    An entity that creates a sample point for the Cubic Environment Map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", cubemapsize=0, sides="", parallaxobb: str=""):
        Entity.__init__(self, "env_cubemap", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Cubemap Size : 
        self.cubemapsize = cubemapsize
        # Brush faces : (Optional) Brushes faces to directly attach to the env_cubemap. Press Pick then click on faces in the 3D View to select them. Use CTRL while clicking to add or remove from the selection.
        self.sides = sides
        # Cubemap Bounds : MAPBASE VBSP ONLY: Optionally assigns this cubemap a bounding box for parallax correction (brush entity tied to parallax_obb). This means the cubemap reflection will move as the camera moves, similar to func_reflective_glass.
        self.parallaxobb: str = parallaxobb

        self.auto_properties.extend(["origin", "cubemapsize", "sides", "parallaxobb"])


class EnvDustpuff(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4472.
    An entity that can emit dust puffs.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", scale: float=8, speed: float=16, color: "RGB"="128 128 128"):
        Entity.__init__(self, "env_dustpuff", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Scale : Size of the dust puff.
        self.scale: float = scale
        # Speed : Speed at which the dust particles should move.
        self.speed: float = speed
        # Dust color : 
        self.color: "RGB" = color

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "scale", "speed", "color"])


class EnvEffectscript(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4496.
    An entity that allows you to script special visual effects via a script file.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/Effects/teleporttrail.mdl", scriptfile: str="scripts/effects/testeffect.txt"):
        Entity.__init__(self, "env_effectscript", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Script Model : Model to use for animation sequences.
        self.model: str = model
        # Script File : Name of the script to use for this model.
        self.scriptfile: str = scriptfile

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "scriptfile"])


class EnvEmbers(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1799.
    An entity used to create a volume in which to spawn fire embers.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", particletype=0, density: int=50, lifetime: int=4, speed: int=32, rendercolor: "RGB"="255 255 255", spawnflags=""):
        Entity.__init__(self, "env_embers", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Ember type : 
        self.particletype = particletype
        # Density (particles per second) : 
        self.density: int = density
        # Particle Lifetime (seconds) : 
        self.lifetime: int = lifetime
        # Particle Speed (units per second) : 
        self.speed: int = speed
        # Ember Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "angles", "particletype", "density", "lifetime", "speed", "rendercolor", "spawnflags"])


class EnvEntityIgniter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2091.
    An entity that catches a target entity on fire. If the entity is an animating model, it will have sprite flames attached to its skeleton. Otherwise the entity will emit particle flame puffs.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", lifetime: float=10):
        Entity.__init__(self, "env_entity_igniter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity to ignite : Name of the entity to catch on fire.
        self.target: str = target
        # Lifetime in seconds : Duration of flames.
        self.lifetime: float = lifetime

        self.auto_properties.extend(["origin", "targetname", "target", "lifetime"])


class EnvEntityMaker(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5282.
    Spawns the specified entity template at its origin. If set to auto-spawn, it will spawn the template whenever there's room and the player is looking elsewhere.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", spawnflags="", EntityTemplate: str="", PostSpawnSpeed: float="0", PostSpawnDirection: "Origin"="0 0 0", PostSpawnDirectionVariance: float="0.15", PostSpawnInheritAngles=0):
        Entity.__init__(self, "env_entity_maker", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Point_template To Spawn : Name of the point_template to spawn here.
        self.EntityTemplate: str = EntityTemplate
        # PostSpawn Movement Speed : If specified, all the entities created in the template will move this fast in the specified PostSpawn Movement Direction.
        self.PostSpawnSpeed: float = PostSpawnSpeed
        # PostSpawn Movement Direction : If a PostSpawn Movement Speed is specified, all the entities created in the template will move in this direction.
        self.PostSpawnDirection: "Origin" = PostSpawnDirection
        # PostSpawn Direction Variance : This variance is applied to the PostSpawn Movement Direction for each spawned entity in the template. Use it to apply some randomness to the directions.
        self.PostSpawnDirectionVariance: float = PostSpawnDirectionVariance
        # PostSpawn Inherit Angles : If in hierarchy, is spawn direction in world space, or object local space of parent
        self.PostSpawnInheritAngles = PostSpawnInheritAngles

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "spawnflags", "EntityTemplate", "PostSpawnSpeed", "PostSpawnDirection", "PostSpawnDirectionVariance", "PostSpawnInheritAngles"])


class EnvExplosion(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1882.
    An entity that creates an explosion at its origin.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", iMagnitude: int=100, iRadiusOverride: int=0, fireballsprite: str="sprites/zerogxplode.spr", rendermode=5, spawnflags="", ignoredEntity: str=""):
        Entity.__init__(self, "env_explosion", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Magnitude : The amount of damage done by the explosion.
        self.iMagnitude: int = iMagnitude
        # Radius Override : If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude.
        self.iRadiusOverride: int = iRadiusOverride
        # Fireball Sprite : 
        self.fireballsprite: str = fireballsprite
        # Render Mode : 
        self.rendermode = rendermode
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Ignored Entity : Do not harm or affect the named entity.
        self.ignoredEntity: str = ignoredEntity

        self.auto_properties.extend(["origin", "targetname", "parentname", "iMagnitude", "iRadiusOverride", "fireballsprite", "rendermode", "spawnflags", "ignoredEntity"])


class EnvFade(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1403.
    An entity that controls screen fades.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", duration: str="2", holdtime: str="0", renderamt: int=255, rendercolor: "RGB"="0 0 0"):
        Entity.__init__(self, "env_fade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Duration (seconds) : The time that it will take to fade the screen in or out.
        self.duration: str = duration
        # Hold Fade (seconds) : The time to hold the faded in/out state.
        self.holdtime: str = holdtime
        # Fade Alpha : Alpha of the fade, where 0 = fully transparent and 255 = fully opaque.
        self.renderamt: int = renderamt
        # Fade Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "duration", "holdtime", "renderamt", "rendercolor"])


class EnvFire(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2019.
    An entity that handles a single flame at its origin. The flame causes heat 'damage' to other env_fire entities around it, and will eventually ignite non-flaming env_fire entities nearby, causing the fire to spread.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=0, health: int=30, firesize: int=64, fireattack: int=4, firetype=0, spawnflags="", ignitionpoint: float=32, damagescale: float="1.0"):
        Entity.__init__(self, "env_fire", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Duration : Amount of time the fire will burn.
        self.health: int = health
        # Size : Height (in world units) of the flame.
        self.firesize: int = firesize
        # Attack : Amount of time the fire takes to grow to full strength.
        self.fireattack: int = fireattack
        # Type : 
        self.firetype = firetype
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Ignition Point : Amount of heat 'damage' to take before this flame should ignite.
        self.ignitionpoint: float = ignitionpoint
        # Damage Scale : Multiplier of the burn damage done by the flame.
        self.damagescale: float = damagescale

        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "health", "firesize", "fireattack", "firetype", "spawnflags", "ignitionpoint", "damagescale"])


class EnvFiresensor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2071.
    An entity that detects changes in heat nearby.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", fireradius: float=128, heatlevel: float=32, heattime: float=0):
        Entity.__init__(self, "env_firesensor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Radius : The radius around this entity in which to detect heat changes.
        self.fireradius: float = fireradius
        # Heat level : The target heat level to check for. Outputs are fired when the heat moves over this target level (increasing or decreasing).
        self.heatlevel: float = heatlevel
        # Time at level : The amount of time the heat level must spend over the target level before the 'OnHeatLevelStart' output is fired.
        self.heattime: float = heattime

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags", "fireradius", "heatlevel", "heattime"])


class EnvFiresource(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2055.
    An entity that provides heat to all nearby env_fire entities. Cannot be extinguished.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", fireradius: float=128, firedamage: float=10):
        Entity.__init__(self, "env_firesource", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Radius : The radius around this entity in which to provide heat.
        self.fireradius: float = fireradius
        # Intensity / Damage : Amount of heat 'damage' to apply to env_fire entities within the radius.
        self.firedamage: float = firedamage

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags", "fireradius", "firedamage"])


class EnvFogController(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2101.
    An entity that controls the fog and view distance in the map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", mindxlevel=0, maxdxlevel=0, angles: "Origin"="0 0 0", fogenable=1, fogblend=0, use_angles=0, fogcolor: "RGB"="255 255 255", fogcolor2: "RGB"="255 255 255", fogdir: str="1 0 0", fogstart: str="500.0", fogend: str="2000.0", fogmaxdensity: float="1", foglerptime: float="0", farz: str="-1", spawnflags=""):
        Entity.__init__(self, "env_fog_controller", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Fog Enable : Determines whether this controller should be enabled by default.
        self.fogenable = fogenable
        # Fog Blend : 
        self.fogblend = fogblend
        # Use Angles for Fog Dir : 
        self.use_angles = use_angles
        # Primary Fog Color : 
        self.fogcolor: "RGB" = fogcolor
        # Secondary Fog Color : 
        self.fogcolor2: "RGB" = fogcolor2
        # Primary Fog Direction : 
        self.fogdir: str = fogdir
        # Fog Start : 
        self.fogstart: str = fogstart
        # Fog End : 
        self.fogend: str = fogend
        # Fog Max Density [0..1] : 
        self.fogmaxdensity: float = fogmaxdensity
        # Interpolate time : 
        self.foglerptime: float = foglerptime
        # Far Z Clip Plane : 
        self.farz: str = farz
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "mindxlevel", "maxdxlevel", "angles", "fogenable", "fogblend", "use_angles", "fogcolor", "fogcolor2", "fogdir", "fogstart", "fogend", "fogmaxdensity", "foglerptime", "farz", "spawnflags"])


class EnvFunnel(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1821.
    The suck-in effect from the HL1 Resonance Cascade sequence.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags=""):
        Entity.__init__(self, "env_funnel", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags"])


class EnvGlobalLight(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8904.
    An orthographic projected texture that follows the player. Sorry, I don't have the original FGD documentation here.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", StartDisabled=0, distance: float="10000", fov: float="5.0", nearz: float="512", northoffset: float="200", eastoffset: float="0", forwardoffset: float="0", orthosize: float="1000.0", enableshadows=1, lightcolor: "RGB"="255 255 255 200", colortransitiontime: float="0", brightnessscale: float="1.0", texturename: str="effects/flashlight001", textureframe: int=0):
        Entity.__init__(self, "env_global_light", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Distance : Height above the player where the projection originates from.
        self.distance: float = distance
        # FOV : This is the field of view that the sunlight casts in. Use lower values to simulate a more distant sun and sharper shadows.
        self.fov: float = fov
        # NearZ : Distance from the player where the near Z plane is. Anything closer to the projection origin
        self.nearz: float = nearz
        # North Offset : This offsets the from the player position where the sun is attached. (???)
        self.northoffset: float = northoffset
        # X Offset : X/East offset the from the player position.
        self.eastoffset: float = eastoffset
        # Y Offset : Y/Forward offset the from the player position.
        self.forwardoffset: float = forwardoffset
        # Ortho Size : The env_global_light's 'size', or how much ground it covers.
        self.orthosize: float = orthosize
        # Enable Shadows : Enables shadows. If shadows are disabled, light may appear to go through objects. Disabling shadows may be ideal for lower-detail environments due to being less expensive.
        self.enableshadows = enableshadows
        # Light Color : RGBA color of the sunlight. Intensity can only range from 0 to 255, so use the Brightness Scale keyvalue to make the sunlight brighter than 255.
        self.lightcolor: "RGB" = lightcolor
        # Color Transition Time : Amount of time it takes for a color or brightness change to occur. 0 = instant
        self.colortransitiontime: float = colortransitiontime
        # Brightness Scale : The light color's brightness scale.
        self.brightnessscale: float = brightnessscale
        # Texture Name : 
        self.texturename: str = texturename
        # Texture Frame : Sets the frame of the env_global_light. Only relevant if the texture is animated/has multiple frames.
        self.textureframe: int = textureframe

        self.auto_properties.extend(["origin", "targetname", "angles", "StartDisabled", "distance", "fov", "nearz", "northoffset", "eastoffset", "forwardoffset", "orthosize", "enableshadows", "lightcolor", "colortransitiontime", "brightnessscale", "texturename", "textureframe"])


class EnvHudhint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2258.
    An entity to control the display of HUD hints. HUD hints are used to show the player what key is bound to a particular command.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", message: str=""):
        Entity.__init__(self, "env_hudhint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Hint Text (localized) : This should be set to match the desired HUD hint entry in the hl2\resource\valve_english.txt.
        self.message: str = message

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "message"])


class EnvLaser(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2194.
    An entity that creates a laser beam between itself and a given target.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", renderfx=0, LaserTarget: str="", renderamt: int=100, rendercolor: "RGB"="255 255 255", width: float=2, NoiseAmplitude: int=0, texture: str="sprites/laserbeam.spr", EndSprite: str="", TextureScroll: int=35, framestart: int=0, damage: str="100", dissolvetype="None", spawnflags=""):
        Entity.__init__(self, "env_laser", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Target of Laser : Name of entity, or entities, to strike at. The target is randomly chosen if there are multiple entities matching the given name.
        self.LaserTarget: str = LaserTarget
        # Brightness (1 - 255) : 
        self.renderamt: int = renderamt
        # Beam Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Width of Beam : The width of the laser beam, in pixels.
        self.width: float = width
        # Amount of noise (0-255) : The amount of noise in the beam. 0 is a perfectly straight beam.
        self.NoiseAmplitude: int = NoiseAmplitude
        # Sprite Name : The material used to draw the laser beam.
        self.texture: str = texture
        # End Sprite : If specified, this sprite will be drawn at the end of the laser beam.
        self.EndSprite: str = EndSprite
        # Texture Scroll Rate (0-100) : Rate at which the beam texture should scroll along the beam.
        self.TextureScroll: int = TextureScroll
        # Starting Frame : The frame to start the beam texture on.
        self.framestart: int = framestart
        # Damage / second : How much damage this laser does. per second. to things it hits.
        self.damage: str = damage
        # Dissolve Type : 
        self.dissolvetype = dissolvetype
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "renderfx", "LaserTarget", "renderamt", "rendercolor", "width", "NoiseAmplitude", "texture", "EndSprite", "TextureScroll", "framestart", "damage", "dissolvetype", "spawnflags"])


class EnvLightglow(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1344.
    An entity that puts an additive glow in the world, mostly used over light sources.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", targetname: str="", angles: "Origin"="0 0 0", StartDisabled=0, rendercolor: "RGB"="255 255 255", VerticalGlowSize: int=30, HorizontalGlowSize: int=30, MinDist: int=500, MaxDist: int=2000, OuterMaxDist: int=0, GlowProxySize: float="2.0", HDRColorScale: float="1.0", spawnflags=""):
        Entity.__init__(self, "env_lightglow", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Vertical Size : 
        self.VerticalGlowSize: int = VerticalGlowSize
        # Horizontal Size : 
        self.HorizontalGlowSize: int = HorizontalGlowSize
        # Minimum Distance : The distance at which this effect will be fully translucent.
        self.MinDist: int = MinDist
        # Maximum Distance : The distance at which this effect will be at full intensity.
        self.MaxDist: int = MaxDist
        # Outer Maximum Distance : If larger than the maximum distance, this is the length at which the glow will fade completely out, between the span of the maximum distance and this length.
        self.OuterMaxDist: int = OuterMaxDist
        # Glow Proxy Geometry Size : Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space. So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered.
        self.GlowProxySize: float = GlowProxySize
        # HDR color scale. : float value to multiply sprite color by when running in HDR mode.
        self.HDRColorScale: float = HDRColorScale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "parentname", "targetname", "angles", "StartDisabled", "rendercolor", "VerticalGlowSize", "HorizontalGlowSize", "MinDist", "MaxDist", "OuterMaxDist", "GlowProxySize", "HDRColorScale", "spawnflags"])


class EnvMessage(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2232.
    An entity that draws a text message on player's HUDs.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", message: str="", spawnflags="", messagesound: str="", messagevolume: str="10", messageattenuation=0):
        Entity.__init__(self, "env_message", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Message Text : 
        self.message: str = message
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sound Effect : When the message is shown, this sound effect will be played, originating from this entity.
        self.messagesound: str = messagesound
        # Volume 0-10 : Volume of the sound effect.
        self.messagevolume: str = messagevolume
        # Sound Radius : 
        self.messageattenuation = messageattenuation

        self.auto_properties.extend(["origin", "targetname", "message", "spawnflags", "messagesound", "messagevolume", "messageattenuation"])


class EnvMicrophone(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4995.
    An entity that acts as a microphone. It works in one of two modes. If it has a 'Speaker' set, it picks up all sounds within the specified sound range, and rebroadcasts them through the Speaker entity. In this Speaker mode, it ignores the Hears X spawnflags and does not fire the SoundLevel output. If it has no Speaker set, it measures the sound level at a point, and outputs the sound level as a value between 0 and 1. In Measuring mode, it only hears sounds that match the Hear X spawnflags.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=0, target: str="", SpeakerName: str="", ListenFilter: str="", speaker_dsp_preset=0, spawnflags="", Sensitivity: float=1, SmoothFactor: float=0, MaxRange: float=240, landmark: str=""):
        Entity.__init__(self, "env_microphone", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Measure target : If the speaker is in Measuring mode, this is the name of the entity where the sound level is to be measured.
        self.target: str = target
        # Speaker target : The name of an info_target entity through which to play any sounds heard by this microphone. If specified, the microphone will consider itself in Speaker mode.
        self.SpeakerName: str = SpeakerName
        # Listen Filter : The name of an filter entity which specifies the only entities the microphone can hear. Sounds emitted by other entities will not be heard.
        self.ListenFilter: str = ListenFilter
        # Speaker DSP Preset : Only useful in Speaker mode. If specified, when the microphone is enabled, it'll set the global dsp_speaker preset to this value. Sounds played back through speakers will then be affected by the selected DSP.
        self.speaker_dsp_preset = speaker_dsp_preset
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sensitivity (0 - 10) : Microphone sensitivity, 0=deaf, 1=default, 10=extremely sensitive). Only applicable in Measuring mode.
        self.Sensitivity: float = Sensitivity
        # Smoothing (0 - 1) : Smoothing factor, 0=no smoothing, 1=maximum smoothing). Only applicable in Measuring mode.
        self.SmoothFactor: float = SmoothFactor
        # Maximum hearing range (0=infinite) : Sounds beyond this range won't be heard, irrelevant of attenuation. 
        self.MaxRange: float = MaxRange
        # Local Destination Landmark : If specified, then sounds offset from the speaker by their initial offset from this landmark. Only applicable in Speaker mode.
        self.landmark: str = landmark

        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "target", "SpeakerName", "ListenFilter", "speaker_dsp_preset", "spawnflags", "Sensitivity", "SmoothFactor", "MaxRange", "landmark"])


class EnvParticlePerformanceMonitor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8958.
    An entity for turning on and off measuring and display of particle throughput.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "env_particle_performance_monitor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class EnvParticlelight(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1268.
    An entity that can be used to light the smoke particles emitted by env_smokestack entities. Does not light any other particle types.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", Color: "RGB"="255 0 0", Intensity: int=5000, directional=0, PSName: str=""):
        Entity.__init__(self, "env_particlelight", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Color : Color emitted by this light.
        self.Color: "RGB" = Color
        # Intensity : 
        self.Intensity: int = Intensity
        # Directional : If this is specified, then this light will use the bump map on the particles. Each particle system can have one ambient and one directional light.
        self.directional = directional
        # Particle System Entity : Set this to the name of the env_smokestack that you want this light to affect.
        self.PSName: str = PSName

        self.auto_properties.extend(["origin", "parentname", "Color", "Intensity", "directional", "PSName"])


class EnvParticlescript(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4484.
    An entity that has special animation events that can be fired by a model with an animation inside its .qc designed foruse by this entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/Ambient_citadel_paths.mdl"):
        Entity.__init__(self, "env_particlescript", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Script Model : Model to use for animation sequences.
        self.model: str = model

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model"])


class EnvPhysexplosion(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1942.
    An entity that creates an explosion at its origin. If the no-damage spawnflag is set, the explosion won't be visible, but will apply force to any physics objects within its radius.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", magnitude: str="100", radius: str="0", targetentityname: str="", spawnflags="", inner_radius: float="0"):
        Entity.__init__(self, "env_physexplosion", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Magnitude : Amount of physics force applied by the explosion.
        self.magnitude: str = magnitude
        # Clamp Radius (0 = auto) : If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude.
        self.radius: str = radius
        # Limit to Entity : If specified, the explosion will only affect the matching entity.
        self.targetentityname: str = targetentityname
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Inner radius : If not zero, the LOS is calculated from a point intersecting this sphere.
        self.inner_radius: float = inner_radius

        self.auto_properties.extend(["origin", "targetname", "parentname", "magnitude", "radius", "targetentityname", "spawnflags", "inner_radius"])


class EnvPhysimpact(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1968.
    An entity that will cause a physics impact on another entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", magnitude: int=100, distance: int=0, directionentityname: str="", spawnflags=""):
        Entity.__init__(self, "env_physimpact", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Magnitude : Strength of the impact.
        self.magnitude: int = magnitude
        # Distance : How far to project the impact (if 0 uses a default value).
        self.distance: int = distance
        # Point to Entity : If set, 'Distance' and Angle settings are ignored and the direction and distance to the target entity will be used.
        self.directionentityname: str = directionentityname
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "magnitude", "distance", "directionentityname", "spawnflags"])


class EnvPlayerSurfaceTrigger(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1426.
    An entity that monitors the material of the surface the player is standing on, and fires outputs whenever it changes to/from a specific material.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", gamematerial="0"):
        Entity.__init__(self, "env_player_surface_trigger", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Game Material to Watch : The material to watch. When the player stands on/off this material, this entity's outputs will be fired.
        self.gamematerial = gamematerial

        self.auto_properties.extend(["origin", "targetname", "gamematerial"])


class EnvProjectedtexture(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8808.
    Projected texture entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", spawnflags="", target: str="", dontfollowtarget=0, lightfov: float="90.0", lighthorfov: float="0", nearz: float="4.0", farz: float="750.0", enableshadows=1, shadowquality=1, shadowatten: float="0.0", lightonlytarget=0, lightworld=1, brightnessscale: float="1.0", lightcolor: "RGB"="255 255 255 200", colortransitiontime: float="0", constant_attn: str="0", linear_attn: str="1", quadratic_attn: str="0", cameraspace=0, texturename: str="effects/flashlight001", textureframe: int=0, alwaysdraw=0, ProjectedTextureVersion: int=""):
        Entity.__init__(self, "env_projectedtexture", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Target : The entity will rotate to point at this target. Make sure you check the 'Always Update' flag if you set this.
        self.target: str = target
        # Don't Follow Target : Prevents this entity from trying to point at its target, if it has one. Intended for when you want to use 'Light Only Target' without the entity trying to point to it.
        self.dontfollowtarget = dontfollowtarget
        # FOV : The field of view cone/pyramid at which the texture is projected. Can also be interpreted as 'size'.
        self.lightfov: float = lightfov
        # Horizontal FOV : The horizontal FOV value. This allows the projected texture to use rectangular dimensions, but it causes shadow glitches and is usually not preferable unless shadows are disabled. Leave this at 0 if you want to keep this the same as the regular FOV value.
        self.lighthorfov: float = lighthorfov
        # NearZ : Objects closer than this will not receive the light from the projection. (Warning: Hard falloff, model lighting inconsistent)
        self.nearz: float = nearz
        # FarZ : Objects beyond this distance will not receive the light from the projection. The projection fades out as it approaches this distance.
        self.farz: float = farz
        # Enable Shadows : Enables/disables shadows from this projected texture.
        self.enableshadows = enableshadows
        # Shadow Quality : Quality of shadows.
        self.shadowquality = shadowquality
        # Shadow Atten : The attenuation of the shadows, or how much the shadows should fade into the light of the projected texture, if at all. The player's flashlight uses 0.35 by default, although higher values may be needed for a visible effect.
        self.shadowatten: float = shadowatten
        # Light Only Target : Limit flashlight effect to only effect target entity.
        self.lightonlytarget = lightonlytarget
        # Light World : Control whether flashlight effects static world geometry.
        self.lightworld = lightworld
        # Brightness Scale : The light color's brightness scale.
        self.brightnessscale: float = brightnessscale
        # Light Color : The color of the projected texture. Format is RGB-Intensity, like a light entity. Intensity can only range from 0 to 255, so use the Brightness Scale keyvalue to make the projected texture brighter than 255.
        self.lightcolor: "RGB" = lightcolor
        # Color Transition Time : Amount of time it takes for a color or brightness change to occur. 0 = instant
        self.colortransitiontime: float = colortransitiontime
        # Constant : The light's constant attenuation, giving the light no falloff. (This value is internally corrected with x*0.5)
        self.constant_attn: str = constant_attn
        # Linear : The light's linear attenuation, giving the light linear decline. This is the most common attenuation for projected textures. (This value is internally corrected with x*100)
        self.linear_attn: str = linear_attn
        # Quadratic : The light's quadratic attenuation, giving the light exponentially decreasing falloff. (This value is internally corrected with x*10000)
        self.quadratic_attn: str = quadratic_attn
        # Camera Space : Angles are interpreted as being relative to camera.
        self.cameraspace = cameraspace
        # Texture Name : 
        self.texturename: str = texturename
        # Texture Frame : Sets the frame of the projected texture. Only relevant if the texture is animated/has multiple frames.
        self.textureframe: int = textureframe
        # Always Draw : Always draws the projected texture, regardless of whether the player can see its frustum. Use this for projected textures that can be seen on monitors or in the skybox.
        self.alwaysdraw = alwaysdraw
        # TODO: Replace this filler. : 
        self.ProjectedTextureVersion: int = ProjectedTextureVersion

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "spawnflags", "target", "dontfollowtarget", "lightfov", "lighthorfov", "nearz", "farz", "enableshadows", "shadowquality", "shadowatten", "lightonlytarget", "lightworld", "brightnessscale", "lightcolor", "colortransitiontime", "constant_attn", "linear_attn", "quadratic_attn", "cameraspace", "texturename", "textureframe", "alwaysdraw", "ProjectedTextureVersion"])


class EnvRotorshooter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2366.
    An entity that creates gibs when it's within the influence of a helicopter's rotor wash.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: str="0 0 0", m_iGibs: int=3, delay: str="0", gibangles: str="0 0 0", gibanglevelocity: str="0", m_flVelocity: int=200, m_flVariance: str="0.15", m_flGibLife: str="4", lightingorigin: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, shootmodel: str="", shootsounds=-1, simulation=0, skin: int=0, spawnflags="", rotortime: float="1", rotortimevariance: float="0.3"):
        Entity.__init__(self, "env_rotorshooter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Gib Direction (Pitch Yaw Roll) : The direction the gibs will fly.
        self.angles: str = angles
        # Number of Gibs : Total number of gibs to shoot each time it's activated.
        self.m_iGibs: int = m_iGibs
        # Delay between shots : Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once.
        self.delay: str = delay
        # Gib Angles (Pitch Yaw Roll) : The orientation of the spawned gibs.
        self.gibangles: str = gibangles
        # Max angular velocity : How fast (degrees/sec) the gib pieces should spin. They will spin on x and y axis at between 10% and 100% of this speed.
        self.gibanglevelocity: str = gibanglevelocity
        # Gib Velocity : Speed of the fired gibs
        self.m_flVelocity: int = m_flVelocity
        # Course Variance : How much variance in the direction gibs are fired.
        self.m_flVariance: str = m_flVariance
        # Gib Life : Time in seconds for gibs to live +/- 5%
        self.m_flGibLife: str = m_flGibLife
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins.
        self.lightingorigin: str = lightingorigin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Model : Thing to shoot out.  Can be a .mdl or a .vmt.
        self.shootmodel: str = shootmodel
        # Material Sound : 
        self.shootsounds = shootsounds
        # Simulate : 
        self.simulation = simulation
        # Gib Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter.
        self.skin: int = skin
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Time Under Rotor : The average time it has to be under the rotor before it shoots a gib.
        self.rotortime: float = rotortime
        # Time variance : The random amount to vary the time it has to be under the rotor before it shoots a gib.
        self.rotortimevariance: float = rotortimevariance

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "m_iGibs", "delay", "gibangles", "gibanglevelocity", "m_flVelocity", "m_flVariance", "m_flGibLife", "lightingorigin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "shootmodel", "shootsounds", "simulation", "skin", "spawnflags", "rotortime", "rotortimevariance"])


class EnvRotorwashEmitter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2316.
    Creates rotorwash.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", altitude: float="1024"):
        Entity.__init__(self, "env_rotorwash_emitter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Altitude : Altitude the rotorwash will show up.
        self.altitude: float = altitude

        self.auto_properties.extend(["origin", "targetname", "parentname", "altitude"])


class EnvScreeneffect(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1228.
    Allows screenspace effects to be played on the player's view.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", type=0):
        Entity.__init__(self, "env_screeneffect", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Effect Type : Which effect to use.
        self.type = type

        self.auto_properties.extend(["origin", "targetname", "type"])


class EnvScreenoverlay(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1198.
    An entity that can display and control a set of screen overlays, to be displayed over the player's view. Useful for view effects like drunkenness, or teleporter afterimages, etc.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", OverlayName1: str="", OverlayTime1: float="1.0", OverlayName2: str="", OverlayTime2: float="1.0", OverlayName3: str="", OverlayTime3: float="1.0", OverlayName4: str="", OverlayTime4: float="1.0", OverlayName5: str="", OverlayTime5: float="1.0", OverlayName6: str="", OverlayTime6: float="1.0", OverlayName7: str="", OverlayTime7: float="1.0", OverlayName8: str="", OverlayTime8: float="1.0", OverlayName9: str="", OverlayTime9: float="1.0", OverlayName10: str="", OverlayTime10: float="1.0"):
        Entity.__init__(self, "env_screenoverlay", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Overlay Name 1 : Name of the first overlay material to display.
        self.OverlayName1: str = OverlayName1
        # Overlay Duration 1 : Amount of time that the first overlay should be displayed for, after which it will begin showing the second overlay.
        self.OverlayTime1: float = OverlayTime1
        # Overlay Name 2 : Name of the second overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName2: str = OverlayName2
        # Overlay Duration 2 : Amount of time that the second overlay should be displayed for, after which it will begin showing the third overlay.
        self.OverlayTime2: float = OverlayTime2
        # Overlay Name 3 : Name of the third overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName3: str = OverlayName3
        # Overlay Duration 3 : Amount of time that the third overlay should be displayed for, after which it will begin showing the fourth overlay.
        self.OverlayTime3: float = OverlayTime3
        # Overlay Name 4 : Name of the fourth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName4: str = OverlayName4
        # Overlay Duration 4 : Amount of time that the fourth overlay should be displayed for, after which it will begin showing the fifth overlay.
        self.OverlayTime4: float = OverlayTime4
        # Overlay Name 5 : Name of the fifth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName5: str = OverlayName5
        # Overlay Duration 5 : Amount of time that the fifth overlay should be displayed for, after which it will begin showing the sixth overlay.
        self.OverlayTime5: float = OverlayTime5
        # Overlay Name 6 : Name of the sixth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName6: str = OverlayName6
        # Overlay Duration 6 : Amount of time that the sixth overlay should be displayed for, after which it will begin showing the seventh overlay.
        self.OverlayTime6: float = OverlayTime6
        # Overlay Name 7 : Name of the seventh overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName7: str = OverlayName7
        # Overlay Duration 7 : Amount of time that the seventh overlay should be displayed for, after which it will begin showing the eighth overlay.
        self.OverlayTime7: float = OverlayTime7
        # Overlay Name 8 : Name of the eighth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName8: str = OverlayName8
        # Overlay Duration 8 : Amount of time that the eighth overlay should be displayed for, after which it will begin showing the ninth overlay.
        self.OverlayTime8: float = OverlayTime8
        # Overlay Name 9 : Name of the ninth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName9: str = OverlayName9
        # Overlay Duration 9 : Amount of time that the ninth overlay should be displayed for, after which it will begin showing the tenth overlay.
        self.OverlayTime9: float = OverlayTime9
        # Overlay Name 10 : Name of the tenth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.
        self.OverlayName10: str = OverlayName10
        # Overlay Duration 10 : Amount of time that the tenth overlay should be displayed for, after which this entity will stop displaying overlays.
        self.OverlayTime10: float = OverlayTime10

        self.auto_properties.extend(["origin", "targetname", "OverlayName1", "OverlayTime1", "OverlayName2", "OverlayTime2", "OverlayName3", "OverlayTime3", "OverlayName4", "OverlayTime4", "OverlayName5", "OverlayTime5", "OverlayName6", "OverlayTime6", "OverlayName7", "OverlayTime7", "OverlayName8", "OverlayTime8", "OverlayName9", "OverlayTime9", "OverlayName10", "OverlayTime10"])


class EnvShake(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2274.
    An entity to control screen shake on players.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", amplitude: float="4", radius: float="500", duration: float="1", frequency: float="2.5"):
        Entity.__init__(self, "env_shake", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Amplitude (0-16) : The amount of noise in the screen shake. Should be a range between 0 and 16.
        self.amplitude: float = amplitude
        # Effect Radius : The radius around this entity in which to affect players.
        self.radius: float = radius
        # Duration (seconds) : The length of time in which to shake the player's screens.
        self.duration: float = duration
        # Frequency : The frequency used to apply the screen shake. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble.
        self.frequency: float = frequency

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags", "amplitude", "radius", "duration", "frequency"])


class EnvShooter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2327.
    An entity that shoots models, or sprites, out of its origin.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: str="0 0 0", m_iGibs: int=3, delay: str="0", gibangles: str="0 0 0", gibanglevelocity: str="0", m_flVelocity: int=200, m_flVariance: str="0.15", m_flGibLife: str="4", lightingorigin: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, shootmodel: str="", shootsounds=-1, simulation=0, skin: int=0, spawnflags="", nogibshadows=0, gibgravityscale: float="1", massoverride: float="0"):
        Entity.__init__(self, "env_shooter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Gib Direction (Pitch Yaw Roll) : The direction the gibs will fly.
        self.angles: str = angles
        # Number of Gibs : Total number of gibs to shoot each time it's activated.
        self.m_iGibs: int = m_iGibs
        # Delay between shots : Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once.
        self.delay: str = delay
        # Gib Angles (Pitch Yaw Roll) : The orientation of the spawned gibs.
        self.gibangles: str = gibangles
        # Max angular velocity : How fast (degrees/sec) the gib pieces should spin. They will spin on x and y axis at between 10% and 100% of this speed.
        self.gibanglevelocity: str = gibanglevelocity
        # Gib Velocity : Speed of the fired gibs
        self.m_flVelocity: int = m_flVelocity
        # Course Variance : How much variance in the direction gibs are fired.
        self.m_flVariance: str = m_flVariance
        # Gib Life : Time in seconds for gibs to live +/- 5%
        self.m_flGibLife: str = m_flGibLife
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins.
        self.lightingorigin: str = lightingorigin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Model : Thing to shoot out. Can be a .mdl or a .vmt.
        self.shootmodel: str = shootmodel
        # Material Sound : 
        self.shootsounds = shootsounds
        # Simulate : 
        self.simulation = simulation
        # Gib Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter.
        self.skin: int = skin
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Disable Shadows on Gibs : 
        self.nogibshadows = nogibshadows
        # Gib gravity scale : ONLY WORKS FOR POINT GIBS. This field allows you to scale gravity so that gibs fall faster, slower, or not at all.
        self.gibgravityscale: float = gibgravityscale
        # Mass override : EPISODIC ONLY. Specify an arbitrary mass for the gibs emitted by me.
        self.massoverride: float = massoverride

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "m_iGibs", "delay", "gibangles", "gibanglevelocity", "m_flVelocity", "m_flVariance", "m_flGibLife", "lightingorigin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "shootmodel", "shootsounds", "simulation", "skin", "spawnflags", "nogibshadows", "gibgravityscale", "massoverride"])


class EnvSmokestack(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1365.
    An entity that spits out a constant stream of smoke. See particlezoo.vmf for sample usage. You can place up to two env_particlelight entities near the smoke stack to add ambient light to its particles.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", InitialState=0, BaseSpread: int=20, SpreadSpeed: int=15, Speed: int=30, StartSize: int=20, EndSize: int=30, Rate: int=20, JetLength: int=180, WindAngle: int=0, WindSpeed: int=0, SmokeMaterial: str="particle/SmokeStack.vmt", twist: int=0, roll: float=0, rendercolor: "RGB"="255 255 255", renderamt: int=255):
        Entity.__init__(self, "env_smokestack", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Initial State : 
        self.InitialState = InitialState
        # Spread at the base : Amount of random spread in the origins of the smoke particles when they're spawned.
        self.BaseSpread: int = BaseSpread
        # Spread Speed : Amount of random spread in the velocity of the smoke particles after they're spawned.
        self.SpreadSpeed: int = SpreadSpeed
        # Speed : The speed at which the smoke particles move after they're spawned.
        self.Speed: int = Speed
        # Particle start size : Size of the smoke particles when they're first emitted.
        self.StartSize: int = StartSize
        # Particle end size : Size of the smoke particles at the point they fade out completely.
        self.EndSize: int = EndSize
        # Emission rate : Rate at which to emit smoke particles (i.e. particles to emit per second).
        self.Rate: int = Rate
        # Length of smoke trail : Length of the smokestack. Lifetime of the smoke particles is derived from this & particle speed.
        self.JetLength: int = JetLength
        # Wind X/Y Angle : This specifies the wind direction. It is an angle in the XY plane. WindSpeed specifies the strength of the wind.
        self.WindAngle: int = WindAngle
        # Wind Speed : The strength of the wind.
        self.WindSpeed: int = WindSpeed
        # Particle material : Material of the smoke particles emitted by this stack.
        self.SmokeMaterial: str = SmokeMaterial
        # Twist : The amount, in degrees per second, that the smoke particles twist around the origin.
        self.twist: int = twist
        # Roll Speed : Amount of roll in degrees per second.
        self.roll: float = roll
        # Base Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Translucency : 
        self.renderamt: int = renderamt

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "InitialState", "BaseSpread", "SpreadSpeed", "Speed", "StartSize", "EndSize", "Rate", "JetLength", "WindAngle", "WindSpeed", "SmokeMaterial", "twist", "roll", "rendercolor", "renderamt"])


class EnvSmoketrail(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1921.
    An entity that creates a smoke trail.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", opacity: float="0.75", spawnrate: float="20", lifetime: float="5.0", startcolor: "RGB"="192 192 192", endcolor: "RGB"="160 160 160", emittime: float="0", minspeed: float="10", maxspeed: float="20", mindirectedspeed: float="0", maxdirectedspeed: float="0", startsize: float="15", endsize: float="50", spawnradius: float="15", firesprite: str="sprites/firetrail.spr", smokesprite: str="sprites/whitepuff.spr"):
        Entity.__init__(self, "env_smoketrail", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Sprite Opacity : Opacity of the sprites (range from 0 - 1).
        self.opacity: float = opacity
        # Spawn Rate : Number of particles to emit each second.
        self.spawnrate: float = spawnrate
        # Particle Life Time : Number of seconds until each particle dies.
        self.lifetime: float = lifetime
        # Start Color : Starting color of the emitted particles.
        self.startcolor: "RGB" = startcolor
        # End Color : Ending color of the emitted particles.
        self.endcolor: "RGB" = endcolor
        # Emitter Life Time : Number of seconds until the env_smoketrail stops emitting particles. 0 means never stop emitting particles.
        self.emittime: float = emittime
        # Minimum Random Speed : Minimum randomly-directed speed to use for emitted particles.
        self.minspeed: float = minspeed
        # Maximum Random Speed : Maximum randomly-directed speed to use for emitted particles.
        self.maxspeed: float = maxspeed
        # Minimum Directed Speed : Minimum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles.
        self.mindirectedspeed: float = mindirectedspeed
        # Maximum Directed Speed : Maximum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles.
        self.maxdirectedspeed: float = maxdirectedspeed
        # Starting particle size : Starting particle size.
        self.startsize: float = startsize
        # Ending particle size : Ending particle size.
        self.endsize: float = endsize
        # Spawn radius : Distance from env_smoketrail at which particles are emitted.
        self.spawnradius: float = spawnradius
        # Fire Sprite : 
        self.firesprite: str = firesprite
        # Smoke Puff : 
        self.smokesprite: str = smokesprite

        self.auto_properties.extend(["origin", "targetname", "parentname", "opacity", "spawnrate", "lifetime", "startcolor", "endcolor", "emittime", "minspeed", "maxspeed", "mindirectedspeed", "maxdirectedspeed", "startsize", "endsize", "spawnradius", "firesprite", "smokesprite"])


class EnvSoundscape(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2449.
    An entity to control sound in an area. The active soundscape at any time is the last one that had line-of-sight to the player, and was within the radius.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=0, radius: int=128, soundscape="Nothing", position0: str="", position1: str="", position2: str="", position3: str="", position4: str="", position5: str="", position6: str="", position7: str=""):
        Entity.__init__(self, "env_soundscape", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Radius : If set to -1, then the player can hear the soundscape as long as he can see it (regardless of distance to it).
        self.radius: int = radius
        # Soundscape : The name of the soundscape to use. Corresponds to an entry in the soundscapes*.txt file in the hl2\scripts directory.
        self.soundscape = soundscape
        # Sound Position 0 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position0: str = position0
        # Sound Position 1 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position1: str = position1
        # Sound Position 2 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position2: str = position2
        # Sound Position 3 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position3: str = position3
        # Sound Position 4 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position4: str = position4
        # Sound Position 5 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position5: str = position5
        # Sound Position 6 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position6: str = position6
        # Sound Position 7 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position7: str = position7

        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "radius", "soundscape", "position0", "position1", "position2", "position3", "position4", "position5", "position6", "position7"])


class EnvSoundscapeProxy(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2441.
    An entity that acts like a soundscape but gets all of its sound parameters from another env_soundscape entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", MainSoundscapeName: str="", radius: int=128):
        Entity.__init__(self, "env_soundscape_proxy", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Soundscape Entity : The soundscape to get all sound parameters from.
        self.MainSoundscapeName: str = MainSoundscapeName
        # Radius : 
        self.radius: int = radius

        self.auto_properties.extend(["origin", "targetname", "parentname", "MainSoundscapeName", "radius"])


class EnvSoundscapeTriggerable(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2479.
    An entity that works like env_soundscape except that it works in conjunction with trigger_soundscape to determine when a player hears it.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=0, radius: int=128, soundscape="Nothing", position0: str="", position1: str="", position2: str="", position3: str="", position4: str="", position5: str="", position6: str="", position7: str=""):
        Entity.__init__(self, "env_soundscape_triggerable", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Radius : If set to -1, then the player can hear the soundscape as long as he can see it (regardless of distance to it).
        self.radius: int = radius
        # Soundscape : The name of the soundscape to use. Corresponds to an entry in the soundscapes*.txt file in the hl2\scripts directory.
        self.soundscape = soundscape
        # Sound Position 0 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position0: str = position0
        # Sound Position 1 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position1: str = position1
        # Sound Position 2 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position2: str = position2
        # Sound Position 3 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position3: str = position3
        # Sound Position 4 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position4: str = position4
        # Sound Position 5 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position5: str = position5
        # Sound Position 6 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position6: str = position6
        # Sound Position 7 : A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.
        self.position7: str = position7


        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "radius", "soundscape", "position0", "position1", "position2", "position3", "position4", "position5", "position6", "position7"])


class EnvSpark(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2484.
    An entity used to create sparks at its origin.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", MaxDelay: str="0", Magnitude=1, TrailLength=1, spawnflags=""):
        Entity.__init__(self, "env_spark", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Max Delay : The longest delay between sparks (in seconds).
        self.MaxDelay: str = MaxDelay
        # Magnitude : The size of the sparks.
        self.Magnitude = Magnitude
        # Spark Trail Length : 
        self.TrailLength = TrailLength
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "MaxDelay", "Magnitude", "TrailLength", "spawnflags"])


class EnvSplash(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1253.
    An entity that creates a splash effect at its origin. If the 'find water surface' spawnflag is set, it will instead trace down below itself to find the water surface on which to create splashes.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", scale: float="8.0", spawnflags=""):
        Entity.__init__(self, "env_splash", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Scale of the splash : 
        self.scale: float = scale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "scale", "spawnflags"])


class EnvSprite(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2518.
    An entity that controls the drawing of a sprite in the world.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, mindxlevel=0, maxdxlevel=0, framerate: str="10.0", model: str="sprites/glow01.spr", scale: str="0.25", spawnflags="", GlowProxySize: float="2.0", HDRColorScale: float="1.0"):
        Entity.__init__(self, "env_sprite", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Framerate : Rate at which the sprite should animate, if at all.
        self.framerate: str = framerate
        # Sprite Name : Material of the sprite to be drawn.
        self.model: str = model
        # Scale : Scale multiplier of the sprite.
        self.scale: str = scale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Size of Glow Proxy Geometry. : Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered.
        self.GlowProxySize: float = GlowProxySize
        # HDR color scale. : float value to multiply sprite color by when running in HDR mode.
        self.HDRColorScale: float = HDRColorScale

        self.auto_properties.extend(["origin", "targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "mindxlevel", "maxdxlevel", "framerate", "model", "scale", "spawnflags", "GlowProxySize", "HDRColorScale"])


class EnvSpriteOriented(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2544.
    A env_sprite that allows orientation.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, mindxlevel=0, maxdxlevel=0, angles: "Origin"="0 0 0", framerate: str="10.0", model: str="sprites/glow01.spr", scale: str="", spawnflags="", GlowProxySize: float="2.0", HDRColorScale: float="1.0"):
        Entity.__init__(self, "env_sprite_oriented", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Framerate : Rate at which the sprite should animate, if at all.
        self.framerate: str = framerate
        # Sprite Name : Material of the sprite to be drawn.
        self.model: str = model
        # Scale : Scale multiplier of the sprite.
        self.scale: str = scale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Size of Glow Proxy Geometry. : Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered.
        self.GlowProxySize: float = GlowProxySize
        # HDR color scale. : float value to multiply sprite color by when running in HDR mode.
        self.HDRColorScale: float = HDRColorScale

        self.auto_properties.extend(["origin", "targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "mindxlevel", "maxdxlevel", "angles", "framerate", "model", "scale", "spawnflags", "GlowProxySize", "HDRColorScale"])


class EnvSpritetrail(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8786.
    A magical trail you can parent to anything you heart desires.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", lifetime: float="0.5", startwidth: float="8.0", endwidth: float="1.0", spritename: str="sprites/bluelaser1.vmt", renderamt: int=255, rendercolor: "RGB"="255 255 255", rendermode=5):
        Entity.__init__(self, "env_spritetrail", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Lifetime : 
        self.lifetime: float = lifetime
        # Start Width : 
        self.startwidth: float = startwidth
        # End Width : 
        self.endwidth: float = endwidth
        # Sprite Name : 
        self.spritename: str = spritename
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Render Mode : 
        self.rendermode = rendermode

        self.auto_properties.extend(["origin", "targetname", "parentname", "lifetime", "startwidth", "endwidth", "spritename", "renderamt", "rendercolor", "rendermode"])


class EnvSteam(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2153.
    An entity used to create a jet of steam.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", spawnflags="", InitialState=0, type=0, SpreadSpeed: int=15, Speed: int=120, StartSize: int=10, EndSize: int=25, Rate: int=26, rendercolor: "RGB"="255 255 255", JetLength: int=80, renderamt: int=255, rollspeed: float=8):
        Entity.__init__(self, "env_steam", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Initial State : 
        self.InitialState = InitialState
        # Particle Type : 
        self.type = type
        # Spread Speed : The amount of random spread in the particle's velocity after they spawn.
        self.SpreadSpeed: int = SpreadSpeed
        # Speed : The default speed at which the particles move after they spawn.
        self.Speed: int = Speed
        # Particle start size : The initial size of the particles after they spawn.
        self.StartSize: int = StartSize
        # Particle end size : The size of the particles at the point at which they are removed.
        self.EndSize: int = EndSize
        # Emission rate : The rate of particle emission. i.e. particles per second.
        self.Rate: int = Rate
        # Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Length of steam jet : The length of the jet determines the lifetime of each particle.
        self.JetLength: int = JetLength
        # Translucency : 
        self.renderamt: int = renderamt
        # How fast does the particles spin : 
        self.rollspeed: float = rollspeed

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "spawnflags", "InitialState", "type", "SpreadSpeed", "Speed", "StartSize", "EndSize", "Rate", "rendercolor", "JetLength", "renderamt", "rollspeed"])


class EnvSun(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1283.
    An entity to control & draw a sun effect in the sky.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", target: str="", use_angles=0, pitch: int=0, rendercolor: "RGB"="100 80 80", overlaycolor: "RGB"="0 0 0", size: int=16, overlaysize: int=-1, material: str="sprites/light_glow02_add_noz", overlaymaterial: str="sprites/light_glow02_add_noz", HDRColorScale: float="1.0"):
        Entity.__init__(self, "env_sun", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Viewer entity : Name of an entity used to determine where the sun is in the skybox. The sun should be lined up on a line from this entity to the env_sun entity.
        self.target: str = target
        # UseAngles : The old way to orient env_sun is to point it at a target. The new way is to specify the angles. If you use the new way, set this property to YES.
        self.use_angles = use_angles
        # Pitch : 
        self.pitch: int = pitch
        # Sun Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Overlay Color (R G B) : A value of 0 0 0 will act the old way.
        self.overlaycolor: "RGB" = overlaycolor
        # Size : 
        self.size: int = size
        # Overlay Size : A value of -1 means the overlay will act the old way.
        self.overlaysize: int = overlaysize
        # Material Name : Material of the inner glow.
        self.material: str = material
        # Overlay Material Name : Material of the overlay glow.
        self.overlaymaterial: str = overlaymaterial
        # HDR color scale. : float value to multiply sprite color by when running in HDR mode.
        self.HDRColorScale: float = HDRColorScale

        self.auto_properties.extend(["origin", "targetname", "angles", "target", "use_angles", "pitch", "rendercolor", "overlaycolor", "size", "overlaysize", "material", "overlaymaterial", "HDRColorScale"])


class EnvTexturetoggle(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1243.
    An entity that allows you to change the textures on other brush-built entities.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str=""):
        Entity.__init__(self, "env_texturetoggle", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target Brush(es). : 
        self.target: str = target

        self.auto_properties.extend(["origin", "targetname", "target"])


class EnvTonemapController(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1457.
    An entity that controls the HDR tonemapping for the player. Think of it as a method of controlling the exposure of the player's eyes.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "env_tonemap_controller", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class EnvViewpunch(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2300.
    Causes a view punch on players.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", punchangle: "Origin"="0 0 90", radius: float="500"):
        Entity.__init__(self, "env_viewpunch", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Punch angles : The punch angles to apply.
        self.punchangle: "Origin" = punchangle
        # Effect Radius : The radius around this entity in which to affect players.
        self.radius: float = radius

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags", "punchangle", "radius"])


class EnvWind(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2571.
    An entity to control wind in the map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", minwind: int=20, maxwind: int=50, mingust: int=100, maxgust: int=250, mingustdelay: int=10, maxgustdelay: int=20, gustduration: int=5, gustdirchange: int=20, windradius: float="-1", windradiusinner: float="0"):
        Entity.__init__(self, "env_wind", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Min normal speed : Minimum speed of the wind while idling.
        self.minwind: int = minwind
        # Max normal speed : Maximum speed of the wind while idling.
        self.maxwind: int = maxwind
        # Min gust speed : Minimum speed of wind gusts.
        self.mingust: int = mingust
        # Max gust speed : Maximum speed of wind gusts.
        self.maxgust: int = maxgust
        # Min gust delay : Minimum time delay between random gusts.
        self.mingustdelay: int = mingustdelay
        # Max gust delay : Maximum time delay between random gusts.
        self.maxgustdelay: int = maxgustdelay
        # Gust Duration : How long will the wind gust for.
        self.gustduration: int = gustduration
        # Max gust dir change (degrees) : Maximum amount that the wind's direction changes due to a gust.
        self.gustdirchange: int = gustdirchange
        # Radius : The radius in which this env_wind should simulate wind. -1 = everywhere
        self.windradius: float = windradius
        # Inner Radius : The inner-radius for the env_wind, which enables varying intensities at certain distances. 0 = no inner radius
        self.windradiusinner: float = windradiusinner

        self.auto_properties.extend(["origin", "targetname", "angles", "minwind", "maxwind", "mingust", "maxgust", "mingustdelay", "maxgustdelay", "gustduration", "gustdirchange", "windradius", "windradiusinner"])


class EnvZoom(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1182.
    An entity that can be used to control the player's FOV. Useful for scenes where the player's view is being controlled, or player-usable binoculars/telescopes, etc.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Rate: float="1.0", FOV: int=75, spawnflags=""):
        Entity.__init__(self, "env_zoom", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Seconds to reach target : Amount of time it should take to reach the specified FOV.
        self.Rate: float = Rate
        # Target FOV : FOV that this entity should set the player's FOV to when active.
        self.FOV: int = FOV
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "Rate", "FOV", "spawnflags"])


class FilterActivatorClass(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6312.
    A filter that filters by the class name of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filterclass: str=""):
        Entity.__init__(self, "filter_activator_class", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Filter Classname : The class name to filter by. If the filter mode is Allow, only entities whose 
        self.filterclass: str = filterclass

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filterclass"])


class FilterActivatorClassify(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6490.
    A filter that filters by the Class_T of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filterclassify=0):
        Entity.__init__(self, "filter_activator_classify", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Filter Classify : The class to filter by. If the filter mode is Allow, only entities whose 
        self.filterclassify = filterclassify

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filterclassify"])


class FilterActivatorContext(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6404.
    A filter that filters by the response contexts of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, ResponseContext: str="", any=0):
        Entity.__init__(self, "filter_activator_context", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Filter Context : The context(s) to filter by. Syntax is 'key:value,key:value'. 
        self.ResponseContext: str = ResponseContext
        # Pass if entity has any of these contexts : Should this filter only pass if the entity contains all of these contexts or can it pass if the entity has at least one of them?
        self.any = any

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "ResponseContext", "any"])


class FilterActivatorHintgroup(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6437.
    A filter that filters by the hintgroup of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filtername: str="", hintlimiting=2):
        Entity.__init__(self, "filter_activator_hintgroup", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Filter Hintgroup : The hintgroup to filter by. If the filter mode is Allow, only entities who have 
        self.filtername: str = filtername
        # Hint Limit Nav : If set to Yes, only entities who are limiting navigation to their hintgroup will be allowed. 
        self.hintlimiting = hintlimiting

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filtername", "hintlimiting"])


class FilterActivatorInvolume(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6526.
    A filter that tests whether the activator is within a volume.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, target: str="", tester: str="!activator"):
        Entity.__init__(self, "filter_activator_involume", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Volume : The volume to be tested with. This filter passes if the activator is within this volume. Intended to be a brush entity. (e.g. a trigger)
        self.target: str = target
        # Volume Tester : Who should be in the volume for the filter to pass?
        self.tester: str = tester

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "target", "tester"])


class FilterActivatorKeyfield(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6454.
    A filter that filters by the activator's keyfields.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, keyname: str="", value: str=""):
        Entity.__init__(self, "filter_activator_keyfield", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Key : The key name to filter by. Please note that certain keyvalues, particularly 
        self.keyname: str = keyname
        # Value (Optional) : The key value to filter by. If empty, the filter will pass if the entity just has the keyfield.
        self.value: str = value

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "keyname", "value"])


class FilterActivatorMassGreater(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6320.
    A filter that filters by the mass of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filtermass: float=""):
        Entity.__init__(self, "filter_activator_mass_greater", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Filter Mass : The mass to filter by. If the filter mode is Allow, only entities whose 
        self.filtermass: float = filtermass

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filtermass"])


class FilterActivatorModel(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6394.
    A filter that filters by the model of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filtermodel: str="", skin: str=-1):
        Entity.__init__(self, "filter_activator_model", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Filter Model : The model to filter by. If the filter mode is Allow, only entities whose 
        self.filtermodel: str = filtermodel
        # Skin : Some models have multiple versions of their textures, called skins. Use this if you want to filter by skins as well. If you want any skin to be allowed, be sure to leave this at -1! It might automatically change when you choose a model.
        self.skin: str = skin

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filtermodel", "skin"])


class FilterActivatorName(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6304.
    A filter that filters by the name of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filtername: str=""):
        Entity.__init__(self, "filter_activator_name", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Filter Name : The name to filter by. If the filter mode is Allow, only entities whose 
        self.filtername: str = filtername

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filtername"])


class FilterActivatorRelationship(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6463.
    A filter that filters by the activator's relationship with another entity. Please note that any entity incapable of supporting relationships is automatically passed if this filter is set to 'Neutral'.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, target: str="", rank: str="", disposition=3, inverttarget=0, Reciprocal=0):
        Entity.__init__(self, "filter_activator_relationship", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Subject : The entity whose relationships we should test with. If empty, the entity using the filter will be used.
        self.target: str = target
        # Priority : The priority the subject should have with the target. If empty, priority will be disregarded.
        self.rank: str = rank
        # Disposition : What relationship the subject should have with the activator.
        self.disposition = disposition
        # Invert Subject : Should we use the activator's relationship to the subject instead?
        self.inverttarget = inverttarget
        # Reciprocal : Should we only pass if both entities have the same relationship with each other? Makes 'Invert Subject' useless.
        self.Reciprocal = Reciprocal

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "target", "rank", "disposition", "inverttarget", "Reciprocal"])


class FilterActivatorSquad(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6423.
    A filter that filters by the squad of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filtername: str="", allowsilentmembers=1):
        Entity.__init__(self, "filter_activator_squad", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Filter Squad : The squad name to filter by. If the filter mode is Allow, only entities who are 
        self.filtername: str = filtername
        # Allow Silent Members : Allows silent squad members to pass the filter. Silent squad members are enemy finders and vital allies in player_squad.
        self.allowsilentmembers = allowsilentmembers

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filtername", "allowsilentmembers"])


class FilterActivatorSurfacedata(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6534.
    A filter that tests the activator's surface data.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filtersurfaceprop="", SurfaceType=1):
        Entity.__init__(self, "filter_activator_surfacedata", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Surface : The surface to test with.
        self.filtersurfaceprop = filtersurfaceprop
        # Type : What to actually filter by.
        self.SurfaceType = SurfaceType

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filtersurfaceprop", "SurfaceType"])


class FilterBase(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6274.
    A filter that literally just passes as true every single time. Useful for when you...uh...want to pass something as true every single time?
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0):
        Entity.__init__(self, "filter_base", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested


        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested"])


class FilterBloodControl(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6606.
    A filter that controls the blood an entity emits. Must be used as a damage filter to work properly.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, BloodDisabled=0, damagefilter: str="", SecondaryFilterMode=0):
        Entity.__init__(self, "filter_blood_control", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested


        # Blood Disabled : Sets whether blood shouldn't be produced by damage. Overrides the secondary filter, if any.
        self.BloodDisabled = BloodDisabled
        # Secondary Filter : An optional secondary filter that can be used for either whose damage could produce blood or as a real damage filter for whether any damage should be taken at all.
        self.damagefilter: str = damagefilter
        # Secondary filter is damage filter : Sets whether the secondary filter should be treated as a redirected damage filter (must pass to take actual damage) instead of just permitting blood.
        self.SecondaryFilterMode = SecondaryFilterMode

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "BloodDisabled", "damagefilter", "SecondaryFilterMode"])


class FilterDamageLogic(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6660.
    A filter that fires outputs based on received damage information.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, damagefilter: str="", SecondaryFilterMode=0):
        Entity.__init__(self, "filter_damage_logic", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested


        # Secondary Filter : An optional secondary filter that can be used as an actual damage filter, which damage to operate with, etc.
        self.damagefilter: str = damagefilter
        # Secondary Filter Mode : Sets how the secondary filter should be treated.
        self.SecondaryFilterMode = SecondaryFilterMode

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "damagefilter", "SecondaryFilterMode"])


class FilterDamageMod(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6628.
    A filter that modifies damage taken by an entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, SetDamageMultiplier: float="1.0", SetDamageAddend: float="0", SetDamageBitsAdded: int=0, SetDamageBitsRemoved: int=0, NewAttacker: str="", NewInflictor: str="", NewWeapon: str="", damagefilter: str="", SecondaryFilterMode=0):
        Entity.__init__(self, "filter_damage_mod", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested


        # Damage Multiplier : Multiplies the damage by this scale.
        self.SetDamageMultiplier: float = SetDamageMultiplier
        # Damage Addend : Adds to or subtracts the damage by this number. This is done after the damage is multiplied by the damage scale.
        self.SetDamageAddend: float = SetDamageAddend
        # Damage Bits Added : Adds bits to the damage type. See a damage type keyvalue in an entity like filter_damage_type to get their bit representation.
        self.SetDamageBitsAdded: int = SetDamageBitsAdded
        # Damage Bits Removed : Removes bits from the damage type. See a damage type keyvalue in an entity like filter_damage_type to get their bit representation.
        self.SetDamageBitsRemoved: int = SetDamageBitsRemoved
        # New Attacker : If specified, the damage will be credited to this entity instead of the original attacker.
        self.NewAttacker: str = NewAttacker
        # New Inflictor : If specified, the damage's inflictor will be changed to this entity instead of the original inflictor.
        self.NewInflictor: str = NewInflictor
        # New Weapon : If specified, the damage's weapon will be changed to this entity instead of the original weapon.
        self.NewWeapon: str = NewWeapon
        # Secondary Filter : An optional secondary filter that can be used for either whose damage could be modified or as a real damage filter for whether any damage should be taken at all.
        self.damagefilter: str = damagefilter
        # Secondary Filter Mode : Sets whether the secondary filter should be treated as a redirected damage filter (must pass to take actual damage) instead of just permitting modification.
        self.SecondaryFilterMode = SecondaryFilterMode

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "SetDamageMultiplier", "SetDamageAddend", "SetDamageBitsAdded", "SetDamageBitsRemoved", "NewAttacker", "NewInflictor", "NewWeapon", "damagefilter", "SecondaryFilterMode"])


class FilterDamageTransfer(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6575.
    Whenever an entity using this as a damage filter takes damage, that damage is transferred to another entity. The entity using this filter will not take the damage unless a secondary filter is specified and passed or caller damage is allowed. All damage information including force, type, attacker, etc. should be retained during the transfer and it obeys the target entity's own damage filters.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, target: str="", AdjustDamagePosition=0, MaxEntities: int=1, CallerDamageAllowed=0, damagefilter: str="", SecondaryFilterMode=0):
        Entity.__init__(self, "filter_damage_transfer", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested


        # Transfer Target : The name of the entity/entities that will receive the damage. Please note that this complies with their own damage filters.
        self.target: str = target
        # Adjust Damage Position : Adjusts the damage position to be relative to the target entity.
        self.AdjustDamagePosition = AdjustDamagePosition
        # Max Entities : The maximum number of entities matching the criteria who can be damaged. 0 = no limit. (0 is actually changed to 2048 internally, but don't worry about that)
        self.MaxEntities: int = MaxEntities
        # Caller Damage Allowed : Sets whether the caller using this filter is allowed to take the transferred damage as well.
        self.CallerDamageAllowed = CallerDamageAllowed
        # Secondary Filter : A secondary filter that can be used for certain things. See the Secondary Filter Mode for different ways you can use this. This is optional.
        self.damagefilter: str = damagefilter
        # Secondary Filter Mode : How should the secondary filter be used?
        self.SecondaryFilterMode = SecondaryFilterMode

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "target", "AdjustDamagePosition", "MaxEntities", "CallerDamageAllowed", "damagefilter", "SecondaryFilterMode"])


class FilterDamageType(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6328.
    A damage filter that filters by the type of damage inflicted. This can only be used as a damage filter, not as an activator filter.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, damagepresets=0, damageor=0, filtertype=1, damagetype=0):
        Entity.__init__(self, "filter_damage_type", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Damage Presets : User-friendly 'presets' based on combined damage types. This is accompanied by the damage type and damage or, if they are specified.
        self.damagepresets = damagepresets
        # Damage Or : Optional flags that can accompany the damage type.
        self.damageor = damageor

        # Logic Type : Most of these are only relevant if more than one damage type is a factor.
        self.filtertype = filtertype
        # Damage Type : The type(s) of damage associated with this entity.
        self.damagetype = damagetype

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "damagepresets", "damageor", "filtertype", "damagetype"])


class FilterEnemy(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6373.
    A filter that filters a potential enemy entity by a set of criteria.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, filtername: str="", filter_radius: float=0, filter_outer_radius: float=0, filter_max_per_enemy: int=0, spawnflags=""):
        Entity.__init__(self, "filter_enemy", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Name/Classname : The classname or entity name to filter by. If the filter mode is Allow, only entities whose 
        self.filtername: str = filtername
        # Radius : Radius by which to test the proximity of the enemy.  If the filter mode is Allow, only entities whose 
        self.filter_radius: float = filter_radius
        # Outer Radius : Enemies outside this radius are considered invalid if Allow is set and valid if Disallow is set.
        self.filter_outer_radius: float = filter_outer_radius
        # Max Squadmates Per Enemy : Maximum number of squadmates allowed to target any given entity.
        self.filter_max_per_enemy: int = filter_max_per_enemy
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "filtername", "filter_radius", "filter_outer_radius", "filter_max_per_enemy", "spawnflags"])


class FilterMulti(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6279.
    A filter that tests the activator against multiple filters. This allows you to build more complex filters, such as'Allow anyone on Team 1 who is also class engineer', or 'Allow everyone except classes npc_zombie and npc_headcrab'.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", PassCallerWhenTested=0, filtertype=0, Negated=0, Filter01: str="", Filter02: str="", Filter03: str="", Filter04: str="", Filter05: str=""):
        Entity.__init__(self, "filter_multi", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Logic Type : 
        self.filtertype = filtertype
        # Negate Outcome : Whether to negate the result of the subfilters, after combining them using the Logic Type chosen.\n
        self.Negated = Negated
        # Filter 1 : Activator filter to test.
        self.Filter01: str = Filter01
        # Filter 2 : Activator filter to test.
        self.Filter02: str = Filter02
        # Filter 3 : Activator filter to test.
        self.Filter03: str = Filter03
        # Filter 4 : Activator filter to test.
        self.Filter04: str = Filter04
        # Filter 5 : Activator filter to test.
        self.Filter05: str = Filter05

        self.auto_properties.extend(["origin", "targetname", "PassCallerWhenTested", "filtertype", "Negated", "Filter01", "Filter02", "Filter03", "Filter04", "Filter05"])


class FilterRedirectInflictor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6560.
    A filter that passes the inflictor of damage (e.g. the crossbow bolt instead of the crossbow user) to a separate filter.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, damagefilter: str=""):
        Entity.__init__(self, "filter_redirect_inflictor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Target Filter : The filter to pass to. You can also use the 'SetField' input.
        self.damagefilter: str = damagefilter


        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "damagefilter"])


class FilterRedirectOwner(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6570.
    A filter that passes the activator's owner entity to a separate filter.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, damagefilter: str=""):
        Entity.__init__(self, "filter_redirect_owner", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Target Filter : The filter to pass to. You can also use the 'SetField' input.
        self.damagefilter: str = damagefilter


        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "damagefilter"])


class FilterRedirectWeapon(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6565.
    A filter that passes the activator's weapon OR the weapon causing damage to a separate filter, depending on what this filter is filtering.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", PassCallerWhenTested=0, damagefilter: str=""):
        Entity.__init__(self, "filter_redirect_weapon", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated
        # Pass caller when tested : When tested with TestActivator or TestEntity, this causes the OnPass and OnFail outputs to use either this filter as the caller or the entity that called the test as the caller.
        self.PassCallerWhenTested = PassCallerWhenTested

        # Target Filter : The filter to pass to. You can also use the 'SetField' input.
        self.damagefilter: str = damagefilter


        self.auto_properties.extend(["origin", "targetname", "Negated", "PassCallerWhenTested", "damagefilter"])


class FuncAreaportal(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7654.
    A portal brush used to manage visibility in maps. Portals define areas, which are spaces that are connected in the map. Both sides of a portal cannot touch the same area, for example, a doughnut shaped map would require at least two portals to divide the map into two areas. A linear map could be divided into two areas with a single area portal.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", target: str="", StartOpen=1, PortalVersion: int=""):
        Entity.__init__(self, "func_areaportal", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Name of Linked Door : (Optional) The name of a door whose open/closed state controls the on/off state of this area portal.
        self.target: str = target
        # Initial State : 
        self.StartOpen = StartOpen
        # TODO: Replace this filler. : 
        self.PortalVersion: int = PortalVersion

        self.auto_properties.extend(["targetname", "target", "StartOpen", "PortalVersion"])


class FuncAreaportalOneway(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7675.
    
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", target: str="", StartOpen=1, PortalVersion: int="", origin_: "Origin"="", group: str="", onewayfacing: "Origin"="0 0 0", avoidpop=0):
        Entity.__init__(self, "func_areaportal_oneway", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Name of Linked Door : (Optional) The name of a door whose open/closed state controls the on/off state of this area portal.
        self.target: str = target
        # Initial State : 
        self.StartOpen = StartOpen
        # TODO: Replace this filler. : 
        self.PortalVersion: int = PortalVersion

        # TODO: Replace this filler. : 
        self.origin_: "Origin" = origin_
        # One-way group : Optimisation: oneway portals in the same group share a single closed/open state. Use this, for example, on walls full of one-way windows.
        self.group: str = group
        # Open direction : The portal will be open when the player is within 90 degrees of this direction.
        self.onewayfacing: "Origin" = onewayfacing
        # Avoid latency pop : Enable this if it becomes noticeable that the portal stays closed momentarily after the player walks past it. The portal will open 80 units in advance.
        self.avoidpop = avoidpop

        self.auto_properties.extend(["targetname", "target", "StartOpen", "PortalVersion", "origin_", "group", "onewayfacing", "avoidpop"])


class FuncAreaportalwindow(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1529.
    An entity that can be used to optimize the visibility in a map. If you seal off an area with them, when the viewer moves the specified distance away from them, they will go opaque and the parts inside the area will not be drawn. The 'target' brush model should enclose the func_areaportal window so no parts of it are culled by the window. If you use the optional foreground brush model, then it should enclose the 'target' brush model.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", target: str="", FadeStartDist: int=128, FadeDist: int=512, TranslucencyLimit: str="0.2", BackgroundBModel: str="", PortalVersion: int=""):
        Entity.__init__(self, "func_areaportalwindow", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Rendered Window : The name of a brush model to render as the window.
        self.target: str = target
        # Fade Start Distance : When the viewer is closer than this distance, the alpha is set to 'TranslucencyLimit'.
        self.FadeStartDist: int = FadeStartDist
        # Fade End Distance : When the viewer is at this distance, the portal becomes solid and closes off.
        self.FadeDist: int = FadeDist
        # Translucency limit : This value limits the translucency of the bmodel and prevents it from becoming invisible when the viewer is right on top of it.
        self.TranslucencyLimit: str = TranslucencyLimit
        # Foreground bmodel : (Optional) brush model that is drawn after the fading brush model. This model should have alpha in its textures so you can see through it.
        self.BackgroundBModel: str = BackgroundBModel
        # TODO: Replace this filler. : 
        self.PortalVersion: int = PortalVersion

        self.auto_properties.extend(["targetname", "target", "FadeStartDist", "FadeDist", "TranslucencyLimit", "BackgroundBModel", "PortalVersion"])


class FuncBreakable(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7708.
    A brush entity that can be broken from damage, or an input.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", damagefilter: str="", ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", parentname: str="", globalname: str="", spawnflags="", propdata=0, health: int=1, material=0, explosion=0, gibdir: "Origin"="0 0 0", nodamageforces=0, gibmodel: str="", spawnobject=0, explodemagnitude: int=0, pressuredelay: float=0, origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, disableshadows=0, minhealthdmg: int=0, _minlight: str="", physdamagescale: float="1.0"):
        Entity.__init__(self, "func_breakable", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter


        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Prop Data : Set to the best approximation of the size and material of this entity's brushes. If set, it will override this entity's health and damage taken from various weapons. See the propdata.txt file in the scripts directory of your MOD to get a detailed list of what each entry specifies.
        self.propdata = propdata
        # Strength : Number of points of damage to take before breaking. 0 means don't break.
        self.health: int = health
        # Material Type : Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken.
        self.material = material
        # Gibs Direction : Used to decide which direction to throw gibs when broken.
        self.explosion = explosion
        # Precise Gib Direction : Specifies the direction to throw gibs when this breakable breaks. Be sure to select Use Precise Gib Dir in the Gibs Direction field!
        self.gibdir: "Origin" = gibdir
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Gib Model : Used by HL1Port to specify a custom gib model to break into, overriding the 'Material Type'.
        self.gibmodel: str = gibmodel
        # Spawn On Break : When broken, an entity of the selected type will be created.
        self.spawnobject = spawnobject
        # Explode Magnitude : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage.
        self.explodemagnitude: int = explodemagnitude
        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale

        self.auto_properties.extend(["targetname", "damagefilter", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "parentname", "globalname", "spawnflags", "propdata", "health", "material", "explosion", "gibdir", "nodamageforces", "gibmodel", "spawnobject", "explodemagnitude", "pressuredelay", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "disableshadows", "minhealthdmg", "_minlight", "physdamagescale"])


class FuncBreakableSurf(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7717.
    A breakable surface, for partially breakable glass / tile / etc.  All faces but the desired visible one must be marked as NODRAW and thatface must be 4 sided.  The material applied to the visible face must be set up to be breakable.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", damagefilter: str="", ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", parentname: str="", globalname: str="", propdata=0, material=0, explosion=0, gibdir: "Origin"="0 0 0", nodamageforces=0, gibmodel: str="", spawnobject=0, explodemagnitude: int=0, pressuredelay: float=0, renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, disableshadows=0, spawnflags="", health: int=5, fragility: int=100, surfacetype=0):
        Entity.__init__(self, "func_breakable_surf", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter


        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Prop Data : Set to the best approximation of the size and material of this entity's brushes. If set, it will override this entity's health and damage taken from various weapons. See the propdata.txt file in the scripts directory of your MOD to get a detailed list of what each entry specifies.
        self.propdata = propdata
        # Material Type : Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken.
        self.material = material
        # Gibs Direction : Used to decide which direction to throw gibs when broken.
        self.explosion = explosion
        # Precise Gib Direction : Specifies the direction to throw gibs when this breakable breaks. Be sure to select Use Precise Gib Dir in the Gibs Direction field!
        self.gibdir: "Origin" = gibdir
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Gib Model : Used by HL1Port to specify a custom gib model to break into, overriding the 'Material Type'.
        self.gibmodel: str = gibmodel
        # Spawn On Break : When broken, an entity of the selected type will be created.
        self.spawnobject = spawnobject
        # Explode Magnitude : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage.
        self.explodemagnitude: int = explodemagnitude
        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Health : The amount of damage the surface takes before breaking.
        self.health: int = health
        # Fragility : If the 'Surface Type' is set to Glass, this value sets how fragile the glass pieces are after the surface has been broken.
        self.fragility: int = fragility
        # Surface Type : 
        self.surfacetype = surfacetype

        self.auto_properties.extend(["targetname", "damagefilter", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "parentname", "globalname", "propdata", "material", "explosion", "gibdir", "nodamageforces", "gibmodel", "spawnobject", "explodemagnitude", "pressuredelay", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "disableshadows", "spawnflags", "health", "fragility", "surfacetype"])


class FuncBrush(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1564.
    An brush built entity with various features.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", InputFilter=0, StartDisabled=0, disableshadows=0, spawnflags="", _minlight: str="", Solidity=0, excludednpc: str="", invert_exclusion=0, solidbsp=0, vrad_brush_cast_shadows=0):
        Entity.__init__(self, "func_brush", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Input Filter : Used to specify which inputs this entity will accept.
        self.InputFilter = InputFilter

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Solidity : Used to control the solidity/collision of these brushes.
        self.Solidity = Solidity
        # NPC class excluded from collisions : If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name.
        self.excludednpc: str = excludednpc
        # Invert NPC class exclusion : If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid.
        self.invert_exclusion = invert_exclusion
        # Solid BSP : Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush.
        self.solidbsp = solidbsp
        # Shadows : Set this if this brush casts lightmap shadows.
        self.vrad_brush_cast_shadows = vrad_brush_cast_shadows

        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "InputFilter", "StartDisabled", "disableshadows", "spawnflags", "_minlight", "Solidity", "excludednpc", "invert_exclusion", "solidbsp", "vrad_brush_cast_shadows"])


class FuncButton(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3922.
    A brush entity that's designed to be used for a player-useable button. When used by the player, it moves to a pressed position.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, damagefilter: str="", movedir: "Origin"="0 0 0", speed: int=5, lip: int=0, sounds=0, wait: int=3, spawnflags="", locked_sound=0, unlocked_sound=0, locked_sentence=0, unlocked_sentence=0, _minlight: str=""):
        Entity.__init__(self, "func_button", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter


        # Move Direction (Pitch Yaw Roll) : Specifies the direction of motion to move when the button is used.
        self.movedir: "Origin" = movedir
        # Speed : The speed that the button moves, in inches per second.
        self.speed: int = speed
        # Lip : The amount, in inches, of the button to leave sticking out of the wall it recedes into when pressed. Negative values make the button recede even further into the wall.
        self.lip: int = lip
        # Sounds : 
        self.sounds = sounds
        # Delay Before Reset (-1 stay) : Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns.
        self.wait: int = wait
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Locked Sound : Sound played when the player tries to use the button, and fails because it's locked.
        self.locked_sound = locked_sound
        # Unlocked Sound : Sound to play when the button is door...Err--Sound played when the button is unlocked.
        self.unlocked_sound = unlocked_sound
        # Locked Sentence : A sentence played when the player tries to use the button, and fails because it's locked.
        self.locked_sentence = locked_sentence
        # Unlocked Sentence : A sentence played when the button is unlocked.
        self.unlocked_sentence = unlocked_sentence
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "damagefilter", "movedir", "speed", "lip", "sounds", "wait", "spawnflags", "locked_sound", "unlocked_sound", "locked_sentence", "unlocked_sentence", "_minlight"])


class FuncClipClient(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1558.
    A brush entity that's considered solid to clientside ragdolls and other clientside objects.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", StartDisabled=0):
        Entity.__init__(self, "func_clip_client", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled


        self.auto_properties.extend(["targetname", "parentname", "StartDisabled"])


class FuncClipVphysics(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1550.
    A brush entity that's considered solid to vphysics.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", StartDisabled=0, filtername: str=""):
        Entity.__init__(self, "func_clip_vphysics", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Filter Name : Filter to use to see if activator collides with me. See filter_activator_name for more explanation. Allow means 'Allow to Block' for this entity.
        self.filtername: str = filtername

        self.auto_properties.extend(["targetname", "StartDisabled", "filtername"])


class FuncConveyor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7738.
    Conveyor Belt
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, disableshadows=0, movedir: "Origin"="0 0 0", spawnflags="", speed: str="100", _minlight: str=""):
        Entity.__init__(self, "func_conveyor", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Move Direction (Pitch Yaw Roll) : The direction conveyor moves.
        self.movedir: "Origin" = movedir
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Conveyor Speed : 
        self.speed: str = speed
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "disableshadows", "movedir", "spawnflags", "speed", "_minlight"])


class FuncDetail(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7755.
    An entity that turns its brushes into detail brushes. Detail brushes do NOT contribute to visibility in the PVS. World geometry is not clipped to detail brushes, so if you have a small detail clump attached to a wall, the wall won't be cut up by the detail brush.func_detail is great for high-frequency brush geometry that's visual detail only. It is also ideal for reducing map VIS time.
    """
    def __init__(self, vmf_map: "ValveMap", mindxlevel=0, maxdxlevel=0):
        Entity.__init__(self, "func_detail", vmf_map)

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel


        self.auto_properties.extend(["mindxlevel", "maxdxlevel"])


class FuncDoor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4241.
    A brush entity for use as a player-useable door.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", disableshadows=0, speed: int=100, noise1: str="", noise2: str="", startclosesound: str="", closesound: str="", wait: int=4, lip: int=0, dmg: int=0, forceclosed=0, ignoredebris=0, health: int=0, locked_sound: str="", unlocked_sound: str="", spawnpos=0, spawnflags="", _minlight: str="", loopmovesound=0, origin: "Origin"="", movedir: "Origin"="0 0 0", filtername: str=""):
        Entity.__init__(self, "func_door", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Speed : The speed at which the door moves.
        self.speed: int = speed
        # Start Sound : Sound to play when the door starts moving.
        self.noise1: str = noise1
        # Stop Sound : Sound to play when the door stops moving.
        self.noise2: str = noise2
        # Start Close Sound : (Optional) Sound to play when the door starts closing.
        self.startclosesound: str = startclosesound
        # Stop Close Sound : (Optional) Sound to play when the door stops closing.
        self.closesound: str = closesound
        # Delay Before Reset (-1 stay) : Amount of time, in seconds, after the door has opened before it closes. Once it has closed, it can be used again. If the value is set to -1, the door never closes itself.
        self.wait: int = wait
        # Lip : The amount, in inches, of the button to leave sticking out of the wall it recedes into when pressed. Negative values make the button recede even further into the wall.
        self.lip: int = lip
        # Blocking Damage : Amount of damage done to entities that block the movement of this door, per frame.
        self.dmg: int = dmg
        # Force Closed : If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects.
        self.forceclosed = forceclosed
        # Ignore Debris : If set this will change the door's collision group to one that ignore collisions with debris objects (note that this is not compatible with the non-solid-to-player spawnflag).
        self.ignoredebris = ignoredebris
        # Health (shoot open) : 
        self.health: int = health
        # Locked Sound : Sound played when the player tries to use the door, and fails because it's locked.
        self.locked_sound: str = locked_sound
        # Unlocked Sound : Sound played when the button is door.
        self.unlocked_sound: str = unlocked_sound
        # Spawn Position : 
        self.spawnpos = spawnpos
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Loop Moving Sound? : If set to true, the door's 'Start Sound' will be continually looped until the door finishes moving.
        self.loopmovesound = loopmovesound

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Move Direction (Pitch Yaw Roll) : The direction the door will move, when it opens.
        self.movedir: "Origin" = movedir
        # Block Filter Name : Filter to use to determine entities that block the door. ( Half-Life: Source port only )
        self.filtername: str = filtername

        self.auto_properties.extend(["targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "disableshadows", "speed", "noise1", "noise2", "startclosesound", "closesound", "wait", "lip", "dmg", "forceclosed", "ignoredebris", "health", "locked_sound", "unlocked_sound", "spawnpos", "spawnflags", "_minlight", "loopmovesound", "origin", "movedir", "filtername"])


class FuncDoorRotating(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4249.
    A brush entity for use as a rotating player-useable door.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", disableshadows=0, speed: int=100, noise1: str="", noise2: str="", startclosesound: str="", closesound: str="", wait: int=4, lip: int=0, dmg: int=0, forceclosed=0, ignoredebris=0, health: int=0, locked_sound: str="", unlocked_sound: str="", spawnpos=0, _minlight: str="", loopmovesound=0, origin: "Origin"="", angles: "Origin"="0 0 0", spawnflags="", distance: int=90, solidbsp=0):
        Entity.__init__(self, "func_door_rotating", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Speed : The speed at which the door moves.
        self.speed: int = speed
        # Start Sound : Sound to play when the door starts moving.
        self.noise1: str = noise1
        # Stop Sound : Sound to play when the door stops moving.
        self.noise2: str = noise2
        # Start Close Sound : (Optional) Sound to play when the door starts closing.
        self.startclosesound: str = startclosesound
        # Stop Close Sound : (Optional) Sound to play when the door stops closing.
        self.closesound: str = closesound
        # Delay Before Reset (-1 stay) : Amount of time, in seconds, after the door has opened before it closes. Once it has closed, it can be used again. If the value is set to -1, the door never closes itself.
        self.wait: int = wait
        # Lip : The amount, in inches, of the button to leave sticking out of the wall it recedes into when pressed. Negative values make the button recede even further into the wall.
        self.lip: int = lip
        # Blocking Damage : Amount of damage done to entities that block the movement of this door, per frame.
        self.dmg: int = dmg
        # Force Closed : If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects.
        self.forceclosed = forceclosed
        # Ignore Debris : If set this will change the door's collision group to one that ignore collisions with debris objects (note that this is not compatible with the non-solid-to-player spawnflag).
        self.ignoredebris = ignoredebris
        # Health (shoot open) : 
        self.health: int = health
        # Locked Sound : Sound played when the player tries to use the door, and fails because it's locked.
        self.locked_sound: str = locked_sound
        # Unlocked Sound : Sound played when the button is door.
        self.unlocked_sound: str = unlocked_sound
        # Spawn Position : 
        self.spawnpos = spawnpos
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Loop Moving Sound? : If set to true, the door's 'Start Sound' will be continually looped until the door finishes moving.
        self.loopmovesound = loopmovesound

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Distance : The amount, in degrees, that the button should rotate when it's pressed.
        self.distance: int = distance
        # Solid Type : 
        self.solidbsp = solidbsp

        self.auto_properties.extend(["targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "disableshadows", "speed", "noise1", "noise2", "startclosesound", "closesound", "wait", "lip", "dmg", "forceclosed", "ignoredebris", "health", "locked_sound", "unlocked_sound", "spawnpos", "_minlight", "loopmovesound", "origin", "angles", "spawnflags", "distance", "solidbsp"])


class FuncDustcloud(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4463.
    A brush entity that spawns a translucent dust cloud within its volume.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", StartDisabled=0, Color: "RGB"="255 255 255", SpawnRate: int=40, SpeedMax: str=13, LifetimeMin: str=3, LifetimeMax: str=5, DistMax: int=1024, Frozen=0, Alpha: int=30, SizeMin: str=100, SizeMax: str=200):
        Entity.__init__(self, "func_dustcloud", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Particle Color (R G B) : 
        self.Color: "RGB" = Color
        # Particle Per Second : Number of particles to spawn, per second.
        self.SpawnRate: int = SpawnRate
        # Maximum Particle Speed : Maximum speed that the particles can move after spawning.
        self.SpeedMax: str = SpeedMax
        # Minimum Particle Lifetime : Minimum number of seconds until each particle dies. Particles live for a random duration between this and 'Maximum Particle Lifetime'.
        self.LifetimeMin: str = LifetimeMin
        # Maximum Particle Lifetime : Maximum number of seconds until each particle dies. Particles live for a random duration between 'Minimum Particle Lifetime' and this.
        self.LifetimeMax: str = LifetimeMax
        # Maximum Visible Distance : Maximum distance at which particles are visible. They fade to translucent at this distance.
        self.DistMax: int = DistMax
        # Frozen : When set, this entity spawns the number of particles in SpawnRate immediately, and then goes inactive.
        self.Frozen = Frozen

        # Alpha : Transparency of the particles. 0 means that they are invisible, 255 means opaque.
        self.Alpha: int = Alpha
        # Minimum Particle Size : 
        self.SizeMin: str = SizeMin
        # Maximum Particle Size : 
        self.SizeMax: str = SizeMax

        self.auto_properties.extend(["targetname", "StartDisabled", "Color", "SpawnRate", "SpeedMax", "LifetimeMin", "LifetimeMax", "DistMax", "Frozen", "Alpha", "SizeMin", "SizeMax"])


class FuncDustmotes(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4429.
    A brush entity that spawns sparkling dust motes within its volume.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", StartDisabled=0, Color: "RGB"="255 255 255", SpawnRate: int=40, SpeedMax: str=13, LifetimeMin: str=3, LifetimeMax: str=5, DistMax: int=1024, Frozen=0, SizeMin: str=10, SizeMax: str=20, Alpha: int=255):
        Entity.__init__(self, "func_dustmotes", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Particle Color (R G B) : 
        self.Color: "RGB" = Color
        # Particle Per Second : Number of particles to spawn, per second.
        self.SpawnRate: int = SpawnRate
        # Maximum Particle Speed : Maximum speed that the particles can move after spawning.
        self.SpeedMax: str = SpeedMax
        # Minimum Particle Lifetime : Minimum number of seconds until each particle dies. Particles live for a random duration between this and 'Maximum Particle Lifetime'.
        self.LifetimeMin: str = LifetimeMin
        # Maximum Particle Lifetime : Maximum number of seconds until each particle dies. Particles live for a random duration between 'Minimum Particle Lifetime' and this.
        self.LifetimeMax: str = LifetimeMax
        # Maximum Visible Distance : Maximum distance at which particles are visible. They fade to translucent at this distance.
        self.DistMax: int = DistMax
        # Frozen : When set, this entity spawns the number of particles in SpawnRate immediately, and then goes inactive.
        self.Frozen = Frozen

        # Minimum Particle Size : 
        self.SizeMin: str = SizeMin
        # Maximum Particle Size : 
        self.SizeMax: str = SizeMax
        # Alpha : Transparency of the particles. 0 means they will be invisible and 255 means they will be opaque.
        self.Alpha: int = Alpha

        self.auto_properties.extend(["targetname", "StartDisabled", "Color", "SpawnRate", "SpeedMax", "LifetimeMin", "LifetimeMax", "DistMax", "Frozen", "SizeMin", "SizeMax", "Alpha"])


class FuncFishPool(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7829.
    Creates a school of interactive fish that swim near this entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", model: str="models/Junkola.mdl", fish_count: int=10, max_range: float=150):
        Entity.__init__(self, "func_fish_pool", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # World model : 
        self.model: str = model
        # Fish Count : Number of Fish in this Pool
        self.fish_count: int = fish_count
        # Max Range : How far away a Fish can wander (max 255)
        self.max_range: float = max_range

        self.auto_properties.extend(["origin", "model", "fish_count", "max_range"])


class FuncGuntarget(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7812.
    This is a moving target that moves along a path of path_tracks. It can be shot and killed.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", speed: int=100, target: str="", health: int=0, _minlight: str=""):
        Entity.__init__(self, "func_guntarget", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Speed (units per second) : The speed at which the target moves along its path.
        self.speed: int = speed
        # First stop target : The name of the first path_track entity in the path that this target should follow.
        self.target: str = target
        # Damage to Take : The amount of damage taken before this target is killed.
        self.health: int = health
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "speed", "target", "health", "_minlight"])


class FuncIllusionary(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7767.
    Legacy support. Use func_brush instead.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, disableshadows=0, _minlight: str=""):
        Entity.__init__(self, "func_illusionary", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "disableshadows", "_minlight"])


class FuncInstance(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8984.
    An entity for placing an instance of a map file.  You may translate and rotate this entity. You can use the replace keys to do parameter changes on the instance contents.  In a $ at the beginning of a variable name.  Then just use the $variable name inside of the instance contents on any value portion of a key/value pair.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", file: str="", fixup_style=0, replace01: str="", replace02: str="", replace03: str="", replace04: str="", replace05: str="", replace06: str="", replace07: str="", replace08: str="", replace09: str="", replace10: str=""):
        Entity.__init__(self, "func_instance", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Fix Up Name : The name that all entities will be fixed up with based upon the fix up style.
        self.targetname: str = targetname
        # VMF Filename : This indicates a map file relative to the map's file name
        self.file: str = file
        # Entity Name Fix Up : Fixup style for instanced entity names.  Uses the 'Fix Up Name' field.
        self.fixup_style = fixup_style
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace01: str = replace01
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace02: str = replace02
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace03: str = replace03
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace04: str = replace04
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace05: str = replace05
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace06: str = replace06
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace07: str = replace07
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace08: str = replace08
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace09: str = replace09
        # Replace : This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0
        self.replace10: str = replace10

        self.auto_properties.extend(["origin", "angles", "targetname", "file", "fixup_style", "replace01", "replace02", "replace03", "replace04", "replace05", "replace06", "replace07", "replace08", "replace09", "replace10"])


class FuncInstanceParms(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 9011.
    Place one copy of this entity inside of an instance.  Whenever you add a $parameter for the instance, get the properties of this entity.  It will auto-populate it with the variables and allow you to indicate the variable type.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parm1: str="", parm2: str="", parm3: str="", parm4: str="", parm5: str="", parm6: str="", parm7: str="", parm8: str="", parm9: str="", parm10: str=""):
        Entity.__init__(self, "func_instance_parms", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm1: str = parm1
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm2: str = parm2
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm3: str = parm3
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm4: str = parm4
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm5: str = parm5
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm6: str = parm6
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm7: str = parm7
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm8: str = parm8
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm9: str = parm9
        # Parm : This is a parameter.  It goes in the form of $variable type.
        self.parm10: str = parm10

        self.auto_properties.extend(["origin", "parm1", "parm2", "parm3", "parm4", "parm5", "parm6", "parm7", "parm8", "parm9", "parm10"])


class FuncLadder(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1522.
    Ladder. Players will be able to freely along this brush, as if it was a ladder. If you are using a model prop for the visual representation of the ladder in the map, apply the toolsinvisibleladder material to the func_ladder brush.
    """
    def __init__(self, vmf_map: "ValveMap"):
        Entity.__init__(self, "func_ladder", vmf_map)


class FuncLadderendpoint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1502.
    An entity used to specify the endpoints of a ladder. This entity is functional, but has been replaced by the easier-to-use func_useableladder entity. Left in only for backwards-compatibility!\n\nTo be valid, a full sized player hull traced between the start and end points must not be obstructed at level activation time. The angle determines in which direction the player leaves the ladder if the player presses the +jump button.\n\nNote: This entity is non-functional in Counter-Strike: Source. In CS:S, use func_ladder instead.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", target: str=""):
        Entity.__init__(self, "func_ladderendpoint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Other : A ladder goes between any two func_ladderendpoints pointing at each other.
        self.target: str = target

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "target"])


class FuncLod(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1170.
    Brush-built model that fades out over a specified distance. Useful for creating world detail that doesn't need to be drawn far away, for performance reasons.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, DisappearDist: int=2000, DisappearMaxDist: int=0, Solid=0):
        Entity.__init__(self, "func_lod", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disappear Distance : Distance at which these brushes should start to fade out.
        self.DisappearDist: int = DisappearDist
        # Maximum Disappear Distance : If specified, this would be distance at which these brushes should fade out completely. If 0, it will combine the regular disappear distance with the value stored in the 'lod_TransitionDist' convar, which is 800 by default.
        self.DisappearMaxDist: int = DisappearMaxDist
        # Solid : Set whether or not these brushes should collide with other entities.
        self.Solid = Solid

        self.auto_properties.extend(["targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "DisappearDist", "DisappearMaxDist", "Solid"])


class FuncMovelinear(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3684.
    A brush entity that moves linearly along a given distance, in a given direction.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, parentname: str="", movedir: "Origin"="0 0 0", spawnflags="", startposition: float=0, speed: int=100, movedistance: float=100, blockdamage: float=0, startsound: str="", stopsound: str=""):
        Entity.__init__(self, "func_movelinear", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Please don't use any parenting inputs with func_movelinear.
        self.parentname: str = parentname
        # Move Direction (Pitch Yaw Roll) : The direction the brushes will move, when told to.
        self.movedir: "Origin" = movedir
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Position : Position of brush when spawned. The range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance).
        self.startposition: float = startposition
        # Speed : The speed that the brush moves, in inches per second.
        self.speed: int = speed
        # Move Distance : The distance from the starting point that the brush should move, in inches.
        self.movedistance: float = movedistance
        # Block Damage : The amount of damage to do to any entity that blocks the brushes, per frame.
        self.blockdamage: float = blockdamage
        # Sound played when the brush starts moving. : 
        self.startsound: str = startsound
        # Sound played when the brush stops moving. : 
        self.stopsound: str = stopsound

        self.auto_properties.extend(["targetname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "parentname", "movedir", "spawnflags", "startposition", "speed", "movedistance", "blockdamage", "startsound", "stopsound"])


class FuncNull(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3152.
    A brush entity that's immediately removed upon spawning. Useful for invisible brush lights.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str=""):
        Entity.__init__(self, "func_null", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["targetname"])


class FuncOccluder(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7692.
    A occluder brush used to manage dynamic visibility in maps. Occluders are used to dynamically determine what things are behind them, to prevent trying to draw them at all.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", StartActive=1):
        Entity.__init__(self, "func_occluder", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Initial State : 
        self.StartActive = StartActive

        self.auto_properties.extend(["targetname", "StartActive"])


class FuncPhysbox(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6888.
    A brush entity that's physically simulated.
    """
    def __init__(self, vmf_map: "ValveMap", damagefilter: str="", ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", parentname: str="", globalname: str="", propdata=0, material=0, explosion=0, gibdir: "Origin"="0 0 0", nodamageforces=0, gibmodel: str="", spawnobject=0, explodemagnitude: int=0, pressuredelay: float=0, targetname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, disableshadows=0, _minlight: str="", spawnflags="", Damagetype=0, massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, health: int=0, preferredcarryangles: "Origin"="0 0 0", notsolid=0):
        Entity.__init__(self, "func_physbox", vmf_map)


        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter


        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Prop Data : Set to the best approximation of the size and material of this entity's brushes. If set, it will override this entity's health and damage taken from various weapons. See the propdata.txt file in the scripts directory of your MOD to get a detailed list of what each entry specifies.
        self.propdata = propdata
        # Material Type : Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken.
        self.material = material
        # Gibs Direction : Used to decide which direction to throw gibs when broken.
        self.explosion = explosion
        # Precise Gib Direction : Specifies the direction to throw gibs when this breakable breaks. Be sure to select Use Precise Gib Dir in the Gibs Direction field!
        self.gibdir: "Origin" = gibdir
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Gib Model : Used by HL1Port to specify a custom gib model to break into, overriding the 'Material Type'.
        self.gibmodel: str = gibmodel
        # Spawn On Break : When broken, an entity of the selected type will be created.
        self.spawnobject = spawnobject
        # Explode Magnitude : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage.
        self.explodemagnitude: int = explodemagnitude
        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Impact Damage Type : 
        self.Damagetype = Damagetype
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Strength : Number of points of damage to take before breaking.  0 means don't break.
        self.health: int = health
        # Preferred Player-carry Angles : If the 'Use Preferred Carry Angles' spawnflag is set, this angle is the angle which the object should orient to when the player picks it up, with the physgun or +USE.
        self.preferredcarryangles: "Origin" = preferredcarryangles
        # Not solid to world : 
        self.notsolid = notsolid

        self.auto_properties.extend(["damagefilter", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "parentname", "globalname", "propdata", "material", "explosion", "gibdir", "nodamageforces", "gibmodel", "spawnobject", "explodemagnitude", "pressuredelay", "targetname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "disableshadows", "_minlight", "spawnflags", "Damagetype", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "health", "preferredcarryangles", "notsolid"])


class FuncPlatrot(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3774.
    A brush entity that moves vertically, and can rotate while doing so.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, disableshadows=0, spawnflags="", noise1: str="", noise2: str="", speed: int=50, height: int=0, rotation: int=0, _minlight: str=""):
        Entity.__init__(self, "func_platrot", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows


        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Movement Sound : The sound to play when the brush moves.
        self.noise1: str = noise1
        # Stop Sound : The sound to play when the brush stops moving.
        self.noise2: str = noise2
        # Speed of Rotation : Speed at which the brush rotates, in degrees per second.
        self.speed: int = speed
        # Travel Altitude : The vertical distance from the starting position that this platform moves. If negative, the platform will lower.
        self.height: int = height
        # Spin amount : The amount this platform should rotate as it moves, in degrees.
        self.rotation: int = rotation
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "disableshadows", "spawnflags", "noise1", "noise2", "speed", "height", "rotation", "_minlight"])


class FuncPrecipitation(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7773.
    A brush entity that creates rain and snow inside its volume.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", renderamt: int=5, rendercolor: "RGB"="100 100 100", preciptype=0):
        Entity.__init__(self, "func_precipitation", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Density (0-100%) : 
        self.renderamt: int = renderamt
        # Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Precipitation Type : 
        self.preciptype = preciptype

        self.auto_properties.extend(["targetname", "parentname", "renderamt", "rendercolor", "preciptype"])


class FuncReflectiveGlass(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8948.
    Used to produce perfectly reflective glass that renders world + entities. Typically, you want your glass brush to have nodraw on all non-reflective surfaces and you want to use a shader like lightmappedreflective in your material applied to the non-nodraw surfaces. See hl2/materials/glass/reflectiveglass001.vmt for an example. NOTE: currently, you cannot use reflective glass in scenes with water, and you can only have 1 reflective glass in your view frustum ( + pvs ) at a time.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", InputFilter=0, StartDisabled=0, disableshadows=0, spawnflags="", _minlight: str="", Solidity=0, excludednpc: str="", invert_exclusion=0, solidbsp=0, vrad_brush_cast_shadows=0):
        Entity.__init__(self, "func_reflective_glass", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Input Filter : Used to specify which inputs this entity will accept.
        self.InputFilter = InputFilter

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Solidity : Used to control the solidity/collision of these brushes.
        self.Solidity = Solidity
        # NPC class excluded from collisions : If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name.
        self.excludednpc: str = excludednpc
        # Invert NPC class exclusion : If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid.
        self.invert_exclusion = invert_exclusion
        # Solid BSP : Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush.
        self.solidbsp = solidbsp
        # Shadows : Set this if this brush casts lightmap shadows.
        self.vrad_brush_cast_shadows = vrad_brush_cast_shadows


        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "InputFilter", "StartDisabled", "disableshadows", "spawnflags", "_minlight", "Solidity", "excludednpc", "invert_exclusion", "solidbsp", "vrad_brush_cast_shadows"])


class FuncRotButton(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4040.
    A brush entity that's designed to be used for a rotating player-useable button. When used by the player, it rotates to a pressed position.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", globalname: str="", StartDisabled=0, speed: int=50, sounds=21, wait: int=3, distance: int=90, spawnflags="", _minlight: str=""):
        Entity.__init__(self, "func_rot_button", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname


        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Speed : The speed that the button rotates, in degrees per second.
        self.speed: int = speed
        # Sounds : 
        self.sounds = sounds
        # Delay Before Reset (-1 stay) : Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns.
        self.wait: int = wait
        # Distance (deg) : The amount, in degrees, that the button should rotate when it's pressed.
        self.distance: int = distance
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "globalname", "StartDisabled", "speed", "sounds", "wait", "distance", "spawnflags", "_minlight"])


class FuncRotating(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3734.
    A rotating brush entity.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, disableshadows=0, maxspeed: int=100, fanfriction: int=20, message: str="", volume: int=10, spawnflags="", _minlight: str="", dmg: int=0, solidbsp=0):
        Entity.__init__(self, "func_rotating", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Max Rotation Speed : The maximum rotation speed of the brushes, in degrees per second.
        self.maxspeed: int = maxspeed
        # Friction (0 - 100%) : The amount of rotational friction. Value must be between 0 and 100 %.
        self.fanfriction: int = fanfriction
        # Rotating sound WAV : Sound to play while rotating.
        self.message: str = message
        # Volume (10 = loudest) : The volume of the rotation sound.
        self.volume: int = volume
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Blocking Damage : Damage done to any entity that blocks the rotation, per frame.
        self.dmg: int = dmg
        # Solid Type : 
        self.solidbsp = solidbsp

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "disableshadows", "maxspeed", "fanfriction", "message", "volume", "spawnflags", "_minlight", "dmg", "solidbsp"])


class FuncSmokevolume(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4438.
    A brush entity that spawns smoke particles within its volume.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", spawnflags="", Color1: "RGB"="255 255 255", Color2: "RGB"="255 255 255", material: str="particle/particle_smokegrenade", ParticleDrawWidth: float=120, ParticleSpacingDistance: float=80, DensityRampSpeed: float=1, RotationSpeed: float=10, MovementSpeed: float=10, Density: float=1):
        Entity.__init__(self, "func_smokevolume", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Particle Color1 (R G B) : 
        self.Color1: "RGB" = Color1
        # Particle Color2 (R G B) : 
        self.Color2: "RGB" = Color2
        # Material : The material to use for the particles
        self.material: str = material
        # Particle Draw Width (units) : The size of the particles, in units/inches.
        self.ParticleDrawWidth: float = ParticleDrawWidth
        # Particle Spacing Distance (units) : The distance between the particles inside the volume. The lower the number, the denser the particles, and the more overdraw there will be. It is best to keep it as high as you can without it looking bad.
        self.ParticleSpacingDistance: float = ParticleSpacingDistance
        # Density Ramp Speed (seconds) : Time to go from density 0 to density 1, in seconds.
        self.DensityRampSpeed: float = DensityRampSpeed
        # Rotation Speed (degrees/sec) : The speed that the particles should rotate, in degrees per second.
        self.RotationSpeed: float = RotationSpeed
        # Movement Speed (units/sec) : The speed that the particles should move around, in units/inches per second.
        self.MovementSpeed: float = MovementSpeed
        # Density [0..1] : 
        self.Density: float = Density

        self.auto_properties.extend(["targetname", "spawnflags", "Color1", "Color2", "material", "ParticleDrawWidth", "ParticleSpacingDistance", "DensityRampSpeed", "RotationSpeed", "MovementSpeed", "Density"])


class FuncTanktrain(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8006.
    A moving train that follows a path of path_track entities, shoots at the player, and can be killed.\nNOTE: Build your train so that the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", target: str="", startspeed: int=100, speed: int=0, velocitytype=0, orientationtype=1, wheels: int=50, height: int=4, bank: str="0", dmg: int=0, _minlight: str="", MoveSound: str="", MovePingSound: str="", StartSound: str="", StopSound: str="", volume: int=10, MoveSoundMinPitch: int=60, MoveSoundMaxPitch: int=200, MoveSoundMinTime: float=0, MoveSoundMaxTime: float=0, health: int=100):
        Entity.__init__(self, "func_tanktrain", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # First Stop Target : The name of the first path_track in the train's path. The train 
        self.target: str = target
        # Max Speed (units / second) : The maximum speed that this train can move. 
        self.startspeed: int = startspeed
        # Initial Speed (units / second) : The speed that the train will move at after it spawns, 0 = stopped.
        self.speed: int = speed
        # Change Velocity : The method through which this train changes its velocity as it moves along the path.
        self.velocitytype = velocitytype
        # Change angles : The method through which this train changes its orientation as it moves along the path.
        self.orientationtype = orientationtype
        # Distance Between the Wheels : Used for turning and stopping.
        self.wheels: int = wheels
        # Height above track : The height above the track that this train moves.
        self.height: int = height
        # Bank Angle on Turns : 
        self.bank: str = bank
        # Damage on Crush : The amount of damage this train does to entities that block it.
        self.dmg: int = dmg
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Move Sound : A sound that is played (and looped) while the train is moving.
        self.MoveSound: str = MoveSound
        # Move Ping Sound : A sound that is played more frequently as the train speeds up.
        self.MovePingSound: str = MovePingSound
        # Start Sound : A sound played when the train starts moving.
        self.StartSound: str = StartSound
        # Stop Sound : A sound played when the train stops moving.
        self.StopSound: str = StopSound
        # Volume (10 = loudest) : 
        self.volume: int = volume
        # Min pitch (1-255, > 100 = higher) : The sound pitch value that the train will approach as it comes to a stop.
        self.MoveSoundMinPitch: int = MoveSoundMinPitch
        # Max pitch (1-255, > 100 = higher) : The sound pitch value that the train will approach as it approaches its 
        self.MoveSoundMaxPitch: int = MoveSoundMaxPitch
        # Min move sound interval : Minimum interval at which to play the move ping sound.
        self.MoveSoundMinTime: float = MoveSoundMinTime
        # Max move sound interval : Maximum interval at which to play the move ping sound.
        self.MoveSoundMaxTime: float = MoveSoundMaxTime

        # Health : 
        self.health: int = health

        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "target", "startspeed", "speed", "velocitytype", "orientationtype", "wheels", "height", "bank", "dmg", "_minlight", "MoveSound", "MovePingSound", "StartSound", "StopSound", "volume", "MoveSoundMinPitch", "MoveSoundMaxPitch", "MoveSoundMinTime", "MoveSoundMaxTime", "health"])


class FuncTrackautochange(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7963.
    An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", movesnd=0, stopsnd=0, volume: str="0.85", height: int=0, spawnflags="", rotation: int=0, train: str="", toptrack: str="", bottomtrack: str="", speed: int=0, _minlight: str=""):
        Entity.__init__(self, "func_trackautochange", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Move Sound : The sound played whenever the platform starts moving.
        self.movesnd = movesnd
        # Stop Sound : The sound played when the platform stops moving.
        self.stopsnd = stopsnd
        # Sound Volume 0.0 - 1.0 : 
        self.volume: str = volume

        # Travel Altitude : The vertical height above the track that the train moves. Negative values moves the train below.
        self.height: int = height
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Spin amount : The amount this platform should rotate as it moves, in degrees.
        self.rotation: int = rotation
        # Train to Switch : 
        self.train: str = train
        # Top Track : 
        self.toptrack: str = toptrack
        # Bottom Track : 
        self.bottomtrack: str = bottomtrack
        # Move/Rotate Speed : 
        self.speed: int = speed

        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "movesnd", "stopsnd", "volume", "height", "spawnflags", "rotation", "train", "toptrack", "bottomtrack", "speed", "_minlight"])


class FuncTrackchange(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7974.
    An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", movesnd=0, stopsnd=0, volume: str="0.85", height: int=0, spawnflags="", rotation: int=0, train: str="", toptrack: str="", bottomtrack: str="", speed: int=0, _minlight: str=""):
        Entity.__init__(self, "func_trackchange", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Move Sound : The sound played whenever the platform starts moving.
        self.movesnd = movesnd
        # Stop Sound : The sound played when the platform stops moving.
        self.stopsnd = stopsnd
        # Sound Volume 0.0 - 1.0 : 
        self.volume: str = volume

        # Travel Altitude : The vertical height above the track that the train moves. Negative values moves the train below.
        self.height: int = height
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Spin amount : The amount this platform should rotate as it moves, in degrees.
        self.rotation: int = rotation
        # Train to Switch : 
        self.train: str = train
        # Top Track : 
        self.toptrack: str = toptrack
        # Bottom Track : 
        self.bottomtrack: str = bottomtrack
        # Move/Rotate Speed : 
        self.speed: int = speed

        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "movesnd", "stopsnd", "volume", "height", "spawnflags", "rotation", "train", "toptrack", "bottomtrack", "speed", "_minlight"])


class FuncTracktrain(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7982.
    A moving platform that the player can ride. It follows a path of path_track entities.\nNOTE: Build your train so that the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", target: str="", startspeed: int=100, speed: int=0, velocitytype=0, orientationtype=1, wheels: int=50, height: int=4, bank: str="0", dmg: int=0, _minlight: str="", MoveSound: str="", MovePingSound: str="", StartSound: str="", StopSound: str="", volume: int=10, MoveSoundMinPitch: int=60, MoveSoundMaxPitch: int=200, MoveSoundMinTime: float=0, MoveSoundMaxTime: float=0, ManualSpeedChanges=0, ManualAccelSpeed: float=0, ManualDecelSpeed: float=0):
        Entity.__init__(self, "func_tracktrain", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # First Stop Target : The name of the first path_track in the train's path. The train 
        self.target: str = target
        # Max Speed (units / second) : The maximum speed that this train can move. 
        self.startspeed: int = startspeed
        # Initial Speed (units / second) : The speed that the train will move at after it spawns, 0 = stopped.
        self.speed: int = speed
        # Change Velocity : The method through which this train changes its velocity as it moves along the path.
        self.velocitytype = velocitytype
        # Change angles : The method through which this train changes its orientation as it moves along the path.
        self.orientationtype = orientationtype
        # Distance Between the Wheels : Used for turning and stopping.
        self.wheels: int = wheels
        # Height above track : The height above the track that this train moves.
        self.height: int = height
        # Bank Angle on Turns : 
        self.bank: str = bank
        # Damage on Crush : The amount of damage this train does to entities that block it.
        self.dmg: int = dmg
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Move Sound : A sound that is played (and looped) while the train is moving.
        self.MoveSound: str = MoveSound
        # Move Ping Sound : A sound that is played more frequently as the train speeds up.
        self.MovePingSound: str = MovePingSound
        # Start Sound : A sound played when the train starts moving.
        self.StartSound: str = StartSound
        # Stop Sound : A sound played when the train stops moving.
        self.StopSound: str = StopSound
        # Volume (10 = loudest) : 
        self.volume: int = volume
        # Min pitch (1-255, > 100 = higher) : The sound pitch value that the train will approach as it comes to a stop.
        self.MoveSoundMinPitch: int = MoveSoundMinPitch
        # Max pitch (1-255, > 100 = higher) : The sound pitch value that the train will approach as it approaches its 
        self.MoveSoundMaxPitch: int = MoveSoundMaxPitch
        # Min move sound interval : Minimum interval at which to play the move ping sound.
        self.MoveSoundMinTime: float = MoveSoundMinTime
        # Max move sound interval : Maximum interval at which to play the move ping sound.
        self.MoveSoundMaxTime: float = MoveSoundMaxTime

        # Manual Train Speed : Train Speed is controlled through IO, handles accel, decel times.
        self.ManualSpeedChanges = ManualSpeedChanges
        # Manual Accel Speed : Units per second to accelerate to target speed.
        self.ManualAccelSpeed: float = ManualAccelSpeed
        # Manual Decel Speed : Units per second to decelerate to target speed.
        self.ManualDecelSpeed: float = ManualDecelSpeed

        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "target", "startspeed", "speed", "velocitytype", "orientationtype", "wheels", "height", "bank", "dmg", "_minlight", "MoveSound", "MovePingSound", "StartSound", "StopSound", "volume", "MoveSoundMinPitch", "MoveSoundMaxPitch", "MoveSoundMinTime", "MoveSoundMaxTime", "ManualSpeedChanges", "ManualAccelSpeed", "ManualDecelSpeed"])


class FuncTraincontrols(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8017.
    When used by the player, this entity overrides the player's controls to let them drive a train.
    """
    def __init__(self, vmf_map: "ValveMap", parentname: str="", globalname: str="", target: str=""):
        Entity.__init__(self, "func_traincontrols", vmf_map)

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Train Name : The target train to control when the player uses these controls.
        self.target: str = target

        self.auto_properties.extend(["parentname", "globalname", "target"])


class FuncUseableladder(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1472.
    A Half-Life 2 ladder. Handles player auto mount/unmount, as well as +use to get onto the ladder. \n\nSee also 'info_ladder_dismount', used to specify ladder auto-dismount points.\n\nNote: This entity is non-functional in Counter-Strike: Source. Use func_ladder instead.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", point0: "Origin"="", point1: "Origin"="", StartDisabled=0, ladderSurfaceProperties: str=""):
        Entity.__init__(self, "func_useableladder", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start : Ladder end point.
        self.point0: "Origin" = point0
        # End : Ladder end point.
        self.point1: "Origin" = point1
        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Surface properties (optional) : 
        self.ladderSurfaceProperties: str = ladderSurfaceProperties

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags", "point0", "point1", "StartDisabled", "ladderSurfaceProperties"])


class FuncViscluster(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7762.
    Any leaves touching this brush will have their vis merged together into a single cluster.  Use multiple func_viscluster entities to reduce vis time
    """
    def __init__(self, vmf_map: "ValveMap"):
        Entity.__init__(self, "func_viscluster", vmf_map)


class FuncWall(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1544.
    Legacy support. Use func_brush instead.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", disableshadows=0, _minlight: str=""):
        Entity.__init__(self, "func_wall", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        self.auto_properties.extend(["targetname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "disableshadows", "_minlight"])


class FuncWallToggle(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7787.
    A brush entity that can be toggled on/off. When off, the brush will be non-solid and invisible. Does not cast lightmap shadows.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, globalname: str="", disableshadows=0, _minlight: str="", spawnflags=""):
        Entity.__init__(self, "func_wall_toggle", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "globalname", "disableshadows", "_minlight", "spawnflags"])


class FuncWaterAnalog(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3713.
    A water brush entity that moves linearly along a given distance, in a given direction
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", movedir: "Origin"="0 0 0", startposition: float=0, speed: int=100, movedistance: float=100, startsound: str="", stopsound: str="", WaveHeight: str="3.0"):
        Entity.__init__(self, "func_water_analog", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Move Direction (Pitch Yaw Roll) : The direction the water will move, when told to 'Open'.
        self.movedir: "Origin" = movedir
        # Start Position : Position of the water brush when spawned. The range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance).
        self.startposition: float = startposition
        # Speed : The speed that the water brush moves, in inches per second.
        self.speed: int = speed
        # Move Distance : The distance from the starting point that the water brush should move, in inches.
        self.movedistance: float = movedistance
        # Sound played when the water brush starts moving. : 
        self.startsound: str = startsound
        # Sound played when the water brush stops moving. : 
        self.stopsound: str = stopsound
        # Wave Height : 
        self.WaveHeight: str = WaveHeight

        self.auto_properties.extend(["targetname", "parentname", "origin", "movedir", "startposition", "speed", "movedistance", "startsound", "stopsound", "WaveHeight"])


class GameConvarMod(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6714.
    Mods cvars
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", UseServer=0, spawnflags=""):
        Entity.__init__(self, "game_convar_mod", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # ConVars : The convars to modify. Multiple cvars can be modded with ';', e.g. 'host_timescale 0.5; npc_alyx_interact_manhacks 1'
        self.target: str = target
        # Command from Server : Mods convars directly from the server instead of acting as if the convars were typed into the local player's console, similar to using point_servercommand as opposed to point_clientcommand. Required to function in MP games.
        self.UseServer = UseServer
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "target", "UseServer", "spawnflags"])


class GameEnd(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2699.
    An entity that ends a game.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "game_end", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class GameGibManager(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1330.
    An entity to control the number of gibs in the world, for performance reasons.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", maxpieces: int=-1, maxpiecesdx8: int=-1, allownewgibs=0):
        Entity.__init__(self, "game_gib_manager", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Max Gib Count : Sets the max number of gib that can be spawned at a time. (-1=no limit)
        self.maxpieces: int = maxpieces
        # Max Gib Count On DX8 : Sets the max number of gib that can be spawned at a time under DX8. (-1=use Max Gib Count setting)
        self.maxpiecesdx8: int = maxpiecesdx8
        # Allow New Gibs To Spawn : If true, when the max gib count is reached, oldest gibs are removed as new gibs spawn. If false, new gibs will not be spawned once the gib limit is reached.
        self.allownewgibs = allownewgibs

        self.auto_properties.extend(["origin", "targetname", "maxpieces", "maxpiecesdx8", "allownewgibs"])


class GameGlobalvars(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5614.
    Outputs a few global variables when requested.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0):
        Entity.__init__(self, "game_globalvars", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled


        self.auto_properties.extend(["origin", "targetname", "StartDisabled"])


class GameMetadata(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2783.
    An entity that provides metadata for things like Discord.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", SetRPCState: str="", SetRPCDetails: str=""):
        Entity.__init__(self, "game_metadata", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # RPC State : Sets the 'state' that should be reported to rich presence clients like Discord. Shows the mod's name from gameinfo.txt by default.
        self.SetRPCState: str = SetRPCState
        # RPC Details : Sets the 'details' that should be reported to rich presence clients like Discord. Shows the map being played by default.
        self.SetRPCDetails: str = SetRPCDetails

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "SetRPCState", "SetRPCDetails"])


class GamePlayerEquip(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2707.
    An entity that gives equipment to the player who activates it. To use, add new keys to this entity, where each key is the classname of a weapon/item, and the corresponding value is the number of those weapons/items to give to the player who uses this entity. If the 'Use Only' spawnflag isn't set, then players can just touch this entity to get the equipment.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags=""):
        Entity.__init__(self, "game_player_equip", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "spawnflags"])


class GamePlayerTeam(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2717.
    An entity that changes the team of the player who activates it.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", target: str=""):
        Entity.__init__(self, "game_player_team", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # game_team_master to use : 
        self.target: str = target

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "target"])


class GameRagdollManager(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1313.
    An entity to control the number of ragdolls in the world, for performance reasons.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", MaxRagdollCount: int=-1, MaxRagdollCountDX8: int=-1, SaveImportant=0):
        Entity.__init__(self, "game_ragdoll_manager", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Max Ragdoll Count : Sets the max number of ragdolls that can be in the world at a time (if they are flagged to fade). Set to -1 if you want to use the default value (g_ragdoll_maxcount).
        self.MaxRagdollCount: int = MaxRagdollCount
        # Max Ragdoll Count DX8 : Sets the max number of ragdolls that can be in the world at a time on DX8 hardware (if they are flagged to fade). Set to -1 if you want to use the 'Max Ragdoll Count' value.
        self.MaxRagdollCountDX8: int = MaxRagdollCountDX8
        # Save Important Ragdolls : Should the ragdoll manager make sure ally ragdolls aren't deleted?
        self.SaveImportant = SaveImportant

        self.auto_properties.extend(["origin", "targetname", "MaxRagdollCount", "MaxRagdollCountDX8", "SaveImportant"])


class GameScore(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2730.
    An entity that awards/deducts points from the player who activates it.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", points: int=1):
        Entity.__init__(self, "game_score", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Points to add (+/-) : 
        self.points: int = points

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "points"])


class GameText(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2746.
    An entity that displays text on player's screens.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", message: str="", x: str="-1", y: str="-1", effect=0, color: "RGB"="100 100 100", color2: "RGB"="240 110 0", fadein: str="1.5", fadeout: str="0.5", holdtime: str="1.2", fxtime: str="0.25", channel=1, master: str=""):
        Entity.__init__(self, "game_text", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Message Text : Message to display onscreen. Use '/n' for newlines.
        self.message: str = message
        # X (0 - 1.0 = left to right) (-1 centers) : Horizontal position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the far left of the screen and 1 is the far right. -1 centers the text.
        self.x: str = x
        # Y (0 - 1.0 = top to bottom) (-1 centers) : Vertical position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the top of the screen and 1 is the bottom. -1 centers the text.
        self.y: str = y
        # Text Effect : 
        self.effect = effect
        # Color1 : 
        self.color: "RGB" = color
        # Color2 : 
        self.color2: "RGB" = color2
        # Fade in Time (or character scan time) : The time it should take for the text to fully fade in.
        self.fadein: str = fadein
        # Fade Out Time : The time it should take for the text to fade out, after the hold time has expired.
        self.fadeout: str = fadeout
        # Hold Time : The time the text should stay onscreen, after fading in, before it begins to fade out.
        self.holdtime: str = holdtime
        # Scan time (scan effect only) : If the 'Text Effect' is set to Scan Out, this is the time it should take to scan out all the letters in the text.
        self.fxtime: str = fxtime
        # Text Channel : You can have up to four individual game_text messages onscreen at once, stored in channels. Select which channel this text should be placed in, which will overwrite any active message already in that channel.
        self.channel = channel
        # Master : Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate.
        self.master: str = master

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "message", "x", "y", "effect", "color", "color2", "fadein", "fadeout", "holdtime", "fxtime", "channel", "master"])


class GameUi(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2921.
    An entity used to override player input when the player is looking at it.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", FieldOfView: float="-1.0"):
        Entity.__init__(self, "game_ui", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # FieldOfView : The amount of tolerance in the view checking when determining whether the player's input is still under control. 1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions. If the player isn't within the tolerance, the player regains control.
        self.FieldOfView: float = FieldOfView

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "FieldOfView"])


class GameWeaponManager(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2688.
    An entity used to limit the number of a particular weapon type in the world. Useful in places where NPCs are spawning rapidly, dying, and dropping weapons.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", weaponname: str="", maxpieces: int=0, ammomod: float=1):
        Entity.__init__(self, "game_weapon_manager", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Weapon Classname : Classname of the weapon type to limit.
        self.weaponname: str = weaponname
        # Max Allowed in Level : The maximum amount of the specified weapon type allowed in the world.
        self.maxpieces: int = maxpieces
        # Ammo modifier : Modifier for ammount of ammo dropped by a weapon.
        self.ammomod: float = ammomod

        self.auto_properties.extend(["origin", "targetname", "weaponname", "maxpieces", "ammomod"])


class GameZonePlayer(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3033.
    An entity used to count the number of players within a zone.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str=""):
        Entity.__init__(self, "game_zone_player", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname


        self.auto_properties.extend(["targetname", "parentname"])


class Gibshooter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2322.
    An entity that shoots out gibs. Style of body part depends on language type.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: str="0 0 0", m_iGibs: int=3, delay: str="0", gibangles: str="0 0 0", gibanglevelocity: str="0", m_flVelocity: int=200, m_flVariance: str="0.15", m_flGibLife: str="4", lightingorigin: str="", spawnflags=""):
        Entity.__init__(self, "gibshooter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Gib Direction (Pitch Yaw Roll) : The direction the gibs will fly.
        self.angles: str = angles
        # Number of Gibs : Total number of gibs to shoot each time it's activated.
        self.m_iGibs: int = m_iGibs
        # Delay between shots : Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once.
        self.delay: str = delay
        # Gib Angles (Pitch Yaw Roll) : The orientation of the spawned gibs.
        self.gibangles: str = gibangles
        # Max angular velocity : How fast (degrees/sec) the gib pieces should spin. They will spin on x and y axis at between 10% and 100% of this speed.
        self.gibanglevelocity: str = gibanglevelocity
        # Gib Velocity : Speed of the fired gibs
        self.m_flVelocity: int = m_flVelocity
        # Course Variance : How much variance in the direction gibs are fired.
        self.m_flVariance: str = m_flVariance
        # Gib Life : Time in seconds for gibs to live +/- 5%
        self.m_flGibLife: str = m_flGibLife
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins.
        self.lightingorigin: str = lightingorigin
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "m_iGibs", "delay", "gibangles", "gibanglevelocity", "m_flVelocity", "m_flVariance", "m_flGibLife", "lightingorigin", "spawnflags"])


class HammerUpdateignorelist(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4953.
    Specifies entities that are to be ignored by the hammer_update_safe_entities console command. Enter the targetnames of entities that you want to exclude into the list of fields here. Several of these may exist in a map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", IgnoredName01: str="", IgnoredName02: str="", IgnoredName03: str="", IgnoredName04: str="", IgnoredName05: str="", IgnoredName06: str="", IgnoredName07: str="", IgnoredName08: str="", IgnoredName09: str="", IgnoredName10: str="", IgnoredName11: str="", IgnoredName12: str="", IgnoredName13: str="", IgnoredName14: str="", IgnoredName15: str="", IgnoredName16: str=""):
        Entity.__init__(self, "hammer_updateignorelist", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # IgnoredName 01 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName01: str = IgnoredName01
        # IgnoredName 02 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName02: str = IgnoredName02
        # IgnoredName 03 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName03: str = IgnoredName03
        # IgnoredName 04 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName04: str = IgnoredName04
        # IgnoredName 05 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName05: str = IgnoredName05
        # IgnoredName 06 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName06: str = IgnoredName06
        # IgnoredName 07 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName07: str = IgnoredName07
        # IgnoredName 08 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName08: str = IgnoredName08
        # IgnoredName 09 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName09: str = IgnoredName09
        # IgnoredName 10 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName10: str = IgnoredName10
        # IgnoredName 11 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName11: str = IgnoredName11
        # IgnoredName 12 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName12: str = IgnoredName12
        # IgnoredName 13 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName13: str = IgnoredName13
        # IgnoredName 14 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName14: str = IgnoredName14
        # IgnoredName 15 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName15: str = IgnoredName15
        # IgnoredName 16 : Do not send this entity's information back to hammer during hammer_update_safe_entities
        self.IgnoredName16: str = IgnoredName16

        self.auto_properties.extend(["origin", "targetname", "IgnoredName01", "IgnoredName02", "IgnoredName03", "IgnoredName04", "IgnoredName05", "IgnoredName06", "IgnoredName07", "IgnoredName08", "IgnoredName09", "IgnoredName10", "IgnoredName11", "IgnoredName12", "IgnoredName13", "IgnoredName14", "IgnoredName15", "IgnoredName16"])


class InfoCameraLink(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8403.
    An entity that can use point_cameras to render images for materials used by entities. To author the material, use the special identifier _rt_Camera for the $baseTexture (or whatever texture you want, like envmap, etc.) in the .vmt then connect the 'target' field to the entity which uses that material, and the 'PointCamera' field to the point_camera you want to have appear on that entity's material
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", PointCamera: str=""):
        Entity.__init__(self, "info_camera_link", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity Whose Material Uses _rt_camera : 
        self.target: str = target
        # Camera Name : The name of a point_camera entity in the map that the material should be rendered from.
        self.PointCamera: str = PointCamera

        self.auto_properties.extend(["origin", "targetname", "target", "PointCamera"])


class InfoConstraintAnchor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7027.
    An entity used to attach constraints to a local position on an entity. Usually constraints will attach to the center of mass of an object. Attach the desired constraint to this entity, and then parent this entity to the entity you want the constraint to apply to.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", massScale: float="1"):
        Entity.__init__(self, "info_constraint_anchor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Amount to scale the mass of this body in the constraint solver : 
        self.massScale: float = massScale

        self.auto_properties.extend(["origin", "targetname", "parentname", "massScale"])


class InfoHint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3351.
    A hint that is not used for navigation. They don't go into the nodegraph, nor do they fall to the ground. Use these to provide some spatial context for NPCs, such as 'look here if you can't find the player' or 'throw rocks at this spot'.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", nodeid: int="", spawnflags="", hinttype=0, hintactivity: str="", nodeFOV=180, StartHintDisabled=0, Group: str="", TargetNode: int=-1, IgnoreFacing=2, MinimumState=1, MaximumState=3):
        Entity.__init__(self, "info_hint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.nodeid: int = nodeid

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Hint : 
        self.hinttype = hinttype
        # Hint Activity : Activity associated with this hint node. Various parts of the NPC AI play this activity at times. i.e. Actbusy nodes will play this activity when an NPC acts busy on the node.
        self.hintactivity: str = hintactivity
        # Node FOV : Imagine this node requires that an NPC be in the node's field of view in order to use this hint.
        self.nodeFOV = nodeFOV
        # Start Hint Disabled : 
        self.StartHintDisabled = StartHintDisabled
        # Hint Group : If specified, gives the hint a specific group name. NPCs may refuse to use hint nodes that don't match their hint group. Also useful for hints that need to be logically grouped together. Wildcards are supported.
        self.Group: str = Group
        # Target node : The node ID of an associated target node, if any. This can be used if the hint node acts as a path_corner, or for overriding jumping permission.
        self.TargetNode: int = TargetNode
        # Ignore Facing : Don't pay attention to the facing of the node. May not apply to a given hint type.
        self.IgnoreFacing = IgnoreFacing
        # Minimum State : Require an NPC have a minimum state to use the hint.
        self.MinimumState = MinimumState
        # Maximum State : Require an NPC have a maximum state to use the hint.
        self.MaximumState = MaximumState


        self.auto_properties.extend(["origin", "targetname", "angles", "nodeid", "spawnflags", "hinttype", "hintactivity", "nodeFOV", "StartHintDisabled", "Group", "TargetNode", "IgnoreFacing", "MinimumState", "MaximumState"])


class InfoIntermission(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3136.
    An entity that defines an intermission spot where dead players will float until they respawn.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", target: str=""):
        Entity.__init__(self, "info_intermission", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Entity to look at : Name of entity that dead players will face while in intermission at this spot.
        self.target: str = target

        self.auto_properties.extend(["origin", "target"])


class InfoLadderDismount(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1516.
    An entity to handle endpoints for multiple ladders that are too close to each other.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", target: str=""):
        Entity.__init__(self, "info_ladder_dismount", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # LadderName : If multiple ladders are near multiple endpoints, use this to stop them from interfering with each other.
        self.target: str = target

        self.auto_properties.extend(["origin", "parentname", "target"])


class InfoLandmark(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3142.
    An entity that acts as a landmark for transitions to another level. There should be a corresponding info_landmark entity in the next map. Entities will be transitioned to the next level relative to the info_landmark entities.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "info_landmark", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class InfoLighting(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3280.
    An entity that can be used to change the lighting origin of a prop_static. Set the prop_static's Lighting Origin to point at this entity to make the prop_static light as if it was at the info_lighting's origin. Good for prop_static entities that are embedded in world geometry (like rocks/windows/etc).
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "info_lighting", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class InfoMassCenter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7034.
    An entity that overrides the mass center of the target physics prop, or func_physbox, by moving it to the info_mass_center's location.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", target: str=""):
        Entity.__init__(self, "info_mass_center", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Target object : The entity whose mass center will be overridden.
        self.target: str = target

        self.auto_properties.extend(["origin", "target"])


class InfoNoDynamicShadow(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3081.
    Use this entity to mark surfaces that shouldn't receive dynamic shadows. Useful to apply to walls and floors where shadows are drawn improperly, giving away the location of enemies.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", sides=""):
        Entity.__init__(self, "info_no_dynamic_shadow", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Brush faces : 
        self.sides = sides

        self.auto_properties.extend(["origin", "sides"])


class InfoNode(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3299.
    A navigation node for ground moving NPCs. Navigation nodes are baked into the nodegraph so that NPCs can move to them. Ground nodes fall to the ground when they spawn.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", nodeid: int="", spawnflags=""):
        Entity.__init__(self, "info_node", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # TODO: Replace this filler. : 
        self.nodeid: int = nodeid

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "nodeid", "spawnflags"])


class InfoNodeAir(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3334.
    A navigation node for flying NPCs. Air navigation nodes are baked into the nodegraph so that NPCs can move to them. Air nodes do not fall to the ground when they spawn.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", nodeid: int="", nodeheight: int=0):
        Entity.__init__(self, "info_node_air", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # TODO: Replace this filler. : 
        self.nodeid: int = nodeid

        # NodeHeight : 
        self.nodeheight: int = nodeheight

        self.auto_properties.extend(["origin", "nodeid", "nodeheight"])


class InfoNodeAirHint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3341.
    A navigation node for flying NPCs that includes some context information for NPCs that are interested in it. The hint might indicate a window that could be looked into, or an item of interest that could be commented on. Many hint nodes are NPC-specific, so it's helpful to use naming conventions like 'Crow: Fly to point' in the hint choices list. The angles of a hint node indicate what direction the NPC should face to perform the hint behavior.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", nodeid: int="", spawnflags="", hinttype=0, hintactivity: str="", nodeFOV=180, StartHintDisabled=0, Group: str="", TargetNode: int=-1, IgnoreFacing=2, MinimumState=1, MaximumState=3, nodeheight: int=0):
        Entity.__init__(self, "info_node_air_hint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.nodeid: int = nodeid

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Hint : 
        self.hinttype = hinttype
        # Hint Activity : Activity associated with this hint node. Various parts of the NPC AI play this activity at times. i.e. Actbusy nodes will play this activity when an NPC acts busy on the node.
        self.hintactivity: str = hintactivity
        # Node FOV : Imagine this node requires that an NPC be in the node's field of view in order to use this hint.
        self.nodeFOV = nodeFOV
        # Start Hint Disabled : 
        self.StartHintDisabled = StartHintDisabled
        # Hint Group : If specified, gives the hint a specific group name. NPCs may refuse to use hint nodes that don't match their hint group. Also useful for hints that need to be logically grouped together. Wildcards are supported.
        self.Group: str = Group
        # Target node : The node ID of an associated target node, if any. This can be used if the hint node acts as a path_corner, or for overriding jumping permission.
        self.TargetNode: int = TargetNode
        # Ignore Facing : Don't pay attention to the facing of the node. May not apply to a given hint type.
        self.IgnoreFacing = IgnoreFacing
        # Minimum State : Require an NPC have a minimum state to use the hint.
        self.MinimumState = MinimumState
        # Maximum State : Require an NPC have a maximum state to use the hint.
        self.MaximumState = MaximumState

        # NodeHeight : 
        self.nodeheight: int = nodeheight

        self.auto_properties.extend(["origin", "angles", "targetname", "nodeid", "spawnflags", "hinttype", "hintactivity", "nodeFOV", "StartHintDisabled", "Group", "TargetNode", "IgnoreFacing", "MinimumState", "MaximumState", "nodeheight"])


class InfoNodeClimb(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3493.
    A climb-node for AI navigation. Only usable by NPCs that can climb.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", nodeid: int="", spawnflags="", hinttype=0, hintactivity: str="", nodeFOV=180, StartHintDisabled=0, Group: str="", TargetNode: int=-1, IgnoreFacing=2, MinimumState=1, MaximumState=3):
        Entity.__init__(self, "info_node_climb", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.nodeid: int = nodeid

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Hint : 
        self.hinttype = hinttype
        # Hint Activity : Activity associated with this hint node. Various parts of the NPC AI play this activity at times. i.e. Actbusy nodes will play this activity when an NPC acts busy on the node.
        self.hintactivity: str = hintactivity
        # Node FOV : Imagine this node requires that an NPC be in the node's field of view in order to use this hint.
        self.nodeFOV = nodeFOV
        # Start Hint Disabled : 
        self.StartHintDisabled = StartHintDisabled
        # Hint Group : If specified, gives the hint a specific group name. NPCs may refuse to use hint nodes that don't match their hint group. Also useful for hints that need to be logically grouped together. Wildcards are supported.
        self.Group: str = Group
        # Target node : The node ID of an associated target node, if any. This can be used if the hint node acts as a path_corner, or for overriding jumping permission.
        self.TargetNode: int = TargetNode
        # Ignore Facing : Don't pay attention to the facing of the node. May not apply to a given hint type.
        self.IgnoreFacing = IgnoreFacing
        # Minimum State : Require an NPC have a minimum state to use the hint.
        self.MinimumState = MinimumState
        # Maximum State : Require an NPC have a maximum state to use the hint.
        self.MaximumState = MaximumState


        self.auto_properties.extend(["origin", "targetname", "angles", "nodeid", "spawnflags", "hinttype", "hintactivity", "nodeFOV", "StartHintDisabled", "Group", "TargetNode", "IgnoreFacing", "MinimumState", "MaximumState"])


class InfoNodeHint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3318.
    A navigation node for ground moving NPCs that includes some context information for NPCs that are interested in it. The hint might indicate a window that could be looked out of, or an item of interest that could be commented on. Many hint nodes are NPC-specific, so it's helpful to use naming conventions like 'Crow: Fly to point' in the hint choices list. The angles of a hint node indicate what direction the NPC should face to perform the hint behavior.\n\nIt's important to understand the distinction between scripts, such as scripted_sequence and scripted_schedule, and info_hint entities. Scripts summon NPCs to specific cue points to play their parts, while hints provide context information to the AI that they use to perform their behaviors. Hints require code support in the NPC, while scripts are generic and may require only animations to play. Use a hint if the behavior is driven by the AI, use a script if the behavior is driven by the map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", nodeid: int="", spawnflags="", hinttype=0, hintactivity: str="", nodeFOV=180, StartHintDisabled=0, Group: str="", TargetNode: int=-1, IgnoreFacing=2, MinimumState=1, MaximumState=3):
        Entity.__init__(self, "info_node_hint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.nodeid: int = nodeid

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Hint : 
        self.hinttype = hinttype
        # Hint Activity : Activity associated with this hint node. Various parts of the NPC AI play this activity at times. i.e. Actbusy nodes will play this activity when an NPC acts busy on the node.
        self.hintactivity: str = hintactivity
        # Node FOV : Imagine this node requires that an NPC be in the node's field of view in order to use this hint.
        self.nodeFOV = nodeFOV
        # Start Hint Disabled : 
        self.StartHintDisabled = StartHintDisabled
        # Hint Group : If specified, gives the hint a specific group name. NPCs may refuse to use hint nodes that don't match their hint group. Also useful for hints that need to be logically grouped together. Wildcards are supported.
        self.Group: str = Group
        # Target node : The node ID of an associated target node, if any. This can be used if the hint node acts as a path_corner, or for overriding jumping permission.
        self.TargetNode: int = TargetNode
        # Ignore Facing : Don't pay attention to the facing of the node. May not apply to a given hint type.
        self.IgnoreFacing = IgnoreFacing
        # Minimum State : Require an NPC have a minimum state to use the hint.
        self.MinimumState = MinimumState
        # Maximum State : Require an NPC have a maximum state to use the hint.
        self.MaximumState = MaximumState


        self.auto_properties.extend(["origin", "targetname", "angles", "nodeid", "spawnflags", "hinttype", "hintactivity", "nodeFOV", "StartHintDisabled", "Group", "TargetNode", "IgnoreFacing", "MinimumState", "MaximumState"])


class InfoNodeLink(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3358.
    A dynamic connection between two navigation nodes. You specify the node IDs of the start and end nodes, and then you can use entity I/O to turn on and off the connection. This could be used to create or destroy a connection in the nodegraph because of some event in your map (a bridge being created/destroyed, etc).
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartNode: int="", EndNode: int="", initialstate=1, linktype=1, AllowUse: str="", InvertAllow=0, spawnflags=""):
        Entity.__init__(self, "info_node_link", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start node ID : The node ID of one end of the node connection.
        self.StartNode: int = StartNode
        # End node ID : The node ID of one end of the node connection.
        self.EndNode: int = EndNode
        # Initial State : 
        self.initialstate = initialstate
        # Type of Connection : 
        self.linktype = linktype
        # Allow Pass When Off : Entity or class to allow passage even when node is off
        self.AllowUse: str = AllowUse
        # Invert exclusion rules : Allowed entity is the only entity NOT allowed when this is set to 'yes'. The link must still be disabled for exclusion rules to apply.
        self.InvertAllow = InvertAllow
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "StartNode", "EndNode", "initialstate", "linktype", "AllowUse", "InvertAllow", "spawnflags"])


class InfoNodeLinkController(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3446.
    An entity that controls all connections between nodes that intersect the controller's volume. This allows for mass enabling/disabling of all node connections through a volume.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", mins: "Origin"="-8 -32 -36", maxs: "Origin"="8 32 36", initialstate=1, useairlinkradius=0, AllowUse: str="", InvertAllow=0):
        Entity.__init__(self, "info_node_link_controller", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Mins : 
        self.mins: "Origin" = mins
        # Maxs : 
        self.maxs: "Origin" = maxs
        # Initial State : 
        self.initialstate = initialstate
        # Use Larger Radius (for air links) : Set this to 'Yes' if this controller is intended to control air links. 
        self.useairlinkradius = useairlinkradius
        # Allow Pass When Off : Entity or class to allow passage even when node is off
        self.AllowUse: str = AllowUse
        # Invert exclusion rules : Allowed entity is the only entity NOT allowed when this is set to 'yes'
        self.InvertAllow = InvertAllow

        self.auto_properties.extend(["origin", "targetname", "mins", "maxs", "initialstate", "useairlinkradius", "AllowUse", "InvertAllow"])


class InfoNodeLinkFiltered(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3421.
    A variant of info_node_link that uses an entity filter. Only entities that pass the specified filter can use this link. While disabled, the filter is disregarded and filtering is handed to the regular exclusion rules.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartNode: int="", EndNode: int="", initialstate=1, linktype=1, AllowUse: str="", InvertAllow=0, spawnflags="", damagefilter: str="", Usage=0):
        Entity.__init__(self, "info_node_link_filtered", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start node ID : The node ID of one end of the node connection.
        self.StartNode: int = StartNode
        # End node ID : The node ID of one end of the node connection.
        self.EndNode: int = EndNode
        # Initial State : 
        self.initialstate = initialstate
        # Type of Connection : 
        self.linktype = linktype
        # Allow Pass When Off : Entity or class to allow passage even when node is off
        self.AllowUse: str = AllowUse
        # Invert exclusion rules : Allowed entity is the only entity NOT allowed when this is set to 'yes'. The link must still be disabled for exclusion rules to apply.
        self.InvertAllow = InvertAllow
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Link Filter : Name of the filter entity that controls which entities can use this link.
        self.damagefilter: str = damagefilter
        # Usage : Causes the link to use slightly different behavior.
        self.Usage = Usage

        self.auto_properties.extend(["origin", "targetname", "StartNode", "EndNode", "initialstate", "linktype", "AllowUse", "InvertAllow", "spawnflags", "damagefilter", "Usage"])


class InfoNodeLinkLogic(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3437.
    A variant of info_node_link that fires outputs when a NPC tries to use it. Otherwise functions identically to a regular info_node_link.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartNode: int="", EndNode: int="", initialstate=1, linktype=1, AllowUse: str="", InvertAllow=0, spawnflags=""):
        Entity.__init__(self, "info_node_link_logic", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start node ID : The node ID of one end of the node connection.
        self.StartNode: int = StartNode
        # End node ID : The node ID of one end of the node connection.
        self.EndNode: int = EndNode
        # Initial State : 
        self.initialstate = initialstate
        # Type of Connection : 
        self.linktype = linktype
        # Allow Pass When Off : Entity or class to allow passage even when node is off
        self.AllowUse: str = AllowUse
        # Invert exclusion rules : Allowed entity is the only entity NOT allowed when this is set to 'yes'. The link must still be disabled for exclusion rules to apply.
        self.InvertAllow = InvertAllow
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "StartNode", "EndNode", "initialstate", "linktype", "AllowUse", "InvertAllow", "spawnflags"])


class InfoNodeLinkOneway(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3404.
    A variant of info_node_link that only works from one direction. Navigation requests from the start node to the end node will always pass, but requests from the end node to the start node will not be allowed. If the link is disabled, the link will work from neither direction. Exclusion rules still apply and excluded NPCs will be able to cross from the opposite direction.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", initialstate=1, linktype=1, InvertAllow=0, spawnflags="", StartNode: int="", EndNode: int="", AllowUse: str="", Usage=0):
        Entity.__init__(self, "info_node_link_oneway", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Initial State : 
        self.initialstate = initialstate
        # Type of Connection : 
        self.linktype = linktype
        # Invert exclusion rules : Allowed entity is the only entity NOT allowed when this is set to 'yes'. The link must still be disabled for exclusion rules to apply.
        self.InvertAllow = InvertAllow
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Start node ID : The node ID that will always be allowed to pass.
        self.StartNode: int = StartNode
        # End node ID : The node ID that will not be allowed to pass unless the NPC follows exclusion rules.
        self.EndNode: int = EndNode
        # Allow Pass When Off : Entity or class to allow passage regardless of which node they're coming from.
        self.AllowUse: str = AllowUse
        # Usage : Causes the link to use slightly different behavior.
        self.Usage = Usage

        self.auto_properties.extend(["origin", "targetname", "initialstate", "linktype", "InvertAllow", "spawnflags", "StartNode", "EndNode", "AllowUse", "Usage"])


class InfoNpcSpawnDestination(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 723.
    NPC Spawn Destination. (Consult npc_template_maker help for more info)
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", ReuseDelay: float=1, RenameNPC: str=""):
        Entity.__init__(self, "info_npc_spawn_destination", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Reuse Delay : After an NPC is spawned at this destination, the delay before this destination is eligible for selection again.
        self.ReuseDelay: float = ReuseDelay
        # New NPC Name : If an NPC spawns at this destination, change that NPC's targetname to this.
        self.RenameNPC: str = RenameNPC

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "ReuseDelay", "RenameNPC"])


class InfoNull(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3147.
    An entity that's immediately removed on spawning. Useful as a spotlight target.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "info_null", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class InfoOverlay(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3100.
    An entity that places an overlay on the world.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", material: str="", sides="", RenderOrder: int=0, StartU: float="0.0", EndU: float="1.0", StartV: float="0.0", EndV: float="1.0", BasisOrigin: "Origin"="", BasisU: "Origin"="", BasisV: "Origin"="", BasisNormal: "Origin"="", uv0: "Origin"="", uv1: "Origin"="", uv2: "Origin"="", uv3: "Origin"="", fademindist: float=-1, fademaxdist: float=0):
        Entity.__init__(self, "info_overlay", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Material : 
        self.material: str = material
        # Brush faces : 
        self.sides = sides
        # Render Order : Higher values render after lower values. This value can be 0-3.
        self.RenderOrder: int = RenderOrder
        # U Start : 
        self.StartU: float = StartU
        # U End : 
        self.EndU: float = EndU
        # V Start : 
        self.StartV: float = StartV
        # V End : 
        self.EndV: float = EndV
        # TODO: Replace this filler. : 
        self.BasisOrigin: "Origin" = BasisOrigin
        # TODO: Replace this filler. : 
        self.BasisU: "Origin" = BasisU
        # TODO: Replace this filler. : 
        self.BasisV: "Origin" = BasisV
        # TODO: Replace this filler. : 
        self.BasisNormal: "Origin" = BasisNormal
        # TODO: Replace this filler. : 
        self.uv0: "Origin" = uv0
        # TODO: Replace this filler. : 
        self.uv1: "Origin" = uv1
        # TODO: Replace this filler. : 
        self.uv2: "Origin" = uv2
        # TODO: Replace this filler. : 
        self.uv3: "Origin" = uv3
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist

        self.auto_properties.extend(["origin", "targetname", "material", "sides", "RenderOrder", "StartU", "EndU", "StartV", "EndV", "BasisOrigin", "BasisU", "BasisV", "BasisNormal", "uv0", "uv1", "uv2", "uv3", "fademindist", "fademaxdist"])


class InfoOverlayTransition(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3122.
    Overlay Transition
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", material: str="", sides="", sides2="", LengthTexcoordStart: float="0.0", LengthTexcoordEnd: float="1.0", WidthTexcoordStart: float="0.0", WidthTexcoordEnd: float="1.0", Width1: float="25.0", Width2: float="25.0", DebugDraw: int=0):
        Entity.__init__(self, "info_overlay_transition", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Material : 
        self.material: str = material
        # Brush faces : 
        self.sides = sides
        # Water faces : 
        self.sides2 = sides2
        # Texcoord Length Start : 
        self.LengthTexcoordStart: float = LengthTexcoordStart
        # Texcoord Length End : 
        self.LengthTexcoordEnd: float = LengthTexcoordEnd
        # Texcoord Width Start : 
        self.WidthTexcoordStart: float = WidthTexcoordStart
        # Texcoord Width End : 
        self.WidthTexcoordEnd: float = WidthTexcoordEnd
        # Width Land : 
        self.Width1: float = Width1
        # Width Water : 
        self.Width2: float = Width2
        # Show Debug : Boolean value (0 or 1).
        self.DebugDraw: int = DebugDraw

        self.auto_properties.extend(["origin", "material", "sides", "sides2", "LengthTexcoordStart", "LengthTexcoordEnd", "WidthTexcoordStart", "WidthTexcoordEnd", "Width1", "Width2", "DebugDraw"])


class InfoParticleSystem(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3166.
    An entity that spawns a particle system built using the particle editor.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", effect_name: str="", start_active=0, flag_as_weather=0, cpoint1: str="", cpoint2: str="", cpoint3: str="", cpoint4: str="", cpoint5: str="", cpoint6: str="", cpoint7: str="", cpoint8: str="", cpoint9: str="", cpoint10: str="", cpoint11: str="", cpoint12: str="", cpoint13: str="", cpoint14: str="", cpoint15: str="", cpoint16: str="", cpoint17: str="", cpoint18: str="", cpoint19: str="", cpoint20: str="", cpoint21: str="", cpoint22: str="", cpoint23: str="", cpoint24: str="", cpoint25: str="", cpoint26: str="", cpoint27: str="", cpoint28: str="", cpoint29: str="", cpoint30: str="", cpoint31: str="", cpoint32: str="", cpoint33: str="", cpoint34: str="", cpoint35: str="", cpoint36: str="", cpoint37: str="", cpoint38: str="", cpoint39: str="", cpoint40: str="", cpoint41: str="", cpoint42: str="", cpoint43: str="", cpoint44: str="", cpoint45: str="", cpoint46: str="", cpoint47: str="", cpoint48: str="", cpoint49: str="", cpoint50: str="", cpoint51: str="", cpoint52: str="", cpoint53: str="", cpoint54: str="", cpoint55: str="", cpoint56: str="", cpoint57: str="", cpoint58: str="", cpoint59: str="", cpoint60: str="", cpoint61: str="", cpoint62: str="", cpoint63: str="", cpoint1_parent: int=0, cpoint2_parent: int=0, cpoint3_parent: int=0, cpoint4_parent: int=0, cpoint5_parent: int=0, cpoint6_parent: int=0, cpoint7_parent: int=0):
        Entity.__init__(self, "info_particle_system", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Particle System Name : 
        self.effect_name: str = effect_name
        # Start Active? : 
        self.start_active = start_active
        # Flag as Weather? : Is this particle system going to be used as a weather effect?
        self.flag_as_weather = flag_as_weather
        # Control Point 1 : If set, control point 1 of the effect will be at this entity's location.
        self.cpoint1: str = cpoint1
        # Control Point 2 : If set, control point 2 of the effect will be at this entity's location. If control point 1 is not set, this will be ignored.
        self.cpoint2: str = cpoint2
        # Control Point 3 : If set, control point 3 of the effect will be at this entity's location. If control point 2 is not set, this will be ignored.
        self.cpoint3: str = cpoint3
        # Control Point 4 : If set, control point 4 of the effect will be at this entity's location. If control point 3 is not set, this will be ignored.
        self.cpoint4: str = cpoint4
        # Control Point 5 : If set, control point 5 of the effect will be at this entity's location. If control point 4 is not set, this will be ignored.
        self.cpoint5: str = cpoint5
        # Control Point 6 : If set, control point 6 of the effect will be at this entity's location. If control point 5 is not set, this will be ignored.
        self.cpoint6: str = cpoint6
        # Control Point 7 : If set, control point 7 of the effect will be at this entity's location. If control point 6 is not set, this will be ignored.
        self.cpoint7: str = cpoint7
        # Control Point 8 : If set, control point 8 of the effect will be at this entity's location. If control point 7 is not set, this will be ignored.
        self.cpoint8: str = cpoint8
        # Control Point 9 : If set, control point 9 of the effect will be at this entity's location. If control point 8 is not set, this will be ignored.
        self.cpoint9: str = cpoint9
        # Control Point 10 : If set, control point 10 of the effect will be at this entity's location. If control point 9 is not set, this will be ignored.
        self.cpoint10: str = cpoint10
        # Control Point 11 : If set, control point 11 of the effect will be at this entity's location. If control point 10 is not set, this will be ignored.
        self.cpoint11: str = cpoint11
        # Control Point 12 : If set, control point 12 of the effect will be at this entity's location. If control point 11 is not set, this will be ignored.
        self.cpoint12: str = cpoint12
        # Control Point 13 : If set, control point 13 of the effect will be at this entity's location. If control point 12 is not set, this will be ignored.
        self.cpoint13: str = cpoint13
        # Control Point 14 : If set, control point 14 of the effect will be at this entity's location. If control point 13 is not set, this will be ignored.
        self.cpoint14: str = cpoint14
        # Control Point 15 : If set, control point 15 of the effect will be at this entity's location. If control point 14 is not set, this will be ignored.
        self.cpoint15: str = cpoint15
        # Control Point 16 : If set, control point 16 of the effect will be at this entity's location. If control point 15 is not set, this will be ignored.
        self.cpoint16: str = cpoint16
        # Control Point 17 : If set, control point 17 of the effect will be at this entity's location. If control point 16 is not set, this will be ignored.
        self.cpoint17: str = cpoint17
        # Control Point 18 : If set, control point 18 of the effect will be at this entity's location. If control point 17 is not set, this will be ignored.
        self.cpoint18: str = cpoint18
        # Control Point 19 : If set, control point 19 of the effect will be at this entity's location. If control point 18 is not set, this will be ignored.
        self.cpoint19: str = cpoint19
        # Control Point 20 : If set, control point 20 of the effect will be at this entity's location. If control point 19 is not set, this will be ignored.
        self.cpoint20: str = cpoint20
        # Control Point 21 : If set, control point 21 of the effect will be at this entity's location. If control point 10 is not set, this will be ignored.
        self.cpoint21: str = cpoint21
        # Control Point 22 : If set, control point 22 of the effect will be at this entity's location. If control point 21 is not set, this will be ignored.
        self.cpoint22: str = cpoint22
        # Control Point 23 : If set, control point 23 of the effect will be at this entity's location. If control point 22 is not set, this will be ignored.
        self.cpoint23: str = cpoint23
        # Control Point 24 : If set, control point 24 of the effect will be at this entity's location. If control point 23 is not set, this will be ignored.
        self.cpoint24: str = cpoint24
        # Control Point 25 : If set, control point 25 of the effect will be at this entity's location. If control point 24 is not set, this will be ignored.
        self.cpoint25: str = cpoint25
        # Control Point 26 : If set, control point 26 of the effect will be at this entity's location. If control point 25 is not set, this will be ignored.
        self.cpoint26: str = cpoint26
        # Control Point 27 : If set, control point 27 of the effect will be at this entity's location. If control point 26 is not set, this will be ignored.
        self.cpoint27: str = cpoint27
        # Control Point 28 : If set, control point 28 of the effect will be at this entity's location. If control point 27 is not set, this will be ignored.
        self.cpoint28: str = cpoint28
        # Control Point 29 : If set, control point 29 of the effect will be at this entity's location. If control point 28 is not set, this will be ignored.
        self.cpoint29: str = cpoint29
        # Control Point 30 : If set, control point 30 of the effect will be at this entity's location. If control point 29 is not set, this will be ignored.
        self.cpoint30: str = cpoint30
        # Control Point 31 : If set, control point 31 of the effect will be at this entity's location. If control point 30 is not set, this will be ignored.
        self.cpoint31: str = cpoint31
        # Control Point 32 : If set, control point 32 of the effect will be at this entity's location. If control point 31 is not set, this will be ignored.
        self.cpoint32: str = cpoint32
        # Control Point 33 : If set, control point 33 of the effect will be at this entity's location. If control point 32 is not set, this will be ignored.
        self.cpoint33: str = cpoint33
        # Control Point 34 : If set, control point 34 of the effect will be at this entity's location. If control point 33 is not set, this will be ignored.
        self.cpoint34: str = cpoint34
        # Control Point 35 : If set, control point 35 of the effect will be at this entity's location. If control point 34 is not set, this will be ignored.
        self.cpoint35: str = cpoint35
        # Control Point 36 : If set, control point 36 of the effect will be at this entity's location. If control point 35 is not set, this will be ignored.
        self.cpoint36: str = cpoint36
        # Control Point 37 : If set, control point 37 of the effect will be at this entity's location. If control point 36 is not set, this will be ignored.
        self.cpoint37: str = cpoint37
        # Control Point 38 : If set, control point 38 of the effect will be at this entity's location. If control point 37 is not set, this will be ignored.
        self.cpoint38: str = cpoint38
        # Control Point 39 : If set, control point 39 of the effect will be at this entity's location. If control point 38 is not set, this will be ignored.
        self.cpoint39: str = cpoint39
        # Control Point 40 : If set, control point 40 of the effect will be at this entity's location. If control point 39 is not set, this will be ignored.
        self.cpoint40: str = cpoint40
        # Control Point 41 : If set, control point 41 of the effect will be at this entity's location. If control point 40 is not set, this will be ignored.
        self.cpoint41: str = cpoint41
        # Control Point 42 : If set, control point 42 of the effect will be at this entity's location. If control point 41 is not set, this will be ignored.
        self.cpoint42: str = cpoint42
        # Control Point 43 : If set, control point 43 of the effect will be at this entity's location. If control point 42 is not set, this will be ignored.
        self.cpoint43: str = cpoint43
        # Control Point 44 : If set, control point 44 of the effect will be at this entity's location. If control point 43 is not set, this will be ignored.
        self.cpoint44: str = cpoint44
        # Control Point 45 : If set, control point 45 of the effect will be at this entity's location. If control point 44 is not set, this will be ignored.
        self.cpoint45: str = cpoint45
        # Control Point 46 : If set, control point 46 of the effect will be at this entity's location. If control point 45 is not set, this will be ignored.
        self.cpoint46: str = cpoint46
        # Control Point 47 : If set, control point 47 of the effect will be at this entity's location. If control point 46 is not set, this will be ignored.
        self.cpoint47: str = cpoint47
        # Control Point 48 : If set, control point 48 of the effect will be at this entity's location. If control point 47 is not set, this will be ignored.
        self.cpoint48: str = cpoint48
        # Control Point 49 : If set, control point 49 of the effect will be at this entity's location. If control point 48 is not set, this will be ignored.
        self.cpoint49: str = cpoint49
        # Control Point 50 : If set, control point 50 of the effect will be at this entity's location. If control point 49 is not set, this will be ignored.
        self.cpoint50: str = cpoint50
        # Control Point 51 : If set, control point 51 of the effect will be at this entity's location. If control point 50 is not set, this will be ignored.
        self.cpoint51: str = cpoint51
        # Control Point 52 : If set, control point 52 of the effect will be at this entity's location. If control point 51 is not set, this will be ignored.
        self.cpoint52: str = cpoint52
        # Control Point 53 : If set, control point 53 of the effect will be at this entity's location. If control point 52 is not set, this will be ignored.
        self.cpoint53: str = cpoint53
        # Control Point 54 : If set, control point 54 of the effect will be at this entity's location. If control point 53 is not set, this will be ignored.
        self.cpoint54: str = cpoint54
        # Control Point 55 : If set, control point 55 of the effect will be at this entity's location. If control point 54 is not set, this will be ignored.
        self.cpoint55: str = cpoint55
        # Control Point 56 : If set, control point 56 of the effect will be at this entity's location. If control point 55 is not set, this will be ignored.
        self.cpoint56: str = cpoint56
        # Control Point 57 : If set, control point 57 of the effect will be at this entity's location. If control point 56 is not set, this will be ignored.
        self.cpoint57: str = cpoint57
        # Control Point 58 : If set, control point 58 of the effect will be at this entity's location. If control point 57 is not set, this will be ignored.
        self.cpoint58: str = cpoint58
        # Control Point 59 : If set, control point 59 of the effect will be at this entity's location. If control point 58 is not set, this will be ignored.
        self.cpoint59: str = cpoint59
        # Control Point 60 : If set, control point 60 of the effect will be at this entity's location. If control point 59 is not set, this will be ignored.
        self.cpoint60: str = cpoint60
        # Control Point 61 : If set, control point 61 of the effect will be at this entity's location. If control point 60 is not set, this will be ignored.
        self.cpoint61: str = cpoint61
        # Control Point 62 : If set, control point 62 of the effect will be at this entity's location. If control point 61 is not set, this will be ignored.
        self.cpoint62: str = cpoint62
        # Control Point 63 : If set, control point 63 of the effect will be at this entity's location. If control point 62 is not set, this will be ignored.
        self.cpoint63: str = cpoint63
        # Control Point 1's Parent : If set and nonzero, control point 1 of the effect will use this point for its parent.
        self.cpoint1_parent: int = cpoint1_parent
        # Control Point 2's Parent : If set and nonzero, control point 2 of the effect will use this point for its parent.
        self.cpoint2_parent: int = cpoint2_parent
        # Control Point 3's Parent : If set and nonzero, control point 3 of the effect will use this point for its parent.
        self.cpoint3_parent: int = cpoint3_parent
        # Control Point 4's Parent : If set and nonzero, control point 4 of the effect will use this point for its parent.
        self.cpoint4_parent: int = cpoint4_parent
        # Control Point 5's Parent : If set and nonzero, control point 5 of the effect will use this point for its parent.
        self.cpoint5_parent: int = cpoint5_parent
        # Control Point 6's Parent : If set and nonzero, control point 6 of the effect will use this point for its parent.
        self.cpoint6_parent: int = cpoint6_parent
        # Control Point 7's Parent : If set and nonzero, control point 7 of the effect will use this point for its parent.
        self.cpoint7_parent: int = cpoint7_parent

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "effect_name", "start_active", "flag_as_weather", "cpoint1", "cpoint2", "cpoint3", "cpoint4", "cpoint5", "cpoint6", "cpoint7", "cpoint8", "cpoint9", "cpoint10", "cpoint11", "cpoint12", "cpoint13", "cpoint14", "cpoint15", "cpoint16", "cpoint17", "cpoint18", "cpoint19", "cpoint20", "cpoint21", "cpoint22", "cpoint23", "cpoint24", "cpoint25", "cpoint26", "cpoint27", "cpoint28", "cpoint29", "cpoint30", "cpoint31", "cpoint32", "cpoint33", "cpoint34", "cpoint35", "cpoint36", "cpoint37", "cpoint38", "cpoint39", "cpoint40", "cpoint41", "cpoint42", "cpoint43", "cpoint44", "cpoint45", "cpoint46", "cpoint47", "cpoint48", "cpoint49", "cpoint50", "cpoint51", "cpoint52", "cpoint53", "cpoint54", "cpoint55", "cpoint56", "cpoint57", "cpoint58", "cpoint59", "cpoint60", "cpoint61", "cpoint62", "cpoint63", "cpoint1_parent", "cpoint2_parent", "cpoint3_parent", "cpoint4_parent", "cpoint5_parent", "cpoint6_parent", "cpoint7_parent"])


class InfoPlayerStart(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3088.
    This entity indicates the position and facing direction at which the player will spawn. Any number of info_player_start entities may be placed in a map for when working in cordoned-off portions of the map. When multiple info_player_start entities are present in a map, set the 'Master' spawnflag on one of them to indicate which one should be used when running the entire map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", spawnflags=""):
        Entity.__init__(self, "info_player_start", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "angles", "spawnflags"])


class InfoProjecteddecal(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3070.
    An entity that projects a decal onto the world (or props). If the decal has no target name, it will immediately apply itself when the level is loaded. If it has a name specified, it won't apply until it receives the 'Activate' input.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", parentname: str="", texture: str="", Distance: float=64):
        Entity.__init__(self, "info_projecteddecal", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.texture: str = texture
        # Distance : Distance from the origin to project the decal.
        self.Distance: float = Distance

        self.auto_properties.extend(["origin", "angles", "targetname", "parentname", "texture", "Distance"])


class InfoRadialLinkController(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3487.
    This entity automatically severs node connections that pass through its radius. If it moves, it will restore those connections.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", radius: float=120):
        Entity.__init__(self, "info_radial_link_controller", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Radius (Use Helper!) : 
        self.radius: float = radius

        self.auto_properties.extend(["origin", "targetname", "parentname", "radius"])


class InfoTarget(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3157.
    An entity that does nothing. Very useful as a positioning entity for other entities to refer to (i.e. the endpoint of an env_beam)
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", spawnflags=""):
        Entity.__init__(self, "info_target", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "spawnflags"])


class InfoTeleportDestination(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3287.
    An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can be used instead.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "info_teleport_destination", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles



        self.auto_properties.extend(["origin", "targetname", "parentname", "angles"])


class InfoTemplateLinkController(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3479.
    An entity that controls all connections between nodes that intersect the controller's volume. This allows for mass enabling/disabling of all node connections through a volume.\n\nNOTE: Due to the way this works, using info_node_link_logic may cause several identical instances of the outputs to be fired instead of one. One way to remedy this by passing your action through a relay with fast refire disabled.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", mins: "Origin"="-8 -32 -36", maxs: "Origin"="8 32 36", initialstate=1, useairlinkradius=0, AllowUse: str="", InvertAllow=0, ReferenceTemplate: str=""):
        Entity.__init__(self, "info_template_link_controller", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Mins : 
        self.mins: "Origin" = mins
        # Maxs : 
        self.maxs: "Origin" = maxs
        # Initial State : 
        self.initialstate = initialstate
        # Use Larger Radius (for air links) : Set this to 'Yes' if this controller is intended to control air links. 
        self.useairlinkradius = useairlinkradius
        # Allow Pass When Off : Entity or class to allow passage even when node is off
        self.AllowUse: str = AllowUse
        # Invert exclusion rules : Allowed entity is the only entity NOT allowed when this is set to 'yes'
        self.InvertAllow = InvertAllow

        # Reference Template : The point_template whose first template would be used as a reference for all of this controller's links. The first template MUST be info_node_link or an entity derived from it, like info_node_link_filtered.
        self.ReferenceTemplate: str = ReferenceTemplate

        self.auto_properties.extend(["origin", "targetname", "mins", "maxs", "initialstate", "useairlinkradius", "AllowUse", "InvertAllow", "ReferenceTemplate"])


class Infodecal(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3052.
    An entity that places a decal on the world. If the decal has no target name, it will immediately apply itself when the level is loaded. If it has a name specified, it won't apply until it receives the 'Activate' input.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", texture: str="", LowPriority=0):
        Entity.__init__(self, "infodecal", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.texture: str = texture
        # Low Priority (can be replaced) : 
        self.LowPriority = LowPriority

        self.auto_properties.extend(["origin", "targetname", "texture", "LowPriority"])


class KeyframeRope(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3882.
    A node entity that marks a point in a rope. The first node in the rope should be a move_rope, followed by 1 or more keyframe_ropes.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", NextKey: str="", MoveSpeed: int=64, mindxlevel=0, maxdxlevel=0, damagefilter: str="", spawnflags="", Slack: int=25, Type=0, Subdiv: int=2, Barbed=0, Width: float="2", TextureScale: str="1", Collide=0, Dangling=0, Breakable=0, RopeMaterial: str="cable/cable.vmt", UseWind=0):
        Entity.__init__(self, "keyframe_rope", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Next KeyFrame : Name of the next keyframe along this keyframe path.
        self.NextKey: str = NextKey
        # Speed (units per second) : 
        self.MoveSpeed: int = MoveSpeed

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Slack : How much extra length the rope has (by default it has the length between its two endpoints in the editor).
        self.Slack: int = Slack
        # Type : 
        self.Type = Type
        # Subdivision : Number of subdivisions between each rope segment. Maximum value is 8. Higher values make smoother ropes, but are slower to render.
        self.Subdiv: int = Subdiv
        # Barbed : Test effect that makes the rope look sharper and more barbed.
        self.Barbed = Barbed
        # Width : Width of the rope.
        self.Width: float = Width
        # Texture Scale : This changes the texture resolution. The default resolution is 4 pixels per inch. Larger values stretch the texture and smaller values scrunch it up.
        self.TextureScale: str = TextureScale
        # Collide with world : 
        self.Collide = Collide
        # Start Dangling : When set to Yes, the rope starts out detached from its target endpoint.
        self.Dangling = Dangling
        # Breakable : When set to yes, the rope can be detached from either endpoint when shot.
        self.Breakable = Breakable
        # Rope Material : The material to use when rendering the rope.
        self.RopeMaterial: str = RopeMaterial
        # Use Wind : When set to Yes, the rope will act as though it's being affected by wind.
        self.UseWind = UseWind


        self.auto_properties.extend(["origin", "targetname", "parentname", "NextKey", "MoveSpeed", "mindxlevel", "maxdxlevel", "damagefilter", "spawnflags", "Slack", "Type", "Subdiv", "Barbed", "Width", "TextureScale", "Collide", "Dangling", "Breakable", "RopeMaterial", "UseWind"])


class KeyframeTrack(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3791.
    Animation KeyFrame
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", NextKey: str="", MoveSpeed: int=64):
        Entity.__init__(self, "keyframe_track", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Next KeyFrame : Name of the next keyframe along this keyframe path.
        self.NextKey: str = NextKey
        # Speed (units per second) : 
        self.MoveSpeed: int = MoveSpeed


        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "NextKey", "MoveSpeed"])


class Light(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3504.
    An invisible omnidirectional lightsource.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", _light: "RGB"="255 255 255 200", _lightHDR: "RGB"="-1 -1 -1 1", _lightscaleHDR: float="1", style=0, pattern: str="", _constant_attn: str="0", _linear_attn: str="0", _quadratic_attn: str="1", _fifty_percent_distance: str="0", _zero_percent_distance: str="0", _hardfalloff: int=0, target: str="", spawnflags="", _distance: int=0):
        Entity.__init__(self, "light", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Brightness : 
        self._light: "RGB" = _light
        # BrightnessHDR : 
        self._lightHDR: "RGB" = _lightHDR
        # BrightnessScaleHDR : Amount to scale the light by when compiling for HDR.
        self._lightscaleHDR: float = _lightscaleHDR
        # Appearance : 
        self.style = style
        # Custom Appearance : Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light.
        self.pattern: str = pattern
        # Constant : 
        self._constant_attn: str = _constant_attn
        # Linear : 
        self._linear_attn: str = _linear_attn
        # Quadratic : 
        self._quadratic_attn: str = _quadratic_attn
        # 50 percent falloff distance : Distance at which brightness should fall off to 50%. If set, overrides linear constant and quadratic paramaters.
        self._fifty_percent_distance: str = _fifty_percent_distance
        # 0 percent falloff distance : Distance at which brightness should fall off to negligible (1/256)%. Must set _fifty_percent_distance to use.
        self._zero_percent_distance: str = _zero_percent_distance
        # hard falloff : If set, causes lights to fall to exactly zero beyond the zero percent distance. May cause unrealistic lightijng if not used carefully.
        self._hardfalloff: int = _hardfalloff

        # Entity To Point At : The name of an entity in the map that the spotlight will point at. This will override the spotlight's angles.
        self.target: str = target
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Maximum Distance : This is the distance that light is allowed to cast, in inches.
        self._distance: int = _distance

        self.auto_properties.extend(["origin", "targetname", "_light", "_lightHDR", "_lightscaleHDR", "style", "pattern", "_constant_attn", "_linear_attn", "_quadratic_attn", "_fifty_percent_distance", "_zero_percent_distance", "_hardfalloff", "target", "spawnflags", "_distance"])


class LightDynamic(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3538.
    An invisible lightsource that changes in some way over time.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", target: str="", _light: "RGB"="255 255 255 200", brightness: int=0, _inner_cone: int=30, _cone: int=45, pitch: int=-90, distance: float=120, spotlight_radius: float=80, style=0, spawnflags=""):
        Entity.__init__(self, "light_dynamic", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Entity to point at : The name of an entity in the map that the dynamic light will point at.
        self.target: str = target
        # Light color : 
        self._light: "RGB" = _light
        # Light brightness : 
        self.brightness: int = brightness
        # Inner (bright) angle : 
        self._inner_cone: int = _inner_cone
        # Outer (fading) angle : 
        self._cone: int = _cone
        # Pitch : 
        self.pitch: int = pitch
        # Maximum distance : This is the distance that light is allowed to cast, in inches.
        self.distance: float = distance
        # Spotlight end radius : This is the radius of the light, in inches, at the object that it is hitting.
        self.spotlight_radius: float = spotlight_radius
        # Appearance : 
        self.style = style
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "target", "_light", "brightness", "_inner_cone", "_cone", "pitch", "distance", "spotlight_radius", "style", "spawnflags"])


class LightEnvironment(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3512.
    Sets the color and angle of the light from the sun and sky.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", _light: "RGB"="255 255 255 200", _ambient: "RGB"="255 255 255 20", _lightHDR: "RGB"="-1 -1 -1 1", _lightscaleHDR: float="1", _ambientHDR: "RGB"="-1 -1 -1 1", _AmbientScaleHDR: float="1", pitch: int=0, SunSpreadAngle: float=0):
        Entity.__init__(self, "light_environment", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Brightness : 
        self._light: "RGB" = _light
        # Ambient : 
        self._ambient: "RGB" = _ambient
        # BrightnessHDR : 
        self._lightHDR: "RGB" = _lightHDR
        # BrightnessScaleHDR : Amount to scale the light by when compiling for HDR.
        self._lightscaleHDR: float = _lightscaleHDR
        # AmbientHDR : 
        self._ambientHDR: "RGB" = _ambientHDR
        # AmbientScaleHDR : Amount to scale the ambient light by when compiling for hdr.
        self._AmbientScaleHDR: float = _AmbientScaleHDR
        # Pitch : The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down.
        self.pitch: int = pitch
        # SunSpreadAngle : The angular extent of the sun for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value.
        self.SunSpreadAngle: float = SunSpreadAngle

        self.auto_properties.extend(["origin", "angles", "_light", "_ambient", "_lightHDR", "_lightscaleHDR", "_ambientHDR", "_AmbientScaleHDR", "pitch", "SunSpreadAngle"])


class LightSpot(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3526.
    An invisible and directional spotlight.
    """
    def __init__(self, vmf_map: "ValveMap", angles: "Origin"="0 0 0", origin: "Origin"="0 0 0", targetname: str="", _light: "RGB"="255 255 255 200", _lightHDR: "RGB"="-1 -1 -1 1", _lightscaleHDR: float="1", style=0, pattern: str="", _constant_attn: str="0", _linear_attn: str="0", _quadratic_attn: str="1", _fifty_percent_distance: str="0", _zero_percent_distance: str="0", _hardfalloff: int=0, target: str="", _inner_cone: int=30, _cone: int=45, _exponent: int=1, _distance: int=0, pitch: "Origin"=-90, spawnflags=""):
        Entity.__init__(self, "light_spot", vmf_map)


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Brightness : 
        self._light: "RGB" = _light
        # BrightnessHDR : 
        self._lightHDR: "RGB" = _lightHDR
        # BrightnessScaleHDR : Amount to scale the light by when compiling for HDR.
        self._lightscaleHDR: float = _lightscaleHDR
        # Appearance : 
        self.style = style
        # Custom Appearance : Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light.
        self.pattern: str = pattern
        # Constant : 
        self._constant_attn: str = _constant_attn
        # Linear : 
        self._linear_attn: str = _linear_attn
        # Quadratic : 
        self._quadratic_attn: str = _quadratic_attn
        # 50 percent falloff distance : Distance at which brightness should fall off to 50%. If set, overrides linear constant and quadratic paramaters.
        self._fifty_percent_distance: str = _fifty_percent_distance
        # 0 percent falloff distance : Distance at which brightness should fall off to negligible (1/256)%. Must set _fifty_percent_distance to use.
        self._zero_percent_distance: str = _zero_percent_distance
        # hard falloff : If set, causes lights to fall to exactly zero beyond the zero percent distance. May cause unrealistic lightijng if not used carefully.
        self._hardfalloff: int = _hardfalloff


        # Entity to point at : The name of an entity in the map that the spotlight will point at. This will override the spotlight's angles.
        self.target: str = target
        # Inner (bright) angle : 
        self._inner_cone: int = _inner_cone
        # Outer (fading) angle : 
        self._cone: int = _cone
        # Focus : 
        self._exponent: int = _exponent
        # Maximum distance : This is the distance that light is allowed to cast, in inches.
        self._distance: int = _distance
        # Pitch : 
        self.pitch: "Origin" = pitch
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["angles", "origin", "targetname", "_light", "_lightHDR", "_lightscaleHDR", "style", "pattern", "_constant_attn", "_linear_attn", "_quadratic_attn", "_fifty_percent_distance", "_zero_percent_distance", "_hardfalloff", "target", "_inner_cone", "_cone", "_exponent", "_distance", "pitch", "spawnflags"])


class LogicActiveAutosave(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5227.
    An entity that is used to look for opportunities to autosave.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", MinimumHitPoints: int=30, TriggerHitPoints: int=75, TimeToTrigget: float=0, DangerousTime: float=10):
        Entity.__init__(self, "logic_active_autosave", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Initiation Hit Points : Start looking for an opportunity to save if player drops below this hitpoint level.
        self.MinimumHitPoints: int = MinimumHitPoints
        # Trigger Hit Points : If started looking for an opportunity, save when hitpoints reach this level.
        self.TriggerHitPoints: int = TriggerHitPoints
        # Time to trigger : If > 0, how long to try and get a save off before giving up
        self.TimeToTrigget: float = TimeToTrigget
        # Dangerous time : If 0, just autosave. Otherwise, do an autosavedangerous with this time threshold
        self.DangerousTime: float = DangerousTime

        self.auto_properties.extend(["origin", "targetname", "MinimumHitPoints", "TriggerHitPoints", "TimeToTrigget", "DangerousTime"])


class LogicAuto(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4513.
    Fires outputs when a map spawns. If 'Remove on fire' flag is set the logic_auto is deleted after firing. It can be set to check a global state before firing. This allows you to only fire events based on what took place in a previous map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", spawnflags="", globalstate=""):
        Entity.__init__(self, "logic_auto", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Global State to Read : If set, this specifies a global state to check before firing. The OnMapSpawn output will only fire if the global state is set.
        self.globalstate = globalstate

        self.auto_properties.extend(["origin", "spawnflags", "globalstate"])


class LogicAutosave(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5208.
    An entity that is used to force an autosave.Can be used multiple times.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", NewLevelUnit=0, MinimumHitPoints: int=0, MinHitPointsToCommit: int=0):
        Entity.__init__(self, "logic_autosave", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Force New Level Unit : If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels.
        self.NewLevelUnit = NewLevelUnit
        # Minimum Hit Points : Don't save dangerous when player has less than this many hitpoints.
        self.MinimumHitPoints: int = MinimumHitPoints
        # Minimum Hit Points to Commit : Minimum hitpoints required to commit to save. The save will be made if you have at least Minimum Hit Points, but when the autosave timer expires, the autosave is only kept if you have at least Min Hitpoints to Commit.
        self.MinHitPointsToCommit: int = MinHitPointsToCommit

        self.auto_properties.extend(["origin", "targetname", "NewLevelUnit", "MinimumHitPoints", "MinHitPointsToCommit"])


class LogicBranch(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4662.
    Tests a boolean value and fires an output based on whether the value is true or false. Use this entity to branch between two potential sets of events.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", InitialValue: int=""):
        Entity.__init__(self, "logic_branch", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Initial value : Initial value for the boolean value (0 or 1).
        self.InitialValue: int = InitialValue

        self.auto_properties.extend(["origin", "targetname", "InitialValue"])


class LogicBranchListener(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4682.
    Contains a list of logic_branch entities and fires outputs when the state of any of the logic_branches changes.\n\nThis entity is used to fire an event when a set of conditions are all satisfied.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Branch01: str="", Branch02: str="", Branch03: str="", Branch04: str="", Branch05: str="", Branch06: str="", Branch07: str="", Branch08: str="", Branch09: str="", Branch10: str="", Branch11: str="", Branch12: str="", Branch13: str="", Branch14: str="", Branch15: str="", Branch16: str=""):
        Entity.__init__(self, "logic_branch_listener", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Logic Branch 01 : The name of one or more logic_branches (wildcards allowed).
        self.Branch01: str = Branch01
        # Logic Branch 02 : The name of one or more logic_branches (wildcards allowed).
        self.Branch02: str = Branch02
        # Logic Branch 03 : The name of one or more logic_branches (wildcards allowed).
        self.Branch03: str = Branch03
        # Logic Branch 04 : The name of one or more logic_branches (wildcards allowed).
        self.Branch04: str = Branch04
        # Logic Branch 05 : The name of one or more logic_branches (wildcards allowed).
        self.Branch05: str = Branch05
        # Logic Branch 06 : The name of one or more logic_branches (wildcards allowed).
        self.Branch06: str = Branch06
        # Logic Branch 07 : The name of one or more logic_branches (wildcards allowed).
        self.Branch07: str = Branch07
        # Logic Branch 08 : The name of one or more logic_branches (wildcards allowed).
        self.Branch08: str = Branch08
        # Logic Branch 09 : The name of one or more logic_branches (wildcards allowed).
        self.Branch09: str = Branch09
        # Logic Branch 10 : The name of one or more logic_branches (wildcards allowed).
        self.Branch10: str = Branch10
        # Logic Branch 11 : The name of one or more logic_branches (wildcards allowed).
        self.Branch11: str = Branch11
        # Logic Branch 12 : The name of one or more logic_branches (wildcards allowed).
        self.Branch12: str = Branch12
        # Logic Branch 13 : The name of one or more logic_branches (wildcards allowed).
        self.Branch13: str = Branch13
        # Logic Branch 14 : The name of one or more logic_branches (wildcards allowed).
        self.Branch14: str = Branch14
        # Logic Branch 15 : The name of one or more logic_branches (wildcards allowed).
        self.Branch15: str = Branch15
        # Logic Branch 16 : The name of one or more logic_branches (wildcards allowed).
        self.Branch16: str = Branch16

        self.auto_properties.extend(["origin", "targetname", "Branch01", "Branch02", "Branch03", "Branch04", "Branch05", "Branch06", "Branch07", "Branch08", "Branch09", "Branch10", "Branch11", "Branch12", "Branch13", "Branch14", "Branch15", "Branch16"])


class LogicCase(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4711.
    Compares an input to up to 16 preset values. If the input value is the same as any of the preset values, an output corresponding to that value is fired.\n\nFor example: if Case01 is set to 2 and Case02 is set to 5, and the input value is 5, the OnCase02 output will be fired.\n\nThis entity can also be used to select from a number of random targets via the PickRandom input. One of the OnCase outputs that is connected to another entity will be picked at random and fired.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", MultipleCasesAllowed=0, Case01: str="", Case02: str="", Case03: str="", Case04: str="", Case05: str="", Case06: str="", Case07: str="", Case08: str="", Case09: str="", Case10: str="", Case11: str="", Case12: str="", Case13: str="", Case14: str="", Case15: str="", Case16: str=""):
        Entity.__init__(self, "logic_case", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Multiple case hits allowed : If an input value matches a given case, are we allowed to test the rest of the cases or should we stop there? Don't worry about this if you're only using this entity for PickRandom.
        self.MultipleCasesAllowed = MultipleCasesAllowed
        # Case 01 : 
        self.Case01: str = Case01
        # Case 02 : 
        self.Case02: str = Case02
        # Case 03 : 
        self.Case03: str = Case03
        # Case 04 : 
        self.Case04: str = Case04
        # Case 05 : 
        self.Case05: str = Case05
        # Case 06 : 
        self.Case06: str = Case06
        # Case 07 : 
        self.Case07: str = Case07
        # Case 08 : 
        self.Case08: str = Case08
        # Case 09 : 
        self.Case09: str = Case09
        # Case 10 : 
        self.Case10: str = Case10
        # Case 11 : 
        self.Case11: str = Case11
        # Case 12 : 
        self.Case12: str = Case12
        # Case 13 : 
        self.Case13: str = Case13
        # Case 14 : 
        self.Case14: str = Case14
        # Case 15 : 
        self.Case15: str = Case15
        # Case 16 : 
        self.Case16: str = Case16

        self.auto_properties.extend(["origin", "targetname", "MultipleCasesAllowed", "Case01", "Case02", "Case03", "Case04", "Case05", "Case06", "Case07", "Case08", "Case09", "Case10", "Case11", "Case12", "Case13", "Case14", "Case15", "Case16"])


class LogicCollisionPair(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4977.
    An entity that can be used to enables/disable vphysics collisions between two target entities.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", attach1: str="", attach2: str="", startdisabled=1):
        Entity.__init__(self, "logic_collision_pair", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Attachment 1 : The first entity.
        self.attach1: str = attach1
        # Attachment 2 : The second entity.
        self.attach2: str = attach2
        # Start with collisions disabled : 
        self.startdisabled = startdisabled

        self.auto_properties.extend(["origin", "targetname", "attach1", "attach2", "startdisabled"])


class LogicCompare(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4636.
    Compares an input value to another value. If the input value is less than the compare value, the OnLessThan output is fired with the input value. If the input value is equal to the compare value, the OnEqualTo output is fired with the input value. If the input value is greater than the compare value, the OnGreaterThan output is fired with the input value.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", InitialValue: str="", CompareValue: str=""):
        Entity.__init__(self, "logic_compare", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Initial value : Initial value for the input value.
        self.InitialValue: str = InitialValue
        # Compare value : The value to compare against.
        self.CompareValue: str = CompareValue

        self.auto_properties.extend(["origin", "targetname", "InitialValue", "CompareValue"])


class LogicConsole(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5344.
    Sends messages to the console. Not to be confused with point_clientcommand or point_servercommand.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", SetDevLvl: int=1, SetMsgColor: "RGB"="210 250 255 255", SetWarningColor: "RGB"="255 210 210 255", SetNewLineNotAuto=0):
        Entity.__init__(self, "logic_console", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Developer Level : What level developer messages should appear at.
        self.SetDevLvl: int = SetDevLvl
        # Message Color : The color of standard messages.
        self.SetMsgColor: "RGB" = SetMsgColor
        # Warning Color : The color of warning messages.
        self.SetWarningColor: "RGB" = SetWarningColor
        # Don't automatically append \n? : Prevents this logic_console from automatically appending a new line each time it prints.
        self.SetNewLineNotAuto = SetNewLineNotAuto

        self.auto_properties.extend(["origin", "targetname", "SetDevLvl", "SetMsgColor", "SetWarningColor", "SetNewLineNotAuto"])


class LogicContextAccessor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5657.
    A logic entity that could read an entity's response contexts. Use the target and context name keyvalues if you want to store a specific target and/or context. Use the 'Test' input to look for the context on the target. The 'OutValue' output will fire with the context's value if it is found.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", context: str=""):
        Entity.__init__(self, "logic_context_accessor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target Entity : The entity with the context to measure.
        self.target: str = target
        # Context Name : The name of the context to measure.
        self.context: str = context

        self.auto_properties.extend(["origin", "targetname", "target", "context"])


class LogicConvar(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5375.
    A powerful entity that can read the specified ConVar's value. It functions similarly to a logic_branch, except you could also output the value directly. Due to theoretical abuse, players have the option to disable logic_ConVar usage on a map. Use the 'OnDenied' output to prevent any issues from players who have disabled logic_ConVar.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", SetConVar: str="", SetTestValue: str=""):
        Entity.__init__(self, "logic_convar", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # ConVar : The ConVar to read. Can be serverside or clientside(?)
        self.SetConVar: str = SetConVar
        # Compare value : The value to compare with the ConVar's value during comparisons. You could use <, !=, etc. at the beginning similar to a Response System criterion.
        self.SetTestValue: str = SetTestValue

        self.auto_properties.extend(["origin", "targetname", "SetConVar", "SetTestValue"])


class LogicDatadescAccessor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5463.
    A logic entity that could read or write any field in an entity's data description, keyvalue or not, based on its internal name. It otherwise functions identically to logic_keyfield.\n\nYou'd better know what you're doing.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", keyname: str=""):
        Entity.__init__(self, "logic_datadesc_accessor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target Entity : The entity whose data description will be measured.
        self.target: str = target
        # Element Name : The internal name (e.g. m_iName) of the field to measure. Use the ''ent_info_datatable'' command followed by an entity's class name to see all of their fields.
        self.keyname: str = keyname

        self.auto_properties.extend(["origin", "targetname", "target", "keyname"])


class LogicEntityPosition(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5632.
    Outputs an entity's position. Prediction operations can be performed as well.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", PositionType=0, PositionParameter: str=""):
        Entity.__init__(self, "logic_entity_position", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target : Who's position should be measured? Use the SetTarget input to change mid-game.
        self.target: str = target
        # Position Type : What position should be measured.
        self.PositionType = PositionType
        # Position Type Parameter : If using an attachment's position, enter the name of the attachment here.
        self.PositionParameter: str = PositionParameter

        self.auto_properties.extend(["origin", "targetname", "target", "PositionType", "PositionParameter"])


class LogicEventlistener(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8422.
    An entity that can listen to events fired from code and fire an output when it happens.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", EventName: str="", StartDisabled=0):
        Entity.__init__(self, "logic_eventlistener", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Event Name : The name of the event that you want to listen for.
        self.EventName: str = EventName
        # Start Disabled : 
        self.StartDisabled = StartDisabled

        self.auto_properties.extend(["origin", "targetname", "EventName", "StartDisabled"])


class LogicExternaldata(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6183.
    Saves and reads keyvalue data from %mapname%_externaldata.txt. Useful for when you want to read and write data across multiple playthroughs.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Target: str="!self", SaveEachChange=1, ReloadBeforeEachAction=0, Mapname: str=""):
        Entity.__init__(self, "logic_externaldata", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Block : The key whose subkeys should be read from/written to. Using '!self' just uses this entity's name as the block name.
        self.Target: str = Target
        # Save after each change : Saves each change without having to use the 'Save' input.
        self.SaveEachChange = SaveEachChange
        # Reload file before each action : Reloads the file before each change this entity makes. This is mostly useful when there is a possibility that the file could change by other means which could be overwritten, like another logic_externaldata somewhere.
        self.ReloadBeforeEachAction = ReloadBeforeEachAction
        # Map Name : logic_externaldata normally uses ''<current map's name>_externaldata.txt'', but you could override the map name here to create/access external data intended for other maps. You could also just use this to write to additional external data files whether they're intended for another map or not.
        self.Mapname: str = Mapname

        self.auto_properties.extend(["origin", "targetname", "Target", "SaveEachChange", "ReloadBeforeEachAction", "Mapname"])


class LogicFormat(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5398.
    Formats a line of text akin to C# String.Format.\nAs curly brackets cannot be used in the help window, please see Mapbase documentation for clear instructions.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", SetInputValue: str="", SetParameter0: str="", SetParameter1: str="", SetParameter2: str="", SetParameter3: str="", SetParameter4: str="", SetParameter5: str="", SetParameter6: str="", SetParameter7: str="", SetBackupParameter: str=""):
        Entity.__init__(self, "logic_format", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Input Value : The input value. Should contain {0}, {1}, etc, which will be replaced by the parameters and then output as OutFormattedValue.
        self.SetInputValue: str = SetInputValue
        # Parameter 0 : Will replace all instances of {0} in the input value.
        self.SetParameter0: str = SetParameter0
        # Parameter 1 : Will replace all instances of {1} in the input value.
        self.SetParameter1: str = SetParameter1
        # Parameter 2 : Will replace all instances of {2} in the input value.
        self.SetParameter2: str = SetParameter2
        # Parameter 3 : Will replace all instances of {3} in the input value.
        self.SetParameter3: str = SetParameter3
        # Parameter 4 : Will replace all instances of {4} in the input value.
        self.SetParameter4: str = SetParameter4
        # Parameter 5 : Will replace all instances of {5} in the input value.
        self.SetParameter5: str = SetParameter5
        # Parameter 6 : Will replace all instances of {6} in the input value.
        self.SetParameter6: str = SetParameter6
        # Parameter 7 : Will replace all instances of {7} in the input value.
        self.SetParameter7: str = SetParameter7
        # Backup Parameter : If an invalid parameter is used (e.g. null parameter or asks for a parameter beyond {7}), then this will be used instead. Otherwise just uses '<null>'.
        self.SetBackupParameter: str = SetBackupParameter

        self.auto_properties.extend(["origin", "targetname", "SetInputValue", "SetParameter0", "SetParameter1", "SetParameter2", "SetParameter3", "SetParameter4", "SetParameter5", "SetParameter6", "SetParameter7", "SetBackupParameter"])


class LogicKeyfield(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5439.
    A logic entity that could read an entity's keyfields. Use the target and key name options if you want to store a specific target and/or keyvalue. Use the 'Test' input to look for the key within the target's datadesc. The 'OutValue' output will fire with the keyfield's value if it is found.\n\nPlease note that some keyvalues do not work with this entity. (most do though, so don't worry about it)
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", keyname: str=""):
        Entity.__init__(self, "logic_keyfield", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target Entity : The entity with the key to measure.
        self.target: str = target
        # Key Name : The name of the key to measure.
        self.keyname: str = keyname

        self.auto_properties.extend(["origin", "targetname", "target", "keyname"])


class LogicLineto(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5179.
    An entity that calculates and outputs a vector from one entity to another.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", source: str="", target: str=""):
        Entity.__init__(self, "logic_lineto", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start entity : Name of the entity the line should start from.
        self.source: str = source
        # End entity : Name of the entity that line should end at.
        self.target: str = target

        self.auto_properties.extend(["origin", "targetname", "source", "target"])


class LogicMeasureDirection(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8565.
    An entity that can measure the direction of an entity relative to another entity and apply the position the entity is looking at to a third entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", ShouldOutputPosition=0, spawnflags="", MeasureAttachment: str="", angles: "Origin"="0 0 0", MeasureTarget: str="", MeasureReference: str="", Target: str="", TargetReference: str="", TargetScale: float="1", MeasureType=0, TraceDistance: float="8192", Mask=1174421507, CollisionGroup=0, damagefilter: str="", HitIfPassed=0, TraceTargetReference=0):
        Entity.__init__(self, "logic_measure_direction", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Fire position outputs : Allows OutPosition and OutAngles to be fired with the resulting position while this entity is active. Does not apply to the GetPosition input.
        self.ShouldOutputPosition = ShouldOutputPosition
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Measurement Attachment : Only useful for the ''Attachment point'' measurement type. This attachment should be on the Entity to Measure and measurements will correspond to its position and angles.
        self.MeasureAttachment: str = MeasureAttachment

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Entity to Measure : Entity whose direction you want to measure.
        self.MeasureTarget: str = MeasureTarget
        # Measure Reference : The direction of Entity to Measure will be measured from this entity.
        self.MeasureReference: str = MeasureReference
        # Entity to Move : This entity will be moved in the direction of the Entity to Measure.
        self.Target: str = Target
        # Movement Reference : The Entity to Move will move relative to this entity.
        self.TargetReference: str = TargetReference
        # Trace scale : A scale to *divide* the distance between the Entity to Measure and the trace's endpoint by before applying those movements to the Entity to Move. 1 = target entity moves to the end of the trace, 2 = target entity moves to the middle of the trace (half as far), and 0.5 = target entity moves twice as far as the trace.
        self.TargetScale: float = TargetScale
        # Measurement Type : How should the direction be measured?
        self.MeasureType = MeasureType
        # Trace distance : The maximum distance that the trace can go. 0 = no limit.
        self.TraceDistance: float = TraceDistance
        # Trace Mask : How the measurement tracing should act in regards to what it should collide with.
        self.Mask = Mask
        # Collision Group : The collision group the measurement tracing should use.
        self.CollisionGroup = CollisionGroup
        # Trace Filter : A filter to use for tracing.
        self.damagefilter: str = damagefilter
        # Trace Filter behavior : What the filter should actually be used for.
        self.HitIfPassed = HitIfPassed
        # Additional trace from movement reference : Initiates another trace from the Movement Reference using the existing properties and adjusts the position to its end point. Only use this if the Movement Reference is different from the Measure Reference.
        self.TraceTargetReference = TraceTargetReference

        self.auto_properties.extend(["origin", "targetname", "ShouldOutputPosition", "spawnflags", "MeasureAttachment", "angles", "MeasureTarget", "MeasureReference", "Target", "TargetReference", "TargetScale", "MeasureType", "TraceDistance", "Mask", "CollisionGroup", "damagefilter", "HitIfPassed", "TraceTargetReference"])


class LogicMeasureMovement(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8501.
    An entity that can measure the movement of an entity relative to another entity and apply that movement to a third entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", MeasureTarget: str="", MeasureReference: str="", Target: str="", TargetReference: str="", TargetScale: float="1", ShouldOutputPosition=0, MeasureType=0, spawnflags="", MeasureAttachment: str=""):
        Entity.__init__(self, "logic_measure_movement", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity to Measure : Entity whose movement you want to measure.
        self.MeasureTarget: str = MeasureTarget
        # Measure Reference : The movement of Entity to Measure will be measured relative to this entity.
        self.MeasureReference: str = MeasureReference
        # Entity to Move : This entity will be moved to mimic the motions of Entity to Measure.
        self.Target: str = Target
        # Movement Reference : The Entity to Move will move relative to this entity.
        self.TargetReference: str = TargetReference
        # Movement scale : A scale to *divide* the measured movements by before applying those movements to the Entity to Move. 1 = target entity moves as much as the measured entity, 2 = target entity moves half as far as the measured entity, and 0.5 = target entity moves twice as far as the measured entity.
        self.TargetScale: float = TargetScale
        # Fire position outputs : Allows OutPosition and OutAngles to be fired with the resulting position while this entity is active. Does not apply to the GetPosition input.
        self.ShouldOutputPosition = ShouldOutputPosition
        # Measurement Type : 
        self.MeasureType = MeasureType
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Measurement Attachment : Only useful for the ''Attachment point'' measurement type. This attachment should be on the Entity to Measure and measurements will correspond to its position and angles.
        self.MeasureAttachment: str = MeasureAttachment

        self.auto_properties.extend(["origin", "targetname", "MeasureTarget", "MeasureReference", "Target", "TargetReference", "TargetScale", "ShouldOutputPosition", "MeasureType", "spawnflags", "MeasureAttachment"])


class LogicMirrorMovement(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8555.
    An entity that can measure the direction of an entity relative to another entity and apply the position the entity is looking at to a third entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", TargetScale: float="1", ShouldOutputPosition=0, MeasureType=0, spawnflags="", MeasureAttachment: str="", MeasureTarget: str="", MeasureReference: str="", Target: str="", TargetReference: str=""):
        Entity.__init__(self, "logic_mirror_movement", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Movement scale : A scale to *divide* the measured movements by before applying those movements to the Entity to Move. 1 = target entity moves as much as the measured entity, 2 = target entity moves half as far as the measured entity, and 0.5 = target entity moves twice as far as the measured entity.
        self.TargetScale: float = TargetScale
        # Fire position outputs : Allows OutPosition and OutAngles to be fired with the resulting position while this entity is active. Does not apply to the GetPosition input.
        self.ShouldOutputPosition = ShouldOutputPosition
        # Measurement Type : 
        self.MeasureType = MeasureType
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Measurement Attachment : Only useful for the ''Attachment point'' measurement type. This attachment should be on the Entity to Measure and measurements will correspond to its position and angles.
        self.MeasureAttachment: str = MeasureAttachment

        # Entity to Measure : Entity whose movement you want to measure. (Remote target)
        self.MeasureTarget: str = MeasureTarget
        # Measure Reference : The movement of Entity to Measure will be mirrored relative to this entity. (Mirror relative)
        self.MeasureReference: str = MeasureReference
        # Entity to Move : This entity will be mirrored across the motions of Entity to Measure. (Movement target)
        self.Target: str = Target
        # Movement Reference : The Entity to Move will be mirrored relative to this entity. (Mirror target)
        self.TargetReference: str = TargetReference

        self.auto_properties.extend(["origin", "targetname", "TargetScale", "ShouldOutputPosition", "MeasureType", "spawnflags", "MeasureAttachment", "MeasureTarget", "MeasureReference", "Target", "TargetReference"])


class LogicModelinfo(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5597.
    Gets and outputs some model information from an entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, target: str=""):
        Entity.__init__(self, "logic_modelinfo", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Target : The entity whose model will be evaluated.
        self.target: str = target

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "target"])


class LogicMulticompare(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4773.
    Compares a set of inputs to each other. If they are all the same, fires an OnEqual output. If any are different, fires the OnNotEqual output.There is currently no way to remove inputs.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", IntegerValue: str="", ShouldComparetoValue=0):
        Entity.__init__(self, "logic_multicompare", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Reference Value (optional) : The value all inputs are compared to if ''Should use Reference Value'' is enabled.
        self.IntegerValue: str = IntegerValue
        # Should use Reference Value : If enabled, all inputs are compared to the reference value. If not enabled, they are instead compared to the last input added.
        self.ShouldComparetoValue = ShouldComparetoValue

        self.auto_properties.extend(["origin", "targetname", "IntegerValue", "ShouldComparetoValue"])


class LogicNavigation(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5189.
    An entity that is used to set navigation properties on other entities. Useful to make NPCs ignore physics props in their way that they can easily push.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", spawnflags="", navprop="Ignore"):
        Entity.__init__(self, "logic_navigation", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Navigation Entity : Name of the entity to set navigation properties on.
        self.target: str = target
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Nav Property : 
        self.navprop = navprop

        self.auto_properties.extend(["origin", "targetname", "target", "spawnflags", "navprop"])


class LogicPlayerinfo(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8774.
    An entity that gets basic info about a player, or finds a player by their basic info.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "logic_playerinfo", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class LogicPlayerproxy(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8718.
    An entity that is used to relay inputs/ouputs to the player and back to the world.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", damagefilter: str="", SetMaxInputArmor: int=100, ResponseContext: str="", HideSquadHUD=0, HandsVM: str="", HandsVMSkin: str=""):
        Entity.__init__(self, "logic_playerproxy", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter



        # Max Input Armor : Sets the maximum armor a player can receive from the AddArmor, RemoveArmor, and SetArmor inputs. This does NOT override how much armor a player can receive overall!
        self.SetMaxInputArmor: int = SetMaxInputArmor
        # Response Contexts : Response system context(s) for the player. Format should be: 'key:value,key2:value2,etc'. Using inputs like AddContext on this player proxy will not carry it over to the player and should be done on the '!player' entity instead.
        self.ResponseContext: str = ResponseContext
        # Hide squad HUD : Hides the player's squad status HUD above the ammo display.
        self.HideSquadHUD = HideSquadHUD
        # Hands Viewmodel : Custom hands viewmodel.
        self.HandsVM: str = HandsVM
        # Hands Viewmodel Skin : Skin for the custom hands viewmodel.
        self.HandsVMSkin: str = HandsVMSkin

        self.auto_properties.extend(["origin", "targetname", "damagefilter", "SetMaxInputArmor", "ResponseContext", "HideSquadHUD", "HandsVM", "HandsVMSkin"])


class LogicRandomOutputs(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4798.
    A message forwarder. Fires up to eight separate outputs, each with a different chance of firing.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, spawnflags="", OnTriggerChance1: float="1.0", OnTriggerChance2: float="1.0", OnTriggerChance3: float="1.0", OnTriggerChance4: float="1.0", OnTriggerChance5: float="1.0", OnTriggerChance6: float="1.0", OnTriggerChance7: float="1.0", OnTriggerChance8: float="1.0"):
        Entity.__init__(self, "logic_random_outputs", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # OnTrigger1 Chance : Chance (from 0 to 1) of the OnTrigger1 output firing when this entity is triggered.
        self.OnTriggerChance1: float = OnTriggerChance1
        # OnTrigger2 Chance : Chance (from 0 to 1) of the OnTrigger2 output firing when this entity is triggered.
        self.OnTriggerChance2: float = OnTriggerChance2
        # OnTrigger3 Chance : Chance (from 0 to 1) of the OnTrigger3 output firing when this entity is triggered.
        self.OnTriggerChance3: float = OnTriggerChance3
        # OnTrigger4 Chance : Chance (from 0 to 1) of the OnTrigger4 output firing when this entity is triggered.
        self.OnTriggerChance4: float = OnTriggerChance4
        # OnTrigger5 Chance : Chance (from 0 to 1) of the OnTrigger5 output firing when this entity is triggered.
        self.OnTriggerChance5: float = OnTriggerChance5
        # OnTrigger6 Chance : Chance (from 0 to 1) of the OnTrigger6 output firing when this entity is triggered.
        self.OnTriggerChance6: float = OnTriggerChance6
        # OnTrigger7 Chance : Chance (from 0 to 1) of the OnTrigger7 output firing when this entity is triggered.
        self.OnTriggerChance7: float = OnTriggerChance7
        # OnTrigger8 Chance : Chance (from 0 to 1) of the OnTrigger8 output firing when this entity is triggered.
        self.OnTriggerChance8: float = OnTriggerChance8

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "spawnflags", "OnTriggerChance1", "OnTriggerChance2", "OnTriggerChance3", "OnTriggerChance4", "OnTriggerChance5", "OnTriggerChance6", "OnTriggerChance7", "OnTriggerChance8"])


class LogicRegisterActivator(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4833.
    Stores an entity and sends messages with it as the activator\nUseful for keeping track of entities with mangled names due to template spawners and instances.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0):
        Entity.__init__(self, "logic_register_activator", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled


        self.auto_properties.extend(["origin", "targetname", "StartDisabled"])


class LogicRelay(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4853.
    A message forwarder. Fires an OnTrigger output when triggered, and can be disabled to prevent forwarding outputs.\n\nUseful as an intermediary between one entity and another for turning on or off an I/O connection, or as a container for holding a set of outputs that can be triggered from multiple places.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, spawnflags=""):
        Entity.__init__(self, "logic_relay", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "spawnflags"])


class LogicRelayQueue(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4883.
    A special variant of logic_relay designed to queue trigger inputs. If the relay is still handling its I/O connections after being triggered, additional Trigger inputs will be queued and automatically fire when the relay is able to be re-fired. Activator, output ID, and parameter are all kept and saved. Inputs are added to the queue each time Trigger or TriggerWithParameter are received while the relay is disabled or still handling its current I/O connections. The first one in the queue will trigger the moment an opportunity becomes available and the next one in the queue will wait for that one.\n\nThis is useful for when you don't want something to happen multiple times at once, but don't want to discard further requests either.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, SetMaxQueueItems: int=3, DontQueueWhenDisabled=0):
        Entity.__init__(self, "logic_relay_queue", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Maximum Items : The maximum number of Trigger and TriggerWithParameter inputs allowed in the queue. Any others received while this value is full will be discarded. Keep in mind this does not count the I/O chain currently being handled.
        self.SetMaxQueueItems: int = SetMaxQueueItems
        # Don't queue when disabled : Prevents the relay from queuing inputs when disabled. This means inputs will only be queued when enabled and still handling its current I/O connections.
        self.DontQueueWhenDisabled = DontQueueWhenDisabled

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "SetMaxQueueItems", "DontQueueWhenDisabled"])


class LogicSequence(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5720.
    Coordinates a sequence out of up to 16 preset values. If the input value matches the sequence's current case value, an output is fired and (by default) the sequence increments to the next case.\n\nThis is intended for things like passwords in keypads, which usually demand a specific combination of numbers.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", InitialCase: int=1, StartDisabled=0, Case01: str="", Case02: str="", Case03: str="", Case04: str="", Case05: str="", Case06: str="", Case07: str="", Case08: str="", Case09: str="", Case10: str="", Case11: str="", Case12: str="", Case13: str="", Case14: str="", Case15: str="", Case16: str="", DontIncrementOnPass=0):
        Entity.__init__(self, "logic_sequence", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Initial Case : Which case to start on, meaning inputs will initially compare with this case. Uses the case's index. (e.g. 4 for Case 04)
        self.InitialCase: int = InitialCase
        # Start Disabled : If this entity is disabled, it will not accept any case tests. It will still accept other inputs, like SetSequenceIndex.
        self.StartDisabled = StartDisabled
        # Case 01 : 
        self.Case01: str = Case01
        # Case 02 : 
        self.Case02: str = Case02
        # Case 03 : 
        self.Case03: str = Case03
        # Case 04 : 
        self.Case04: str = Case04
        # Case 05 : 
        self.Case05: str = Case05
        # Case 06 : 
        self.Case06: str = Case06
        # Case 07 : 
        self.Case07: str = Case07
        # Case 08 : 
        self.Case08: str = Case08
        # Case 09 : 
        self.Case09: str = Case09
        # Case 10 : 
        self.Case10: str = Case10
        # Case 11 : 
        self.Case11: str = Case11
        # Case 12 : 
        self.Case12: str = Case12
        # Case 13 : 
        self.Case13: str = Case13
        # Case 14 : 
        self.Case14: str = Case14
        # Case 15 : 
        self.Case15: str = Case15
        # Case 16 : 
        self.Case16: str = Case16
        # Suppress auto increment : Prevents automatically incrementing the sequence each time a case passes.
        self.DontIncrementOnPass = DontIncrementOnPass

        self.auto_properties.extend(["origin", "targetname", "InitialCase", "StartDisabled", "Case01", "Case02", "Case03", "Case04", "Case05", "Case06", "Case07", "Case08", "Case09", "Case10", "Case11", "Case12", "Case13", "Case14", "Case15", "Case16", "DontIncrementOnPass"])


class LogicSkill(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5322.
    Fires various inputs and outputs related to difficulty levels. You can use this entity to figure out what difficulty the player is using.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", ListenForSkillChange=1):
        Entity.__init__(self, "logic_skill", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Listen for skill changes? : If enabled, this entity will fire the 'OnSkillChanged' output every time the difficulty is changed. This can also be toggled during the game with inputs.
        self.ListenForSkillChange = ListenForSkillChange

        self.auto_properties.extend(["origin", "targetname", "ListenForSkillChange"])


class LogicTimer(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4913.
    An entity that fires a timer event at regular, or random, intervals. It can also be set to oscillate betweena high and low end, in which case it will fire alternating high/low outputs each time it fires.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, spawnflags="", UseRandomTime=0, LowerRandomBound: str="", UpperRandomBound: str="", RefireTime: str=""):
        Entity.__init__(self, "logic_timer", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Use Random Time : 
        self.UseRandomTime = UseRandomTime
        # Minimum Random Interval : If 'Use Random Time' is set, this is the minimum time between timer fires. The time will be a random number between this and the 'Maximum Random Interval'.
        self.LowerRandomBound: str = LowerRandomBound
        # Maximum Random Interval : If 'Use Random Time' is set, this is the maximum time between timer fires. The time will be a random number between the 'Minimum Random Interval' and this.
        self.UpperRandomBound: str = UpperRandomBound
        # Refire Interval : If 'Use Random Time' isn't set, this is the time between timer fires, in seconds.
        self.RefireTime: str = RefireTime

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "spawnflags", "UseRandomTime", "LowerRandomBound", "UpperRandomBound", "RefireTime"])


class MapbaseManifest(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6699.
    Mounts additional manifest files
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", spawnflags=""):
        Entity.__init__(self, "mapbase_manifest", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Manifest File : The manifest file to load. Keep in mind ''maps/%mapname%_manifest.txt'' is always loaded automatically without this entity.
        self.target: str = target
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "target", "spawnflags"])


class MaterialModifyControl(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8653.
    An entity that can be used to directly control material vars. To use it, you need to read the .vmt of the material you intend to change. Parent this entity to a brush model entity who's material you want to control.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", targetname: str="", materialName: str="", materialVar: str=""):
        Entity.__init__(self, "material_modify_control", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Material to modify. : 
        self.materialName: str = materialName
        # Material variable to modify. : 
        self.materialVar: str = materialVar

        self.auto_properties.extend(["origin", "parentname", "targetname", "materialName", "materialVar"])


class MathBits(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5502.
    A math_counter variant that specializes in bitwise operations.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, startvalue: int=0):
        Entity.__init__(self, "math_bits", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Initial Value : The bits this entity should start with.
        self.startvalue: int = startvalue

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "startvalue"])


class MathClamp(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5484.
    Clamps a value between two values. Supports integers, floats, and vectors.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", SetMax: str="", SetMin: str=""):
        Entity.__init__(self, "math_clamp", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Max : The maximum value. Can be an integer, a float, or a vector.
        self.SetMax: str = SetMax
        # Min : The minimum value. Can be an integer, a float, or a vector.
        self.SetMin: str = SetMin

        self.auto_properties.extend(["origin", "targetname", "SetMax", "SetMin"])


class MathColorblend(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5082.
    Used to create a blend between two colors for controlling the color of another entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", inmin: int=0, inmax: int=1, colormin: "RGB"="0 0 0", colormax: "RGB"="255 255 255"):
        Entity.__init__(self, "math_colorblend", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Valid Input Value : Input values below this value will be ignored.
        self.inmin: int = inmin
        # Maximum Valid Input Value : Input values above this value will be ignored.
        self.inmax: int = inmax
        # Output RGB color when input is min. : When the input value is equal to 'Minimum Valid Input Value', this is the output RGB color.
        self.colormin: "RGB" = colormin
        # Output RGB color when input is max. : When the input value is equal to 'Maximum Valid Input Value', this is the output RGB color.
        self.colormax: "RGB" = colormax

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "inmin", "inmax", "colormin", "colormax"])


class MathCounter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5102.
    Holds a numeric value and performs arithmetic operations upon it. If either the minimum or maximum legal value is nonzero, OutValue will be clamped to the legal range, and the OnHitMin/OnHitMax outputs will be fired at the appropriate times. If both min and max are set to zero, no clamping is performed and only the OutValue output will be fired.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, startvalue: float=0, min: float=0, max: float=0):
        Entity.__init__(self, "math_counter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Initial Value : Starting value for the counter.
        self.startvalue: float = startvalue
        # Minimum Legal Value : Minimum legal value for the counter. If min=0 and max=0, no clamping is performed.
        self.min: float = min
        # Maximum Legal Value : Maximum legal value for the counter. If min=0 and max=0, no clamping is performed.
        self.max: float = max

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "startvalue", "min", "max"])


class MathCounterAdvanced(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5135.
    A special version of math_counter with the ability to perform advanced calculations. Otherwise functions identically to math_counter.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, startvalue: float=0, min: float=0, max: float=0, PreserveValue=0, AlwaysOutputAsInt=0, SetLerpPercent: float="0.5"):
        Entity.__init__(self, "math_counter_advanced", vmf_map)



        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Initial Value : Starting value for the counter.
        self.startvalue: float = startvalue
        # Minimum Legal Value : Minimum legal value for the counter. If min=0 and max=0, no clamping is performed.
        self.min: float = min
        # Maximum Legal Value : Maximum legal value for the counter. If min=0 and max=0, no clamping is performed.
        self.max: float = max

        # Preserve Value? : If set to 'Yes', calculations will fire OutValue with the resulting value, but the actual value stored in this entity will stay the same, allowing future calculations to use a constant value. If you want to change the value, you must use SetValueNoFire to set the counter's value or the PreserveValue input to toggle this feature. This also disables min/max functionality.
        self.PreserveValue = PreserveValue
        # Always Output As Int : If set to 'Yes', the stored value (and OutValue) will always be rounded to an integer before firing.
        self.AlwaysOutputAsInt = AlwaysOutputAsInt
        # Lerp Percent : The percentage used by the LerpTo input.
        self.SetLerpPercent: float = SetLerpPercent

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "startvalue", "min", "max", "PreserveValue", "AlwaysOutputAsInt", "SetLerpPercent"])


class MathGenerate(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5773.
    Continuously generates numbers using various generation modes based on material proxies.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=1, GenerateType=1, InitialValue: float=0, SetHitMin: float=0, SetHitMax: float=1, SetParam1: float=0, SetParam2: float=0):
        Entity.__init__(self, "math_generate", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Generation Type : 
        self.GenerateType = GenerateType
        # Initial Value : Starting value for the math_generate.
        self.InitialValue: float = InitialValue
        # Minimum Legal Value : Minimum legal value for generation.
        self.SetHitMin: float = SetHitMin
        # Maximum Legal Value : Maximum legal value for generation.
        self.SetHitMax: float = SetHitMax
        # Parameter 1 : Multi-purpose parameter #1 for the generation algorithms to use for their own needs.
        self.SetParam1: float = SetParam1
        # Parameter 2 : Multi-purpose parameter #2 for the generation algorithms to use for their own needs.
        self.SetParam2: float = SetParam2

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "GenerateType", "InitialValue", "SetHitMin", "SetHitMax", "SetParam1", "SetParam2"])


class MathLightpattern(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5680.
    A logic entity that attempts to replicate light patterns that can be used on named lights.\n\nWARNING: This is currently out of sync with default light patterns. TODO: Fix that!
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, style="", pattern: str="", PatternSpeed: float="0.1"):
        Entity.__init__(self, "math_lightpattern", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Appearance : Which preset pattern to use.
        self.style = style
        # Custom Appearance : A custom pattern to use. a = fully dark, z = fully bright. This should always contain lowercase letters for light patterns. Uppercase letters or other types of characters won't work with actual light patterns. (although they shouldn't break the whole entity either)
        self.pattern: str = pattern
        # Pattern Speed : The speed of the pattern.
        self.PatternSpeed: float = PatternSpeed

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "style", "pattern", "PatternSpeed"])


class MathMod(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5569.
    A lightweight entity that performs simple calculations on the fly without needing a complicated I/O chain. This is useful for values that are outputted on a per-frame basis and might not work with a math_counter chain.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, startvalue: str="0", SetOperator=43):
        Entity.__init__(self, "math_mod", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Mod Value : The value that is applied to input values.
        self.startvalue: str = startvalue
        # Operator : What calculation to perform with the mod value. (input value _ mod value)
        self.SetOperator = SetOperator

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "startvalue", "SetOperator"])


class MathRemap(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5061.
    An entity that remaps a range of input values to a given range of output values.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, spawnflags="", in1: int=0, in2: int=1, out1: int="", out2: int=""):
        Entity.__init__(self, "math_remap", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Valid Input Value : Input values below this value will be ignored.
        self.in1: int = in1
        # Maximum Valid Input Value : Input values above this value will be ignored.
        self.in2: int = in2
        # Output Value When Input Is Min. : When the input value is equal to 'Minimum Valid Input Value', this is the output value.
        self.out1: int = out1
        # Output Value When Input Is Max. : When the input value is equal to 'Maximum Valid Input Value', this is the output value.
        self.out2: int = out2

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "spawnflags", "in1", "in2", "out1", "out2"])


class MathVector(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5526.
    A math_counter variant that specializes in vector operations.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, startvalue: "Origin"="0 0 0"):
        Entity.__init__(self, "math_vector", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Initial Value : The vector this entity should start with.
        self.startvalue: "Origin" = startvalue

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "startvalue"])


class MomentaryRotButton(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4073.
    A brush entity that's designed to be used for rotating wheels, where the player can rotate them to arbitrary positions before stopping.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, speed: int=50, sounds=0, distance: int=90, returnspeed: int=0, spawnflags="", _minlight: str="", startposition: float=0, startdirection="Forward", solidbsp=0):
        Entity.__init__(self, "momentary_rot_button", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Speed (deg/sec) : The amount, in degrees, that the wheel turns per second.
        self.speed: int = speed
        # Sounds : 
        self.sounds = sounds
        # Distance : The maximum amount, in degrees, that the wheel is allowed to rotate.
        self.distance: int = distance
        # Auto-return speed : If the 'Toggle' spawnflag is not set, the speed at which the wheel auto-returns when left alone, in degrees per second.
        self.returnspeed: int = returnspeed
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Start Position : Postion when spawned. The value is a range between 0.0 and 1.0, where 0 is the unrotated position and 1 is the rotated position + 'Distance'.
        self.startposition: float = startposition
        # Start Direction : 
        self.startdirection = startdirection
        # Solid BSP : 
        self.solidbsp = solidbsp

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "speed", "sounds", "distance", "returnspeed", "spawnflags", "_minlight", "startposition", "startdirection", "solidbsp"])


class MoveKeyframed(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3796.
    Keyframed Move Behavior
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", NextKey: str="", MoveSpeed: int=64, PositionInterpolator=0):
        Entity.__init__(self, "move_keyframed", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Next KeyFrame : Name of the next keyframe along this keyframe path.
        self.NextKey: str = NextKey
        # Speed (units per second) : 
        self.MoveSpeed: int = MoveSpeed

        # Position Interpolator : 
        self.PositionInterpolator = PositionInterpolator


        self.auto_properties.extend(["origin", "targetname", "parentname", "NextKey", "MoveSpeed", "PositionInterpolator"])


class MoveRope(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3887.
    The first node in set of nodes that are used to place ropes in the world. It should connect to 1 or more keyframe_rope entities.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", NextKey: str="", MoveSpeed: int=64, mindxlevel=0, maxdxlevel=0, damagefilter: str="", spawnflags="", Slack: int=25, Type=0, Subdiv: int=2, Barbed=0, Width: float="2", TextureScale: str="1", Collide=0, Dangling=0, Breakable=0, RopeMaterial: str="cable/cable.vmt", UseWind=0, PositionInterpolator=2):
        Entity.__init__(self, "move_rope", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Next KeyFrame : Name of the next keyframe along this keyframe path.
        self.NextKey: str = NextKey
        # Speed (units per second) : 
        self.MoveSpeed: int = MoveSpeed

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Slack : How much extra length the rope has (by default it has the length between its two endpoints in the editor).
        self.Slack: int = Slack
        # Type : 
        self.Type = Type
        # Subdivision : Number of subdivisions between each rope segment. Maximum value is 8. Higher values make smoother ropes, but are slower to render.
        self.Subdiv: int = Subdiv
        # Barbed : Test effect that makes the rope look sharper and more barbed.
        self.Barbed = Barbed
        # Width : Width of the rope.
        self.Width: float = Width
        # Texture Scale : This changes the texture resolution. The default resolution is 4 pixels per inch. Larger values stretch the texture and smaller values scrunch it up.
        self.TextureScale: str = TextureScale
        # Collide with world : 
        self.Collide = Collide
        # Start Dangling : When set to Yes, the rope starts out detached from its target endpoint.
        self.Dangling = Dangling
        # Breakable : When set to yes, the rope can be detached from either endpoint when shot.
        self.Breakable = Breakable
        # Rope Material : The material to use when rendering the rope.
        self.RopeMaterial: str = RopeMaterial
        # Use Wind : When set to Yes, the rope will act as though it's being affected by wind.
        self.UseWind = UseWind

        # Position Interpolator : Curve Type. Currently only type 2 (Rope) is fully supported.
        self.PositionInterpolator = PositionInterpolator

        self.auto_properties.extend(["origin", "targetname", "parentname", "NextKey", "MoveSpeed", "mindxlevel", "maxdxlevel", "damagefilter", "spawnflags", "Slack", "Type", "Subdiv", "Barbed", "Width", "TextureScale", "Collide", "Dangling", "Breakable", "RopeMaterial", "UseWind", "PositionInterpolator"])


class MoveTrack(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3801.
    Track Move Behavior
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", PositionInterpolator=0, NextKey: str="", MoveSpeed: int=64, WheelBaseLength: int=50, Damage: int=0, NoRotate=0):
        Entity.__init__(self, "move_track", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Position Interpolator : 
        self.PositionInterpolator = PositionInterpolator

        # Next KeyFrame : Name of the next keyframe along this keyframe path.
        self.NextKey: str = NextKey
        # Speed (units per second) : 
        self.MoveSpeed: int = MoveSpeed

        # Distance between the wheels : 
        self.WheelBaseLength: int = WheelBaseLength
        # Damage done to blocking entities : 
        self.Damage: int = Damage
        # Turn to face down path : 
        self.NoRotate = NoRotate

        self.auto_properties.extend(["origin", "targetname", "parentname", "PositionInterpolator", "NextKey", "MoveSpeed", "WheelBaseLength", "Damage", "NoRotate"])


class NpcFurniture(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8630.
    An entity used for non-NPCs that need to synchronise their animation with an NPC in a scripted_sequence. Usually a pieceof furniture or door that an NPC needs to manipulate within a scripted_sequence.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, lightingorigin: str="", target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", FriendlyFireOverride=2, SetDynamicInteractions=2, SetProficiencyOverride=-1, SetForceServerRagdoll=0, SpawnWithStartScripting=0, parentname: str="", model: str=""):
        Entity.__init__(self, "npc_furniture", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows


        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, take turns attacking and covering each other, etc. Squads work differently from NPC to NPC and some don't support them by default.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using its specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale
        # Friendly fire override : Overrides whether friendly fire is allowed on this NPC or not. 'Disabled' makes this NPC immune to damage from its allies. 'Enabled' makes this NPC vulnerable to damage from its allies, including players. 'Default' uses the NPC's settings and won't change anything.
        self.FriendlyFireOverride = FriendlyFireOverride
        # Dynamic interactions enabled : Episodic only. Enables or disables dynamic interactions on this NPC, if it has them. If set to Default, only dynamic interactions from the original episodes (Alyx, vorts, etc.) will be enabled. If set to Yes, dynamic interactions introduced with Mapbase will be enabled as well. If set to No, this NPC will never perform dynamic interactions.
        self.SetDynamicInteractions = SetDynamicInteractions
        # Proficiency override : Overrides this NPC's weapon proficiency.
        self.SetProficiencyOverride = SetProficiencyOverride
        # Force server ragdoll : Forces this NPC to turn into a serverside prop_ragdoll instead of a clientside ragdoll when it dies.
        self.SetForceServerRagdoll = SetForceServerRagdoll
        # Spawn with StartScripting : Spawns the NPC in the StartScripting state.
        self.SpawnWithStartScripting = SpawnWithStartScripting

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Model : 
        self.model: str = model

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "lightingorigin", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "FriendlyFireOverride", "SetDynamicInteractions", "SetProficiencyOverride", "SetForceServerRagdoll", "SpawnWithStartScripting", "parentname", "model"])


class NpcHelicopterCustom(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 843.
    A custom helicopter. It can't attack. Aww...
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", FriendlyFireOverride=2, SetDynamicInteractions=2, SetProficiencyOverride=-1, SetForceServerRagdoll=0, SpawnWithStartScripting=0, InitialSpeed: str="0", target: str="", AllowsAnyDamage=0, spawnflags="", lightingorigin: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", disableshadows=0, model: str="models/combine_helicopter.mdl", MaxSpeed: float="1056", Acceleration: float="5.0", RotorSound: str="NPC_AttackHelicopter.Rotors", RotorBlast: str="NPC_AttackHelicopter.RotorBlast"):
        Entity.__init__(self, "npc_helicopter_custom", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext




        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, take turns attacking and covering each other, etc. Squads work differently from NPC to NPC and some don't support them by default.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using its specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale
        # Friendly fire override : Overrides whether friendly fire is allowed on this NPC or not. 'Disabled' makes this NPC immune to damage from its allies. 'Enabled' makes this NPC vulnerable to damage from its allies, including players. 'Default' uses the NPC's settings and won't change anything.
        self.FriendlyFireOverride = FriendlyFireOverride
        # Dynamic interactions enabled : Episodic only. Enables or disables dynamic interactions on this NPC, if it has them. If set to Default, only dynamic interactions from the original episodes (Alyx, vorts, etc.) will be enabled. If set to Yes, dynamic interactions introduced with Mapbase will be enabled as well. If set to No, this NPC will never perform dynamic interactions.
        self.SetDynamicInteractions = SetDynamicInteractions
        # Proficiency override : Overrides this NPC's weapon proficiency.
        self.SetProficiencyOverride = SetProficiencyOverride
        # Force server ragdoll : Forces this NPC to turn into a serverside prop_ragdoll instead of a clientside ragdoll when it dies.
        self.SetForceServerRagdoll = SetForceServerRagdoll
        # Spawn with StartScripting : Spawns the NPC in the StartScripting state.
        self.SpawnWithStartScripting = SpawnWithStartScripting

        # Initial Speed : Sets the helicopter's desired speed that it should try to reach as soon as it's spawned.
        self.InitialSpeed: str = InitialSpeed
        # Target path_track : (Optional) The name of a path_track entity that this NPC will fly to after spawning.
        self.target: str = target
        # Allows any damage : Allows this NPC to take any amount of any type of damage, including bullet or melee damage. This is supposed to allow this NPC to be taken down in a previously impossible way and should be used with an actual damage filter.
        self.AllowsAnyDamage = AllowsAnyDamage
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows

        # World Model : Should probably still have the right attachments.
        self.model: str = model
        # Max Speed : The helicopter's maximum speed.
        self.MaxSpeed: float = MaxSpeed
        # Acceleration : The helicopter's acceleration rate.
        self.Acceleration: float = Acceleration
        # Rotor Sound : The helicopter's looping rotor sound. Supports Game Sounds and direct filenames.
        self.RotorSound: str = RotorSound
        # Rotor Blast : The helicopter's rotor blast sound, which plays when the helicopter is pushing away physics objects under it. Supports Game Sounds and direct filenames.
        self.RotorBlast: str = RotorBlast

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "damagefilter", "ResponseContext", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "FriendlyFireOverride", "SetDynamicInteractions", "SetProficiencyOverride", "SetForceServerRagdoll", "SpawnWithStartScripting", "InitialSpeed", "target", "AllowsAnyDamage", "spawnflags", "lightingorigin", "skin", "modelscale", "SetBodyGroup", "disableshadows", "model", "MaxSpeed", "Acceleration", "RotorSound", "RotorBlast"])


class NpcPuppet(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8968.
    Puppet entity that mimics the animations of a target NPC.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", FriendlyFireOverride=2, SetDynamicInteractions=2, SetProficiencyOverride=-1, SetForceServerRagdoll=0, SpawnWithStartScripting=0, targetname: str="", parentname: str="", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", disableshadows=0, animationtarget: str="", attachmentname: str=""):
        Entity.__init__(self, "npc_puppet", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext




        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, take turns attacking and covering each other, etc. Squads work differently from NPC to NPC and some don't support them by default.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using its specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale
        # Friendly fire override : Overrides whether friendly fire is allowed on this NPC or not. 'Disabled' makes this NPC immune to damage from its allies. 'Enabled' makes this NPC vulnerable to damage from its allies, including players. 'Default' uses the NPC's settings and won't change anything.
        self.FriendlyFireOverride = FriendlyFireOverride
        # Dynamic interactions enabled : Episodic only. Enables or disables dynamic interactions on this NPC, if it has them. If set to Default, only dynamic interactions from the original episodes (Alyx, vorts, etc.) will be enabled. If set to Yes, dynamic interactions introduced with Mapbase will be enabled as well. If set to No, this NPC will never perform dynamic interactions.
        self.SetDynamicInteractions = SetDynamicInteractions
        # Proficiency override : Overrides this NPC's weapon proficiency.
        self.SetProficiencyOverride = SetProficiencyOverride
        # Force server ragdoll : Forces this NPC to turn into a serverside prop_ragdoll instead of a clientside ragdoll when it dies.
        self.SetForceServerRagdoll = SetForceServerRagdoll
        # Spawn with StartScripting : Spawns the NPC in the StartScripting state.
        self.SpawnWithStartScripting = SpawnWithStartScripting

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows

        # Animation target : 
        self.animationtarget: str = animationtarget
        # Target attachment point name : 
        self.attachmentname: str = attachmentname

        self.auto_properties.extend(["origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "damagefilter", "ResponseContext", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "FriendlyFireOverride", "SetDynamicInteractions", "SetProficiencyOverride", "SetForceServerRagdoll", "SpawnWithStartScripting", "targetname", "parentname", "lightingorigin", "model", "skin", "modelscale", "SetBodyGroup", "disableshadows", "animationtarget", "attachmentname"])


class NpcTemplateMaker(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 771.
    An entity that creates NPCs. The NPCs it creates are clones of a template NPC. NPCs are spawned around this maker's origin, or at specified destination points.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", StartDisabled=1, MaxNPCCount: int=1, SpawnFrequency: str="5", MaxLiveChildren: int=5, spawnflags="", TemplateName: str="", Radius: float=256, DestinationGroup: str="", CriterionVisibility=2, CriterionDistance=2, MinSpawnDistance: int=0):
        Entity.__init__(self, "npc_template_maker", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Num. of NPCs : Number of NPCs that will spawn before this spawner is exhausted.
        self.MaxNPCCount: int = MaxNPCCount
        # Frequency : How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies.
        self.SpawnFrequency: str = SpawnFrequency
        # Max Live NPCs : Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied.
        self.MaxLiveChildren: int = MaxLiveChildren

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Name of template NPC : Template NPC that this maker should be creating clones of.
        self.TemplateName: str = TemplateName
        # Radius : Radius around this maker within which NPCs are to be placed. Spawned NPCs will try and find empty space within this radius to spawn.
        self.Radius: float = Radius
        # Name of Destination Group : If you'd like spawned NPCs to be created at an info_npc_spawn_destination entity, enter the name of that entity here. If you have more than one destination entity by that name, the Destination Criteria will be used to select one from the group.
        self.DestinationGroup: str = DestinationGroup
        # Dest. Criterion: Visible to player? : Should the NPC try to spawn at a destination that the player can see? Only applicable if a Destination Group is being used.
        self.CriterionVisibility = CriterionVisibility
        # Dest. Criterion: Distance to player? : Should the NPC try to spawn nearest to or farthest from the player's current location? Only applicable if a Destination Group is being used.
        self.CriterionDistance = CriterionDistance
        # Minimum spawn distance from player : The spawn destination node distance to the player will have to be further or equal than this value.
        self.MinSpawnDistance: int = MinSpawnDistance

        self.auto_properties.extend(["origin", "targetname", "angles", "StartDisabled", "MaxNPCCount", "SpawnFrequency", "MaxLiveChildren", "spawnflags", "TemplateName", "Radius", "DestinationGroup", "CriterionVisibility", "CriterionDistance", "MinSpawnDistance"])


class ParallaxObb(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4398.
    
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str=""):
        Entity.__init__(self, "parallax_obb", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        self.auto_properties.extend(["targetname"])


class PathTrack(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8039.
    An entity used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the next path_track in the path.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", spawnflags="", target: str="", altpath: str="", speed: float=0, radius: float=0, orientationtype=1):
        Entity.__init__(self, "path_track", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Next Stop Target : The next path_track in the path.
        self.target: str = target
        # Branch Path : An alternative path_track to be the next node in the path. Useful for making branching paths. Use the ToggleAlternatePath / EnableAlternatePath inputs to make the alternative path active.
        self.altpath: str = altpath
        # New Train Speed : When the train reaches this path_track, it will set its speed to this speed. 
        self.speed: float = speed
        # Path radius : Used by NPCs who follow track paths (attack chopper/gunship). This tells them the maximum distance they're allowed to be from the path at this node.
        self.radius: float = radius
        # Orientation Type : The way that the path follower faces as it moves through this path track.
        self.orientationtype = orientationtype

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "spawnflags", "target", "altpath", "speed", "radius", "orientationtype"])


class PhysBallsocket(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7097.
    A constraint that keeps the position of two objects fixed, relative to the constraint's origin. It does not affect rotation.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", attach1: str="", attach2: str="", constraintsystem: str="", forcelimit: float="0", torquelimit: float="0", breaksound: str="", teleportfollowdistance: float="0", spawnflags=""):
        Entity.__init__(self, "phys_ballsocket", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity 1 : 
        self.attach1: str = attach1
        # Entity 2 : 
        self.attach2: str = attach2
        # Constraint System Manager : The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
        self.constraintsystem: str = constraintsystem
        # Force Limit to Break (lbs) : The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects.
        self.forcelimit: float = forcelimit
        # Torque Limit to Break (lbs * distance) : The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.
        self.torquelimit: float = torquelimit
        # Play Sound on Break : A sound played when the constraint is broken.
        self.breaksound: str = breaksound
        # Follow teleport distance : If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position.
        self.teleportfollowdistance: float = teleportfollowdistance

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "attach1", "attach2", "constraintsystem", "forcelimit", "torquelimit", "breaksound", "teleportfollowdistance", "spawnflags"])


class PhysConstraint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7105.
    A constraint that keeps the relative position and orientation of two objects fixed.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", attach1: str="", attach2: str="", constraintsystem: str="", forcelimit: float="0", torquelimit: float="0", breaksound: str="", teleportfollowdistance: float="0"):
        Entity.__init__(self, "phys_constraint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Entity 1 : 
        self.attach1: str = attach1
        # Entity 2 : 
        self.attach2: str = attach2
        # Constraint System Manager : The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
        self.constraintsystem: str = constraintsystem
        # Force Limit to Break (lbs) : The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects.
        self.forcelimit: float = forcelimit
        # Torque Limit to Break (lbs * distance) : The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.
        self.torquelimit: float = torquelimit
        # Play Sound on Break : A sound played when the constraint is broken.
        self.breaksound: str = breaksound
        # Follow teleport distance : If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position.
        self.teleportfollowdistance: float = teleportfollowdistance


        self.auto_properties.extend(["origin", "targetname", "spawnflags", "attach1", "attach2", "constraintsystem", "forcelimit", "torquelimit", "breaksound", "teleportfollowdistance"])


class PhysConstraintsystem(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6974.
    An entity used to manage a group of interacting constraints and keep them stable. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", additionaliterations: int=0):
        Entity.__init__(self, "phys_constraintsystem", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Additional System Iterations : Adding iterations makes the interactions among constraints in a system tighter.  It will not compensate for errors due to collision, but will help in cases where objects of disparate mass are constrained to each other.
        self.additionaliterations: int = additionaliterations

        self.auto_properties.extend(["origin", "targetname", "additionaliterations"])


class PhysConvert(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7189.
    Turns an arbitrary entity into a physically simulated entity. i.e. brush entities will behave like func_physbox, model entities behave like prop_physics.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", target: str="", swapmodel: str="", massoverride: float="0", SetConversionType=0):
        Entity.__init__(self, "phys_convert", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Entity to convert : Name of the entity that will be converted to a physics object when the ConvertTarget input is fired.
        self.target: str = target
        # Model Swap Entity : 
        self.swapmodel: str = swapmodel
        # Mass Override : Sets the mass when the object(s) are converted (0 means auto-calculate)
        self.massoverride: float = massoverride
        # Conversion Type : How this phys_convert should convert objects.
        self.SetConversionType = SetConversionType

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "target", "swapmodel", "massoverride", "SetConversionType"])


class PhysHinge(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7069.
    A physically simulated hinge. Use the helper to define the axis of rotation.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", attach1: str="", attach2: str="", constraintsystem: str="", forcelimit: float="0", torquelimit: float="0", breaksound: str="", teleportfollowdistance: float="0", hingefriction: float="0", hingeaxis="", SystemLoadScale: float="1", minSoundThreshold: float="6", maxSoundThreshold: float="80", slidesoundfwd: str="", slidesoundback: str="", reversalsoundthresholdSmall: float="0", reversalsoundthresholdMedium: float="0", reversalsoundthresholdLarge: float="0", reversalsoundSmall: str="", reversalsoundMedium: str="", reversalsoundLarge: str=""):
        Entity.__init__(self, "phys_hinge", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Entity 1 : 
        self.attach1: str = attach1
        # Entity 2 : 
        self.attach2: str = attach2
        # Constraint System Manager : The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
        self.constraintsystem: str = constraintsystem
        # Force Limit to Break (lbs) : The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects.
        self.forcelimit: float = forcelimit
        # Torque Limit to Break (lbs * distance) : The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.
        self.torquelimit: float = torquelimit
        # Play Sound on Break : A sound played when the constraint is broken.
        self.breaksound: str = breaksound
        # Follow teleport distance : If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position.
        self.teleportfollowdistance: float = teleportfollowdistance

        # Friction : Resistance/friction in the hinge
        self.hingefriction: float = hingefriction
        # Hinge Axis : 
        self.hingeaxis = hingeaxis
        # Load Scale : Scale of the load connected to this hinge (1=just the objects directly connected)
        self.SystemLoadScale: float = SystemLoadScale
        # Minimum Sound Velocity : Episodic only. When travelling below this many units/sec, will not play any sound.
        self.minSoundThreshold: float = minSoundThreshold
        # Full Sound Velocity : Episodic only. When travelling at this speed or above, will play sound at full volume.
        self.maxSoundThreshold: float = maxSoundThreshold
        # Travel sound (forward) : Episodic only. Play this sound when travelling forward on helper axis
        self.slidesoundfwd: str = slidesoundfwd
        # Travel sound (backward) : Episodic only. Play this sound when travelling backward on helper axis
        self.slidesoundback: str = slidesoundback
        # Reversal sound threshold (small) : Episodic only. When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound.
        self.reversalsoundthresholdSmall: float = reversalsoundthresholdSmall
        # Reversal sound threshold (medium) : Episodic only. When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound.
        self.reversalsoundthresholdMedium: float = reversalsoundthresholdMedium
        # Reversal sound threshold (large) : Episodic only. When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound.
        self.reversalsoundthresholdLarge: float = reversalsoundthresholdLarge
        # Reversal sound (small) : Episodic only. Play this sound when making a hard reverse over the small threshold but less than medium
        self.reversalsoundSmall: str = reversalsoundSmall
        # Reversal sound (medium) : Episodic only. Play this sound when making a hard reverse over the medium threshold but less than large
        self.reversalsoundMedium: str = reversalsoundMedium
        # Reversal sound (large) : Episodic only. Play this sound when making a hard reverse over the large threshold
        self.reversalsoundLarge: str = reversalsoundLarge

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "attach1", "attach2", "constraintsystem", "forcelimit", "torquelimit", "breaksound", "teleportfollowdistance", "hingefriction", "hingeaxis", "SystemLoadScale", "minSoundThreshold", "maxSoundThreshold", "slidesoundfwd", "slidesoundback", "reversalsoundthresholdSmall", "reversalsoundthresholdMedium", "reversalsoundthresholdLarge", "reversalsoundSmall", "reversalsoundMedium", "reversalsoundLarge"])


class PhysKeepupright(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6981.
    A controller that tries to keep an entity facing a particular direction.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", attach1: str="", angularlimit: float="15"):
        Entity.__init__(self, "phys_keepupright", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Target Entity : The entity to align to the desired angles.
        self.attach1: str = attach1
        # Angular Limit : The maximum angular velocity that this controller can compensate for, in degrees per second.
        self.angularlimit: float = angularlimit

        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "attach1", "angularlimit"])


class PhysLengthconstraint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7156.
    A constraint that preserves the distance between two entities. If the 'Keep Rigid' flag is set, think of it as a rod. If not, think off it as a virtual rope.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", attach1: str="", attach2: str="", constraintsystem: str="", forcelimit: float="0", torquelimit: float="0", breaksound: str="", teleportfollowdistance: float="0", addlength: float="0", minlength: float="0", attachpoint="The position the rope attaches to object 2", spawnflags=""):
        Entity.__init__(self, "phys_lengthconstraint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity 1 : 
        self.attach1: str = attach1
        # Entity 2 : 
        self.attach2: str = attach2
        # Constraint System Manager : The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
        self.constraintsystem: str = constraintsystem
        # Force Limit to Break (lbs) : The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects.
        self.forcelimit: float = forcelimit
        # Torque Limit to Break (lbs * distance) : The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.
        self.torquelimit: float = torquelimit
        # Play Sound on Break : A sound played when the constraint is broken.
        self.breaksound: str = breaksound
        # Follow teleport distance : If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position.
        self.teleportfollowdistance: float = teleportfollowdistance

        # Additional Length : Add (or subtract) this amount to the rest length of the rope.
        self.addlength: float = addlength
        # Minimum Length : If the constraint is not rigid, this is the minimum length it can be.
        self.minlength: float = minlength
        # Attached object 2 point : 
        self.attachpoint = attachpoint
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "attach1", "attach2", "constraintsystem", "forcelimit", "torquelimit", "breaksound", "teleportfollowdistance", "addlength", "minlength", "attachpoint", "spawnflags"])


class PhysMagnet(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7289.
    An entity that acts like a magnet, attaching metallic physics objects to itself when they touch it.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", disableshadows=0, spawnflags="", forcelimit: float="0", torquelimit: float="0", massScale: float="0", overridescript: str="", maxobjects: int=0):
        Entity.__init__(self, "phys_magnet", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Force Limit to Break (lbs) : The amount of force necessary to break a stuck object off the magnet. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the magnet.
        self.forcelimit: float = forcelimit
        # Torque Limit to Break (lbs * distance) : The amount of torque necessary to break a stuck object off the magnet. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.
        self.torquelimit: float = torquelimit
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Maximum Attached Objects : The maximum number of physics objects that can be stuck to the magnet at once. 0 = no limit.
        self.maxobjects: int = maxobjects

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "lightingorigin", "model", "skin", "modelscale", "SetBodyGroup", "disableshadows", "spawnflags", "forcelimit", "torquelimit", "massScale", "overridescript", "maxobjects"])


class PhysMotor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7262.
    An entity that tries to spin a target entity at a particular speed.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", speed: str="0", spinup: str="1", inertiafactor: float="1.0", axis="", spawnflags="", attach1: str=""):
        Entity.__init__(self, "phys_motor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Rotation Speed : Angular speed (units are degress/second)
        self.speed: str = speed
        # Spin up time : spin up time in seconds (also affects the rate at which speed changes happen)
        self.spinup: str = spinup
        # System Interia Scale : Make this larger if the object being driven is constrained to a set of heavier objects.
        self.inertiafactor: float = inertiafactor
        # Rotation Axis : 
        self.axis = axis
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Attached Object : Object to apply the force to
        self.attach1: str = attach1

        self.auto_properties.extend(["origin", "targetname", "speed", "spinup", "inertiafactor", "axis", "spawnflags", "attach1"])


class PhysPulleyconstraint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7110.
    A constraint that is essentially two length constraints and two points. Imagine it as a virtual rope connected to two objects, each suspended from a pulley above them.The constraint keeps the sum of the distances between the pulley points and their suspended objects constant.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", attach1: str="", attach2: str="", constraintsystem: str="", forcelimit: float="0", torquelimit: float="0", breaksound: str="", teleportfollowdistance: float="0", addlength: float="0", gearratio: float="1", position2="", spawnflags=""):
        Entity.__init__(self, "phys_pulleyconstraint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity 1 : 
        self.attach1: str = attach1
        # Entity 2 : 
        self.attach2: str = attach2
        # Constraint System Manager : The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
        self.constraintsystem: str = constraintsystem
        # Force Limit to Break (lbs) : The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects.
        self.forcelimit: float = forcelimit
        # Torque Limit to Break (lbs * distance) : The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.
        self.torquelimit: float = torquelimit
        # Play Sound on Break : A sound played when the constraint is broken.
        self.breaksound: str = breaksound
        # Follow teleport distance : If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position.
        self.teleportfollowdistance: float = teleportfollowdistance

        # Additional Length : Add (or subtract) this amount to the rest length of the pulley rope.
        self.addlength: float = addlength
        # Pulley Gear Ratio : Add (or subtract) this amount to the rest length of the pulley rope.
        self.gearratio: float = gearratio
        # Pulley Position 2 : The position of the pulley for Entity 2. The pulley for Entity 1 is the origin of this constraint entity. Entity 1 is always suspended from pulley point 1, and Entity 2 is always suspended from pulley point 2.
        self.position2 = position2
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "attach1", "attach2", "constraintsystem", "forcelimit", "torquelimit", "breaksound", "teleportfollowdistance", "addlength", "gearratio", "position2", "spawnflags"])


class PhysRagdollconstraint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7169.
    A constraint that fixes the position of two entities, relative to this constraint's origin. Also allows for limits on the rotation around each axis, in the space of this constraint.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", attach1: str="", attach2: str="", constraintsystem: str="", forcelimit: float="0", torquelimit: float="0", breaksound: str="", teleportfollowdistance: float="0", spawnflags="", xmin: float="-90", xmax: float="90", ymin: float="0", ymax: float="0", zmin: float="0", zmax: float="0", xfriction: float="0", yfriction: float="0", zfriction: float="0"):
        Entity.__init__(self, "phys_ragdollconstraint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity 1 : 
        self.attach1: str = attach1
        # Entity 2 : 
        self.attach2: str = attach2
        # Constraint System Manager : The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
        self.constraintsystem: str = constraintsystem
        # Force Limit to Break (lbs) : The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects.
        self.forcelimit: float = forcelimit
        # Torque Limit to Break (lbs * distance) : The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.
        self.torquelimit: float = torquelimit
        # Play Sound on Break : A sound played when the constraint is broken.
        self.breaksound: str = breaksound
        # Follow teleport distance : If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position.
        self.teleportfollowdistance: float = teleportfollowdistance

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # X axis min limit : -180 min and 180 max = no constraint on this axis.
        self.xmin: float = xmin
        # X axis max limit : -180 min and 180 max = no constraint on this axis.
        self.xmax: float = xmax
        # Y axis min limit : -180 min and 180 max = no constraint on this axis.
        self.ymin: float = ymin
        # Y axis max limit : -180 min and 180 max = no constraint on this axis.
        self.ymax: float = ymax
        # Z axis min limit : -180 min and 180 max = no constraint on this axis.
        self.zmin: float = zmin
        # Z axis max limit : -180 min and 180 max = no constraint on this axis.
        self.zmax: float = zmax
        # X axis friction : 
        self.xfriction: float = xfriction
        # Y axis friction : 
        self.yfriction: float = yfriction
        # Z axis friction : 
        self.zfriction: float = zfriction

        self.auto_properties.extend(["origin", "targetname", "attach1", "attach2", "constraintsystem", "forcelimit", "torquelimit", "breaksound", "teleportfollowdistance", "spawnflags", "xmin", "xmax", "ymin", "ymax", "zmin", "zmax", "xfriction", "yfriction", "zfriction"])


class PhysRagdollmagnet(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3260.
    An entity that acts like a magnet for ragdolls. Useful for crafting exaggerated ragdoll behavior (i.e. guys falling over rails on death). If the Bar Magnet spawnflag is set, the magnet works like it was a cylindrical magnet i.e. it attracts ragdolls to the nearest point on a line.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, parentname: str="", angles: "Origin"="0 0 0", axis="", radius: float="512", force: float="5000", BoneTarget: str="", target: str="", spawnflags=""):
        Entity.__init__(self, "phys_ragdollmagnet", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Bar Magnet Axis : 
        self.axis = axis
        # Effective Radius : Radius in which ragdolls are affected around this entity's origin.
        self.radius: float = radius
        # Force : Magnetic force to apply to ragdolls within the radius. Expressed as kilograms per inch per second. So a force of 1000 will add 10 inches/second to a 100kg man. It will add 100 inches per second to a 10kg headcrab.
        self.force: float = force
        # Bone Target : Targets a specific bone to apply the force to. (e.g. ValveBiped.Bip01_R_Foot)
        self.BoneTarget: str = BoneTarget
        # Entity to affect : If specified, the phys_ragdollmagnet will only affect the target entity.
        self.target: str = target
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "parentname", "angles", "axis", "radius", "force", "BoneTarget", "target", "spawnflags"])


class PhysSlideconstraint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7124.
    A constraint that constrains an entity along a line segment.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", attach1: str="", attach2: str="", constraintsystem: str="", forcelimit: float="0", torquelimit: float="0", breaksound: str="", teleportfollowdistance: float="0", spawnflags="", slideaxis="", slidefriction: float="0", SystemLoadScale: float="1", minSoundThreshold: float="6", maxSoundThreshold: float="80", slidesoundfwd: str="", slidesoundback: str="", reversalsoundthresholdSmall: float="0", reversalsoundthresholdMedium: float="0", reversalsoundthresholdLarge: float="0", reversalsoundSmall: str="", reversalsoundMedium: str="", reversalsoundLarge: str=""):
        Entity.__init__(self, "phys_slideconstraint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity 1 : 
        self.attach1: str = attach1
        # Entity 2 : 
        self.attach2: str = attach2
        # Constraint System Manager : The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
        self.constraintsystem: str = constraintsystem
        # Force Limit to Break (lbs) : The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects.
        self.forcelimit: float = forcelimit
        # Torque Limit to Break (lbs * distance) : The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.
        self.torquelimit: float = torquelimit
        # Play Sound on Break : A sound played when the constraint is broken.
        self.breaksound: str = breaksound
        # Follow teleport distance : If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position.
        self.teleportfollowdistance: float = teleportfollowdistance

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sliding Axis : 
        self.slideaxis = slideaxis
        # Friction : Resistance/friction in the constraint
        self.slidefriction: float = slidefriction
        # Load Scale : Scale of the mass load connected to this constraint (1=just the objects directly connected)
        self.SystemLoadScale: float = SystemLoadScale
        # Minimum Sound Velocity : When travelling below this many units/sec, will not play any sound.
        self.minSoundThreshold: float = minSoundThreshold
        # Full Sound Velocity : When travelling at this speed or above, will play sound at full volume.
        self.maxSoundThreshold: float = maxSoundThreshold
        # Travel sound (forward) : Play this sound when travelling forward on helper axis
        self.slidesoundfwd: str = slidesoundfwd
        # Travel sound (backward) : Play this sound when travelling backward on helper axis
        self.slidesoundback: str = slidesoundback
        # Reversal sound threshold (small) : When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound.
        self.reversalsoundthresholdSmall: float = reversalsoundthresholdSmall
        # Reversal sound threshold (medium) : When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound.
        self.reversalsoundthresholdMedium: float = reversalsoundthresholdMedium
        # Reversal sound threshold (large) : When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound.
        self.reversalsoundthresholdLarge: float = reversalsoundthresholdLarge
        # Reversal sound (small) : Play this sound when making a hard reverse over the small threshold but less than medium
        self.reversalsoundSmall: str = reversalsoundSmall
        # Reversal sound (medium) : Play this sound when making a hard reverse over the medium threshold but less than large
        self.reversalsoundMedium: str = reversalsoundMedium
        # Reversal sound (large) : Play this sound when making a hard reverse over the large threshold
        self.reversalsoundLarge: str = reversalsoundLarge

        self.auto_properties.extend(["origin", "targetname", "attach1", "attach2", "constraintsystem", "forcelimit", "torquelimit", "breaksound", "teleportfollowdistance", "spawnflags", "slideaxis", "slidefriction", "SystemLoadScale", "minSoundThreshold", "maxSoundThreshold", "slidesoundfwd", "slidesoundback", "reversalsoundthresholdSmall", "reversalsoundthresholdMedium", "reversalsoundthresholdLarge", "reversalsoundSmall", "reversalsoundMedium", "reversalsoundLarge"])


class PhysSpring(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7040.
    A physically simulated spring. 'Length' is what's known as the 'natural spring length'. This is how long the spring would be if it was at rest (nothing hanging on it or attached). When you attach something to the spring, it will stretch longer than its 'natural length'. The amount of stretch is determined by the 'Sprint Constant'. The larger the spring constant the less stretch the spring.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", attach1: str="", attach2: str="", springaxis="", length: str="0", constant: str="50", damping: str="2.0", relativedamping: str="0.1", breaklength: str="0"):
        Entity.__init__(self, "phys_spring", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Entity 1 : 
        self.attach1: str = attach1
        # Entity 2 : 
        self.attach2: str = attach2
        # Spring Axis : Use the helper. Drag it out to match the virtual spring.
        self.springaxis = springaxis
        # Spring Length : How long the spring would be if it was at rest (nothing hanging on it or attached). 0 means the length of the brush.
        self.length: str = length
        # Spring Constant : Stiffness of the spring.  The larger the number the less the spring will stretch.
        self.constant: str = constant
        # Damping Constant : How much energy the spring loses.  The larger the number, the less bouncy the spring.
        self.damping: str = damping
        # Relative Damping Constant : The amount of energy the spring loses proportional to the relative velocity of the two objects the spring is attached to.
        self.relativedamping: str = relativedamping
        # Break on Length : If the spring's length ever exceeds this length, the spring breaks.
        self.breaklength: str = breaklength

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "attach1", "attach2", "springaxis", "length", "constant", "damping", "relativedamping", "breaklength"])


class PhysThruster(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7239.
    An entity used to apply constant acceleration to a physics object. The force and torque is calculated using the position and direction of the thruster as an impulse. So moving those off the object's center will cause torque as well. Torque can be removed by unchecking the 'apply torque' flag. The position of the thruster can be forced to be at the object's center by checking to 'ignore pos' flag.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", attach1: str="", forcetime: str="0", angles: "Origin"="0 0 0", spawnflags="", force: str="0"):
        Entity.__init__(self, "phys_thruster", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Attached Object : Object to apply the force to.
        self.attach1: str = attach1
        # Time of Force (0=inf) : Automatic shut-off after this time has passed (0 = stay on forever or until deactivated)
        self.forcetime: str = forcetime

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Force : Force (will be integrated, units are force kg*in/s^2)
        self.force: str = force

        self.auto_properties.extend(["origin", "targetname", "attach1", "forcetime", "angles", "spawnflags", "force"])


class PhysTorque(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7254.
    An angular thruster. Use it to apply angular force to an entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", attach1: str="", forcetime: str="0", force: str="0", axis=""):
        Entity.__init__(self, "phys_torque", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Attached Object : Object to apply the force to.
        self.attach1: str = attach1
        # Time of Force (0=inf) : Automatic shut-off after this time has passed (0 = stay on forever or until deactivated)
        self.forcetime: str = forcetime

        # Angular Acceleration : 
        self.force: str = force
        # Rotation Axis : 
        self.axis = axis

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "attach1", "forcetime", "force", "axis"])


class PhysicsCannister(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6996.
    A physically simulated gas cannister that can have its cap shot off, at which point gas will start escaping and cause the cannister to fly around. If it takes enough damage, it will explode.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/fire_equipment/w_weldtank.mdl", spawnflags="", expdamage: str="128.0", expradius: str="256.0", health: int=25, thrust: str="3000.0", fuel: str="12.0", rendercolor: "RGB"="255 255 255", renderamt: int=128, gassound: str="TODO_REPLACE_WITH_SOUNDSCRIPT_FOR_MAPBASE_PLEASE"):
        Entity.__init__(self, "physics_cannister", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World model : 
        self.model: str = model
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Explosion Damage : The amount of damage done by the explosion created when the cannister blows up.
        self.expdamage: str = expdamage
        # Explosion Radius : The radius of the explosion to create when the cannister blows up.
        self.expradius: str = expradius
        # Health : The amount of damage the cannister takes before exploding.
        self.health: int = health
        # Thrust : When the cap has been blown off, and the escaping gas is thrusting the cannister about, this is the amount of thrust generated.
        self.thrust: str = thrust
        # Fuel Seconds : The amount of time that gas leaks from the cannister before being considered empty.
        self.fuel: str = fuel
        # Smoke Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Smoke Alpha (0 - 255) : 
        self.renderamt: int = renderamt
        # Thruster Sound : The sound played when the gas is escaping from the cannister.
        self.gassound: str = gassound

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "spawnflags", "expdamage", "expradius", "health", "thrust", "fuel", "rendercolor", "renderamt", "gassound"])


class PointAdvancedFinder(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2998.
    An enhanced entity finder that finds entities that pass a filter and fires OnFoundEntity for each of them.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", SearchFilter: str="", SearchPoint: str="", radius: float="0.0", NumberOfEntities: int=0, OutputDelay: float="0.0", Method="0"):
        Entity.__init__(self, "point_advanced_finder", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter Name : The filter to use that finds what entit(ies) we're looking for.
        self.SearchFilter: str = SearchFilter
        # Search Point : This is the entity in which distance and radius is measured from. Leave blank to use the finder itself.
        self.SearchPoint: str = SearchPoint
        # Radius : The radius in which entities can be found. Leave 0 for infinite.
        self.radius: float = radius
        # Max Results : The number of entities that can be found by this finder. 0 = No limit.
        self.NumberOfEntities: int = NumberOfEntities
        # Output Delay : OnFoundEntity fires once for each entity every X number of seconds. Deleted/killed/removed entities will not be skipped and a chain cannot be canceled, even if the finder is removed. Look into a more manual alternative if you do not want these side effects. Leave 0 for no delay.
        self.OutputDelay: float = OutputDelay
        # Search Method : 
        self.Method = Method

        self.auto_properties.extend(["origin", "targetname", "SearchFilter", "SearchPoint", "radius", "NumberOfEntities", "OutputDelay", "Method"])


class PointAnglesensor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6741.
    An entity that detects if another entity points in a given direction for a period of time.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=0, target: str="", lookatname: str="", duration: float="", tolerance: int="", spawnflags=""):
        Entity.__init__(self, "point_anglesensor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Target Entity Name : Name of the entity whose angles will be sensed.
        self.target: str = target
        # Look At Entity : The entity we want to check to see if the Target Entity is looking at.
        self.lookatname: str = lookatname
        # Duration : The amount of time the Target Entity must look at the 'Look at Entity' to trigger this entity, in seconds.
        self.duration: float = duration
        # Tolerance : The tolerance, in degrees, in the checking to determine when the Target Entity is looking at the Look At Entity.
        self.tolerance: int = tolerance
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "target", "lookatname", "duration", "tolerance", "spawnflags"])


class PointAngularvelocitysensor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6765.
    An entity that detects if another entity's angular velocity meets or exceeds a threshold value.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", threshold: float=0, fireinterval: float="0.2", axis="", usehelper=0):
        Entity.__init__(self, "point_angularvelocitysensor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target Entity Name : Name of the entity whose angular velocity will be sensed.
        self.target: str = target
        # Threshold Velocity : The threshold angular velocity to compare against, in degrees per second.
        self.threshold: float = threshold
        # Fire Interval : Angular velocity must cross the threshold for at least this long to fire.
        self.fireinterval: float = fireinterval
        # Axis : 
        self.axis = axis
        # Use Axis Helper : Use axis helper to determine rotation values (clockwise/counter-clockwise).
        self.usehelper = usehelper

        self.auto_properties.extend(["origin", "targetname", "target", "threshold", "fireinterval", "axis", "usehelper"])


class PointBonusmapsAccessor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2909.
    An entity that relays bonus maps changes.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", filename: str="", mapname: str=""):
        Entity.__init__(self, "point_bonusmaps_accessor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # File Name : 
        self.filename: str = filename
        # Map Name : 
        self.mapname: str = mapname

        self.auto_properties.extend(["origin", "targetname", "filename", "mapname"])


class PointClientcommand(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2895.
    An entity that issues commands to the client console, as if it was typed in by the player (if activator is a player, or the local player in single player).
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "point_clientcommand", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class PointCopySize(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6122.
    Copies the size of one entity to another.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Source: str="", Target: str="", SetScale: float="1"):
        Entity.__init__(self, "point_copy_size", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Size source : The entity whose size would be measured and copied from.
        self.Source: str = Source
        # Resize target : The entity that will receive the copied size.
        self.Target: str = Target
        # Scale : Multiplies the source's size by this number. Useful for bullseyes.
        self.SetScale: float = SetScale

        self.auto_properties.extend(["origin", "targetname", "Source", "Target", "SetScale"])


class PointDamageinfo(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5913.
    Applies damage with full control over the variables of CTakeDamageInfo, providing as much precision as possible.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Target: str="", Inflictor: str="", Attacker: str="", Weapon: str="", MaxEnts: int=1, Damage: int=0, MaxDamage: int="", DamageBonus: int="", damagetype=0, damagepresets=0, damageor=0, DamageCustom: int="", DamageStats: int="", ForceFriendlyFire=0, AmmoType: int="", PlayerPenetrationCount: int="", DamagedOtherPlayers: int="", DamageForce: "Origin"="0 0 0", DamagePosition: "Origin"="0 0 0", ReportedPosition: "Origin"="0 0 0", SuppressDeathSound=0):
        Entity.__init__(self, "point_damageinfo", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target/Victim : The entit(ies) that will take all of this damage. This is optional if you're only using the 'ApplyDamageToEntity' input.
        self.Target: str = Target
        # Inflictor : The entity that actually supposedly dealt the damage. This isn't supposed to be the attacker as much as it's supposed to be their weapon or a projectile from their weapon.
        self.Inflictor: str = Inflictor
        # Attacker : The entity that the damage is credited to.
        self.Attacker: str = Attacker
        # Weapon : The weapon that did the damage. This is usually used when the inflictor would already be used for something else. For example, when the inflictor is a rocket, this would be the RPG.
        self.Weapon: str = Weapon
        # Maximum Victims : When ApplyDamage is called, how many entities that match the target's description should be victimized? Use 0 for no limit.
        self.MaxEnts: int = MaxEnts
        # Damage : How much damage to inflict.
        self.Damage: int = Damage
        # Max Damage : Function not fully understood, likely something related to multidamage
        self.MaxDamage: int = MaxDamage
        # Damage Bonus : Function unknown, possibly unused
        self.DamageBonus: int = DamageBonus

        # Damage Type : The type(s) of damage associated with this entity.
        self.damagetype = damagetype
        # Damage Presets : User-friendly 'presets' based on combined damage types. This is accompanied by the damage type and damage or, if they are specified.
        self.damagepresets = damagepresets
        # Damage Or : Optional flags that can accompany the damage type.
        self.damageor = damageor

        # Damage Custom : A special, game-specific identifier mostly used in mods or multiplayer games.
        self.DamageCustom: int = DamageCustom
        # Damage Stats : Function unknown, possibly unused
        self.DamageStats: int = DamageStats
        # Force Friendly Fire : Disregards friendly fire safechecks and applies the damage regardless of the attacker's relationship to the victim.
        self.ForceFriendlyFire = ForceFriendlyFire
        # Ammo Type : Uses a specific ammo type by order in the ammo def. (not to be confused with damage type)
        self.AmmoType: int = AmmoType
        # Player Penetration Count : Presumably how many players the inflictor has gone through before reaching the current victim. Appears to be unused in singleplayer games.
        self.PlayerPenetrationCount: int = PlayerPenetrationCount
        # Player Penetration Count : Function unknown, possibly unused
        self.DamagedOtherPlayers: int = DamagedOtherPlayers
        # Damage Force : The force to apply when the damage is applied.
        self.DamageForce: "Origin" = DamageForce
        # Damage Position : What position the damage took place.
        self.DamagePosition: "Origin" = DamagePosition
        # Reported Position : Function unknown, possibly related to multidamage (buckshot)
        self.ReportedPosition: "Origin" = ReportedPosition
        # Suppress Death Sound : Attempts to suppress the target entity's death sound.
        self.SuppressDeathSound = SuppressDeathSound

        self.auto_properties.extend(["origin", "targetname", "Target", "Inflictor", "Attacker", "Weapon", "MaxEnts", "Damage", "MaxDamage", "DamageBonus", "damagetype", "damagepresets", "damageor", "DamageCustom", "DamageStats", "ForceFriendlyFire", "AmmoType", "PlayerPenetrationCount", "DamagedOtherPlayers", "DamageForce", "DamagePosition", "ReportedPosition", "SuppressDeathSound"])


class PointDevshotCamera(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8673.
    An entity used by the -makedevshots system, which automatically takes screenshots at the position of every devshot camera in the level.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", cameraname: str="", FOV: int=75):
        Entity.__init__(self, "point_devshot_camera", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Camera Name : Used as the name of the directory to store screenshots from this camera. Must be unique within the level.
        self.cameraname: str = cameraname
        # Camera FOV : FOV of this camera.
        self.FOV: int = FOV

        self.auto_properties.extend(["origin", "angles", "cameraname", "FOV"])


class PointEnableMotionFixup(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2807.
    An entity used to move a motion-disabled prop when it enables motion. Parent this entity to the prop, and when the prop has its motion enabled, it will immediately teleport to the origin of this entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "point_enable_motion_fixup", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "parentname", "angles"])


class PointEntityFinder(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2978.
    An entity that will find an entity and pass it along as the !Caller with the OutEntity output.  Requires using !Caller as the parameter on the input.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", filtername: str="", referencename: str="", Method="0"):
        Entity.__init__(self, "point_entity_finder", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter Name : Filter to use to narrow set of findable entities. See filter_activator_name for more explanation.
        self.filtername: str = filtername
        # Reference Entity : Name of the entity to use when evaluating criteria.  For example, when using 'Nearest', this is the entity that distance will be measured from.  If left blank will use the point_entity_finder.
        self.referencename: str = referencename
        # Search Method : 
        self.Method = Method

        self.auto_properties.extend(["origin", "targetname", "filtername", "referencename", "Method"])


class PointEntityReplace(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5964.
    An entity that replaces.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Target: str="", ReplacementEntity: str="", ReplacementType=0, ReplacementLocation=0, RemoveOriginalEntity=1, TakeTargetname=0, TakeParent=0, TakeOwner=0, TakeModelStuff=0, OtherStuff: str="", TargetIsCaller=0):
        Entity.__init__(self, "point_entity_replace", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Entity to be replaced : The entity that should be replaced. This is optional if you're only using the 'ReplaceEntity' input.
        self.Target: str = Target
        # Replacement Entity : The entity that should serve as the replacement.
        self.ReplacementEntity: str = ReplacementEntity
        # Replacement Type : What IS the replacement entity?
        self.ReplacementType = ReplacementType
        # Replacement Location : Where should the replacement entit(ies) be teleported to?
        self.ReplacementLocation = ReplacementLocation
        # Remove original entity : Removes the entity being replaced.
        self.RemoveOriginalEntity = RemoveOriginalEntity
        # Take Targetname : Causes the replacement entity to take the target's name.
        self.TakeTargetname = TakeTargetname
        # Take Parent : Causes the replacement entity to take the target's current parent as well as its children.
        self.TakeParent = TakeParent
        # Take Owner : Causes the replacement entity to take the target's owner.
        self.TakeOwner = TakeOwner
        # Take Model Stuff : Causes the replacement entity to take the target's model stuff, including render fields and animation data.
        self.TakeModelStuff = TakeModelStuff
        # Other Fields : Specific variables that should transfer. Uses internal field names (e.g. ''m_bBoolean''), not keyvalues. This is really delicate, so be careful.
        self.OtherStuff: str = OtherStuff
        # Fire outputs with original entity as caller : If enabled, OnReplace will fire with the original entity as the caller instead of this.
        self.TargetIsCaller = TargetIsCaller

        self.auto_properties.extend(["origin", "targetname", "Target", "ReplacementEntity", "ReplacementType", "ReplacementLocation", "RemoveOriginalEntity", "TakeTargetname", "TakeParent", "TakeOwner", "TakeModelStuff", "OtherStuff", "TargetIsCaller"])


class PointEvent(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8451.
    An entity that can listen to events fired from code and fire an output when it happens.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", EventName: str="", KeyName01: str="", KeyName02: str="", KeyName03: str="", KeyName04: str="", KeyName05: str="", KeyName06: str="", KeyName07: str="", KeyName08: str="", StartDisabled=0):
        Entity.__init__(self, "point_event", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        # Event Name : The names of the events that you want to listen for. Separated by colon. (e.g. player_hurt:game_init)
        self.EventName: str = EventName
        # Key Name 01 : A keyvalue name to search for in detected events. If an event contains this key, then this entity will fire its respective OutValue output with the value.
        self.KeyName01: str = KeyName01
        # Key Name 02 : A keyvalue name to search for in detected events. If an event contains this key, then this entity will fire its respective OutValue output with the value.
        self.KeyName02: str = KeyName02
        # Key Name 03 : A keyvalue name to search for in detected events. If an event contains this key, then this entity will fire its respective OutValue output with the value.
        self.KeyName03: str = KeyName03
        # Key Name 04 : A keyvalue name to search for in detected events. If an event contains this key, then this entity will fire its respective OutValue output with the value.
        self.KeyName04: str = KeyName04
        # Key Name 05 : A keyvalue name to search for in detected events. If an event contains this key, then this entity will fire its respective OutValue output with the value.
        self.KeyName05: str = KeyName05
        # Key Name 06 : A keyvalue name to search for in detected events. If an event contains this key, then this entity will fire its respective OutValue output with the value.
        self.KeyName06: str = KeyName06
        # Key Name 07 : A keyvalue name to search for in detected events. If an event contains this key, then this entity will fire its respective OutValue output with the value.
        self.KeyName07: str = KeyName07
        # Key Name 08 : A keyvalue name to search for in detected events. If an event contains this key, then this entity will fire its respective OutValue output with the value.
        self.KeyName08: str = KeyName08
        # Start Disabled : 
        self.StartDisabled = StartDisabled

        self.auto_properties.extend(["origin", "targetname", "EventName", "KeyName01", "KeyName02", "KeyName03", "KeyName04", "KeyName05", "KeyName06", "KeyName07", "KeyName08", "StartDisabled"])


class PointGamestatsCounter(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8976.
    Generic game statistics counter.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="", targetname: str="", StartDisabled=0, Name: str=""):
        Entity.__init__(self, "point_gamestats_counter", vmf_map)

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Name of statistic counter : 
        self.Name: str = Name

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "Name"])


class PointHurt(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6850.
    An entity that does damage to all entities in a radius around itself, with a specified delay.If 'Target Entity' is specified, the damage is only done to that entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", damagetype=0, damagepresets=0, damageor=0, DamageTarget: str="", DamageRadius: float=256, Damage: int=5, DamageDelay: float=1):
        Entity.__init__(self, "point_hurt", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Damage Type : The type(s) of damage associated with this entity.
        self.damagetype = damagetype
        # Damage Presets : User-friendly 'presets' based on combined damage types. This is accompanied by the damage type and damage or, if they are specified.
        self.damagepresets = damagepresets
        # Damage Or : Optional flags that can accompany the damage type.
        self.damageor = damageor

        # Target Entity : If specified, only this entity will take damage. Otherwise, all entities within the Radius will take damage.
        self.DamageTarget: str = DamageTarget
        # Radius : All entities within this radius of this entity will take damage. If a 'Target Entity' is specified, only that entity will take damage.
        self.DamageRadius: float = DamageRadius
        # Damage : Damage done to all affected entities each time this entity fires.
        self.Damage: int = Damage
        # Delay : Delay between refires, in seconds.
        self.DamageDelay: float = DamageDelay

        self.auto_properties.extend(["origin", "targetname", "parentname", "damagetype", "damagepresets", "damageor", "DamageTarget", "DamageRadius", "Damage", "DamageDelay"])


class PointMessage(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2812.
    An entity that displays a text message in the world, at its origin.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", message: str="", radius: int=128, developeronly=0):
        Entity.__init__(self, "point_message", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Entity Message : 
        self.message: str = message
        # Show message radius : Distance the player must be within to see this message.
        self.radius: int = radius
        # Developer Only? : If set, this message will only be visible when developer mode is on.
        self.developeronly = developeronly

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags", "message", "radius", "developeronly"])


class PointMessageLocalized(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2834.
    A variant of point_message that allows localized text and newline to be used.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", radius: int=128, developeronly=0, message: str=""):
        Entity.__init__(self, "point_message_localized", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Show message radius : Distance the player must be within to see this message.
        self.radius: int = radius
        # Developer Only? : If set, this message will only be visible when developer mode is on.
        self.developeronly = developeronly

        # Localized Entity Message : The message displayed by this entity. Use '/n' for newline.
        self.message: str = message

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags", "radius", "developeronly", "message"])


class PointPlayermoveconstraint(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6867.
    An entity that constrains players to a radius around itself, slowing them down the closer they get to the edge of the radius.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", radius: float=256, width: float="75.0", speedfactor: float="0.15"):
        Entity.__init__(self, "point_playermoveconstraint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Radius : Radius to constrain players to.
        self.radius: float = radius
        # Constraint Width : Width of the constraint edge. This is the distance in which to start slowing players down as they approach the edge of the radius.
        self.width: float = width
        # Speed Factor : Factor applied to the player's max speed as they approach the radius edge.
        self.speedfactor: float = speedfactor

        self.auto_properties.extend(["origin", "targetname", "radius", "width", "speedfactor"])


class PointPosecontroller(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4598.
    An entity that controls a pose parameter of a prop and cycles the pose clientside.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", PropName: str="", PoseParameterName: str="", PoseValue: float="0.0", InterpolationTime: float="0.0", InterpolationWrap=0, CycleFrequency: float="0.0", FModulationType=0, FModTimeOffset: float="0.0", FModRate: float="0.0", FModAmplitude: float="0.0"):
        Entity.__init__(self, "point_posecontroller", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Prop Name : Name of the prop to control.
        self.PropName: str = PropName
        # Pose Parameter Name : Name of the pose parameter to control.
        self.PoseParameterName: str = PoseParameterName
        # Pose Parameter Value : Normalized value for the pose parameter from 0.0 and 1.0 (maps to min and max range).
        self.PoseValue: float = PoseValue
        # Interpolation Time : Number of seconds (0.0 to 10.0) for client to match absolue pose values.
        self.InterpolationTime: float = InterpolationTime
        # Should wrap from 0.0 to 1.0 when interpolating. : 
        self.InterpolationWrap = InterpolationWrap
        # Cycle Frequency : Base cycles per second from -10.0 to 10.0.
        self.CycleFrequency: float = CycleFrequency
        # Frequency Modulation Type : 
        self.FModulationType = FModulationType
        # Frequency Modulation Time Offset : Modulation time offset from -1.0f to 1.0.
        self.FModTimeOffset: float = FModTimeOffset
        # Frequency Modulation Rate : Modulation cycles per second from -10.0f to 10.0.
        self.FModRate: float = FModRate
        # Frequency Modulation Amplitude : Modulation extents from 0.0f to 10.0.
        self.FModAmplitude: float = FModAmplitude

        self.auto_properties.extend(["origin", "targetname", "PropName", "PoseParameterName", "PoseValue", "InterpolationTime", "InterpolationWrap", "CycleFrequency", "FModulationType", "FModTimeOffset", "FModRate", "FModAmplitude"])


class PointProjectile(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6214.
    An entity that fires projectiles.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", Target: str="crossbow_bolt", Owner: str="", Damage: float="100.0", Speed: float="1500", FireFromOwner=0):
        Entity.__init__(self, "point_projectile", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Projectile Classname : The classname of the projectile.
        self.Target: str = Target
        # Owner Entity : The projectile's owner entity, or whoever kills will be credited to.
        self.Owner: str = Owner
        # Damage : The damage of the projectile.
        self.Damage: float = Damage
        # Speed : How fast the projectile should move.
        self.Speed: float = Speed
        # Fire From Owner : Fires the projectile from the owner entity's origin instead of our own.
        self.FireFromOwner = FireFromOwner

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "Target", "Owner", "Damage", "Speed", "FireFromOwner"])


class PointProximitySensor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6814.
    An entity that detects another entity's proximity to a target position.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=0, angles: "Origin"="0 0 0", target: str="", spawnflags=""):
        Entity.__init__(self, "point_proximity_sensor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Target Entity Name : Name of the entity whose angles will be sensed.
        self.target: str = target
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "angles", "target", "spawnflags"])


class PointRagdollboogie(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5820.
    An entity that makes ragdolls dance.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", target: str="", StartTime: float="0", BoogieLength: float="5.0", Magnitude: float="150", ZapColor: "RGB"="255 255 255"):
        Entity.__init__(self, "point_ragdollboogie", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Boogie target(s) : The one(s) that must boogie. prop_ragdolls have no hassle, but NPCs will have to break them elbows and become prop_ragdolls themselves (a.k.a. die) in order to boogie.
        self.target: str = target
        # Start time : How long after we've received the 'Activate' input should ragdolls boogie?
        self.StartTime: float = StartTime
        # Boogie length : How long should the boogie last? Can be a range with a lower bound and a higher bound, e.g. ''2.5,4.0'' (no quotes)
        self.BoogieLength: float = BoogieLength
        # Magnitude : How intense is the boogie?
        self.Magnitude: float = Magnitude
        # Zap Color : The color of each tesla beam on an electrical boogie.
        self.ZapColor: "RGB" = ZapColor

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "target", "StartTime", "BoogieLength", "Magnitude", "ZapColor"])


class PointServercommand(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2902.
    An entity that issues commands to the server console.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "point_servercommand", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class PointSpotlight(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2840.
    An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player. Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rests.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, viewhideflags=0, disablereceiveshadows=0, angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, spawnflags="", spotlightlength: int=500, spotlightwidth: int=50, rendercolor: "RGB"="255 255 255", HDRColorScale: float="1.0"):
        Entity.__init__(self, "point_spotlight", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Spotlight Length : Length of the spotlight beam.
        self.spotlightlength: int = spotlightlength
        # Spotlight Width : Width of the spotlight beam.
        self.spotlightwidth: int = spotlightwidth
        # Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # HDR color scale. : float value to multiply sprite color by when running in HDR mode.
        self.HDRColorScale: float = HDRColorScale

        self.auto_properties.extend(["origin", "targetname", "parentname", "renderfx", "rendermode", "renderamt", "viewhideflags", "disablereceiveshadows", "angles", "mindxlevel", "maxdxlevel", "spawnflags", "spotlightlength", "spotlightwidth", "rendercolor", "HDRColorScale"])


class PointTeleport(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6832.
    An entity that teleports a target entity to this position and angles. If 'Teleport Home' spawn flag is set, teleports the target entity to its spawn position instead.If object is physically simulated, simulation is turned off when teleported.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", target: str="", spawnflags=""):
        Entity.__init__(self, "point_teleport", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Entity To Teleport : Name of the entity that will be teleported.
        self.target: str = target
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "target", "spawnflags"])


class PointTemplate(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 5240.
    Turns an entity, or set of entities, into a single template that can be instanced anywhere, and multiple times. If there are interdependencies (entity I/O, hierarchy, or other name references) between the entities in the template, the entities in the template will have their names changed and the interdependencies will be reconnected to the changes names. The name change format is as follows: '<original name>&0000', where the 0000 will be replaced with the current global template instance, so wildcard searches for '<original name>*' will still find them.\nIf you don't want the name fixup to happen, because you're only spawning the template once, or you want inputs to trigger all instances of the template, check the 'Preserve entity names' spawnflag. \nTo spawn the template in other places, use an env_entity_maker.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", Template01: str="", Template02: str="", Template03: str="", Template04: str="", Template05: str="", Template06: str="", Template07: str="", Template08: str="", Template09: str="", Template10: str="", Template11: str="", Template12: str="", Template13: str="", Template14: str="", Template15: str="", Template16: str=""):
        Entity.__init__(self, "point_template", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Template 1 : 
        self.Template01: str = Template01
        # Template 2 : 
        self.Template02: str = Template02
        # Template 3 : 
        self.Template03: str = Template03
        # Template 4 : 
        self.Template04: str = Template04
        # Template 5 : 
        self.Template05: str = Template05
        # Template 6 : 
        self.Template06: str = Template06
        # Template 7 : 
        self.Template07: str = Template07
        # Template 8 : 
        self.Template08: str = Template08
        # Template 9 : 
        self.Template09: str = Template09
        # Template 10 : 
        self.Template10: str = Template10
        # Template 11 : 
        self.Template11: str = Template11
        # Template 12 : 
        self.Template12: str = Template12
        # Template 13 : 
        self.Template13: str = Template13
        # Template 14 : 
        self.Template14: str = Template14
        # Template 15 : 
        self.Template15: str = Template15
        # Template 16 : 
        self.Template16: str = Template16

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "Template01", "Template02", "Template03", "Template04", "Template05", "Template06", "Template07", "Template08", "Template09", "Template10", "Template11", "Template12", "Template13", "Template14", "Template15", "Template16"])


class PointTesla(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2865.
    An entity that creates tesla lightning arcs around its origin.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", m_SourceEntityName: str="", m_SoundName: str="DoSpark", texture: str="sprites/physbeam.vmt", m_Color: "RGB"="255 255 255", m_flRadius: int=200, beamcount_min: int=6, beamcount_max: int=8, thick_min: str="4", thick_max: str="5", lifetime_min: str="0.3", lifetime_max: str="0.3", interval_min: str="0.5", interval_max: str="2"):
        Entity.__init__(self, "point_tesla", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Source Entity : If specified, tesla lightning will originate from the specified entity. Otherwise, they originate from this entity.
        self.m_SourceEntityName: str = m_SourceEntityName
        # Sound Name : Sound to be played whenever lightning is created.
        self.m_SoundName: str = m_SoundName
        # Sprite Name : Material to use for the tesla lightning beams.
        self.texture: str = texture
        # Color : 
        self.m_Color: "RGB" = m_Color
        # Radius : Radius around the origin to find a point to strike with a tesla lightning beam.
        self.m_flRadius: int = m_flRadius
        # Min # of Beams : Minimum number of tesla lightning beams to create when creating an arc.
        self.beamcount_min: int = beamcount_min
        # Max # of Beams : Maximum number of tesla lightning beams to create when creating an arc.
        self.beamcount_max: int = beamcount_max
        # Min Beam Width : Minimum width of the tesla lightning beams.
        self.thick_min: str = thick_min
        # Max Beam Width : Maximum width of the tesla lightning beams.
        self.thick_max: str = thick_max
        # Min Time Visible : Minimum lifetime of the tesla lightning beams.
        self.lifetime_min: str = lifetime_min
        # Max Time Visible : Maximum lifetime of the tesla lightning beams.
        self.lifetime_max: str = lifetime_max
        # Min Time Between Arcs : Minimum time delay between random arcing.
        self.interval_min: str = interval_min
        # Max Time Between Arcs : Maximum time delay between random arcing.
        self.interval_max: str = interval_max

        self.auto_properties.extend(["origin", "targetname", "parentname", "m_SourceEntityName", "m_SoundName", "texture", "m_Color", "m_flRadius", "beamcount_min", "beamcount_max", "thick_min", "thick_max", "lifetime_min", "lifetime_max", "interval_min", "interval_max"])


class PointVelocitysensor(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 6796.
    An entity that detects and outputs an entity's velocity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", axis="", enabled=1):
        Entity.__init__(self, "point_velocitysensor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target Entity Name : Name of the entity whose velocity will be sensed.
        self.target: str = target
        # Measurement Axis : 
        self.axis = axis
        # Start Enabled : Whether or not to start enabled and active.
        self.enabled = enabled

        self.auto_properties.extend(["origin", "targetname", "target", "axis", "enabled"])


class PointViewcontrol(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4550.
    A camera entity that controls the player's view. While it's active, the player will see out of the camera.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", parentname: str="", target: str="", targetattachment: str="", wait: int=10, moveto: str="", interpolatepositiontoplayer=0, spawnflags="", speed: str="0", acceleration: str="500", deceleration: str="500", fov: float="90", fov_rate: float="0", DontSetPlayerView=0):
        Entity.__init__(self, "point_viewcontrol", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Entity to Look At : Name of the entity that the camera should point at and track while active.
        self.target: str = target
        # Target Attachment Name : If set, the camera will focus on the specified attachment on the 'Entity to Look At'.
        self.targetattachment: str = targetattachment
        # Hold Time : The amount of time the camera should control the player's view for, after which it deactivates itself. If the camera should stay active until told to deactive, set the 'Infinite Hold Time' spawnflag.
        self.wait: int = wait
        # Path Corner : The first path corner in a track that the camera should move along once it's activated. If not specified, the camera won't move. This can actually be literally any entity, but don't worry about that.
        self.moveto: str = moveto
        # Interpolate Position To Player : Gradually interpolate player's position to here on start. (Episodic only)
        self.interpolatepositiontoplayer = interpolatepositiontoplayer
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Initial Speed : The starting speed that the camera moves at, if it's on a path track.
        self.speed: str = speed
        # Acceleration units/sec^2 : The speed at which the camera accelerates to path corner's desired speeds.
        self.acceleration: str = acceleration
        # Stop Deceleration units/sec^2 : The speed at which the camera decelerates to path corner's desired speeds.
        self.deceleration: str = deceleration
        # FOV : The player's FOV when using this camera. Be sure to have the 'Set FOV' spawnflag enabled if you want to use this.
        self.fov: float = fov
        # FOV rate : How quickly the FOV should be set. Be sure to have the 'Set FOV' spawnflag enabled if you want to use this.
        self.fov_rate: float = fov_rate
        # Don't set player view : Prevents this point_viewcontrol from actually controlling the player's view. FOV, player-affecting spawnflags, etc. may still happen.
        self.DontSetPlayerView = DontSetPlayerView

        self.auto_properties.extend(["origin", "targetname", "angles", "parentname", "target", "targetattachment", "wait", "moveto", "interpolatepositiontoplayer", "spawnflags", "speed", "acceleration", "deceleration", "fov", "fov_rate", "DontSetPlayerView"])


class PropDetail(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7431.
    Detail Prop
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", model: str=""):
        Entity.__init__(self, "prop_detail", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # World model : 
        self.model: str = model

        self.auto_properties.extend(["origin", "model"])


class PropDoorRotating(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 4269.
    An entity used to place a door in the world.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", globalname: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", disableshadows=1, slavename: str="", hardware=1, ajarangles: "Origin"="0 0 0", spawnpos=0, axis="", distance: float=90, speed: int=100, soundopenoverride: str="", soundcloseoverride: str="", soundmoveoverride: str="", returndelay: int=-1, dmg: int=0, health: int=0, soundlockedoverride: str="", soundunlockedoverride: str="", lightingorigin: str="", forceclosed=0, spawnflags="", opendir=0):
        Entity.__init__(self, "prop_door_rotating", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname


        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup

        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows
        # Slave Name : The name of any doors that should be slaved to this door (i.e. should open when this one opens, and close when this one closes).
        self.slavename: str = slavename
        # Hardware Type : 
        self.hardware = hardware
        # Ajar Angles (Pitch Yaw Roll) : If the door 'Spawn Position' is set to Ajar, these are the angles to spawn at, instead of being open or closed.
        self.ajarangles: "Origin" = ajarangles
        # Spawn Position : 
        self.spawnpos = spawnpos
        # Hinge Axis : 
        self.axis = axis
        # Rotation Distance (deg) : The amount, in degrees, that the door should rotate when opened.
        self.distance: float = distance
        # Speed : The speed at which the door moves.
        self.speed: int = speed
        # Fully Open Sound : Sound played when the door has finished opening.
        self.soundopenoverride: str = soundopenoverride
        # Fully Closed Sound : Sound played when the door has finished closing.
        self.soundcloseoverride: str = soundcloseoverride
        # Moving Sound : Sound played when the door starts to move.
        self.soundmoveoverride: str = soundmoveoverride
        # Delay Before close (-1 stay open) : Amount of time, in seconds, after the door has opened before it closes. If the value is set to -1, the door never closes itself.
        self.returndelay: int = returndelay
        # Damage Inflicted When Blocked : Amount of damage done to entities that block the movement of this door, per frame.
        self.dmg: int = dmg
        # Health (0 = Unbreakable) : 
        self.health: int = health
        # Locked Sound : Sound played when the player tries to open the door, and fails because it's locked.
        self.soundlockedoverride: str = soundlockedoverride
        # Unlocked Sound : Sound played when the door is unlocked.
        self.soundunlockedoverride: str = soundunlockedoverride
        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Force Closed : If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects.
        self.forceclosed = forceclosed
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Open Direction : Force the door to open only forwards or only backwards. Both directions is the standard door behavior.
        self.opendir = opendir

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "globalname", "model", "skin", "modelscale", "SetBodyGroup", "disableshadows", "slavename", "hardware", "ajarangles", "spawnpos", "axis", "distance", "speed", "soundopenoverride", "soundcloseoverride", "soundmoveoverride", "returndelay", "dmg", "health", "soundlockedoverride", "soundunlockedoverride", "lightingorigin", "forceclosed", "spawnflags", "opendir"])


class PropDynamic(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7442.
    A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used as a prop_physics (i.e. it should be physically simulated) then it CANNOT be used as a prop_dynamic. Upon level load it will display a warning in the console and remove itself. Use a prop_physics instead.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", globalname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, solid=6, spawnflags="", DefaultAnim: str="", RandomAnimation=0, MinAnimTime: float="5", MaxAnimTime: float="10", SetBodyGroup: int=0, DisableBoneFollowers=0, StartDisabled=0):
        Entity.__init__(self, "prop_dynamic", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Collisions : 
        self.solid = solid
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Default Animation : The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation.
        self.DefaultAnim: str = DefaultAnim
        # Randomly Animate : If set, this prop will randomly choose and play animations, based upon the times specified in 'Min/Max Random Anim Time'. Inbetween the random animations, it will revert to playing the 'Default Animation'.
        self.RandomAnimation = RandomAnimation
        # Min Random Anim Time : Minimum time between random animations.
        self.MinAnimTime: float = MinAnimTime
        # Max Random Anim Time : Maximum time between random animations.
        self.MaxAnimTime: float = MaxAnimTime
        # Body Group : 
        self.SetBodyGroup: int = SetBodyGroup
        # Disable Bone Followers : If set, this prop won't generate bone followers, even if they're listed in the model's .qc
        self.DisableBoneFollowers = DisableBoneFollowers

        # Start Disabled : 
        self.StartDisabled = StartDisabled


        self.auto_properties.extend(["origin", "parentname", "globalname", "angles", "lightingorigin", "model", "skin", "modelscale", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "solid", "spawnflags", "DefaultAnim", "RandomAnimation", "MinAnimTime", "MaxAnimTime", "SetBodyGroup", "DisableBoneFollowers", "StartDisabled"])


class PropDynamicOrnament(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7613.
    A way to attach one studio model to another as an ornament. It will render in the way that player/NPC weapons render.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", globalname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, spawnflags="", DefaultAnim: str="", RandomAnimation=0, MinAnimTime: float="5", MaxAnimTime: float="10", SetBodyGroup: int=0, DisableBoneFollowers=0, solid=0, InitialOwner: str=""):
        Entity.__init__(self, "prop_dynamic_ornament", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Default Animation : The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation.
        self.DefaultAnim: str = DefaultAnim
        # Randomly Animate : If set, this prop will randomly choose and play animations, based upon the times specified in 'Min/Max Random Anim Time'. Inbetween the random animations, it will revert to playing the 'Default Animation'.
        self.RandomAnimation = RandomAnimation
        # Min Random Anim Time : Minimum time between random animations.
        self.MinAnimTime: float = MinAnimTime
        # Max Random Anim Time : Maximum time between random animations.
        self.MaxAnimTime: float = MaxAnimTime
        # Body Group : 
        self.SetBodyGroup: int = SetBodyGroup
        # Disable Bone Followers : If set, this prop won't generate bone followers, even if they're listed in the model's .qc
        self.DisableBoneFollowers = DisableBoneFollowers

        # Collisions : 
        self.solid = solid
        # Target Entity : Name of the entity that this ornament should attach to, at startup.
        self.InitialOwner: str = InitialOwner

        self.auto_properties.extend(["origin", "parentname", "globalname", "angles", "lightingorigin", "model", "skin", "modelscale", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "spawnflags", "DefaultAnim", "RandomAnimation", "MinAnimTime", "MaxAnimTime", "SetBodyGroup", "DisableBoneFollowers", "solid", "InitialOwner"])


class PropDynamicOverride(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7450.
    A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage.\nprop_dynamic_override is a prototyping entity only. It will allow the use of models designed to be used as prop_physics.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", globalname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, solid=6, spawnflags="", DefaultAnim: str="", RandomAnimation=0, MinAnimTime: float="5", MaxAnimTime: float="10", SetBodyGroup: int=0, DisableBoneFollowers=0, health: int=0):
        Entity.__init__(self, "prop_dynamic_override", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Collisions : 
        self.solid = solid
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Default Animation : The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation.
        self.DefaultAnim: str = DefaultAnim
        # Randomly Animate : If set, this prop will randomly choose and play animations, based upon the times specified in 'Min/Max Random Anim Time'. Inbetween the random animations, it will revert to playing the 'Default Animation'.
        self.RandomAnimation = RandomAnimation
        # Min Random Anim Time : Minimum time between random animations.
        self.MinAnimTime: float = MinAnimTime
        # Max Random Anim Time : Maximum time between random animations.
        self.MaxAnimTime: float = MaxAnimTime
        # Body Group : 
        self.SetBodyGroup: int = SetBodyGroup
        # Disable Bone Followers : If set, this prop won't generate bone followers, even if they're listed in the model's .qc
        self.DisableBoneFollowers = DisableBoneFollowers

        # Health : Number of points of damage to take before breaking.  0 means don't break.
        self.health: int = health

        self.auto_properties.extend(["origin", "parentname", "globalname", "angles", "lightingorigin", "model", "skin", "modelscale", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "solid", "spawnflags", "DefaultAnim", "RandomAnimation", "MinAnimTime", "MaxAnimTime", "SetBodyGroup", "DisableBoneFollowers", "health"])


class PropPhysics(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7560.
    A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other constraints. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used as a prop_dynamic (i.e. it should not be physically simulated) then it CANNOT be used as a prop_physics. Upon level load it will display a warning in the console and remove itself. Use a prop_dynamic instead.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0):
        Entity.__init__(self, "prop_physics", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows


        self.auto_properties.extend(["origin", "globalname", "angles", "lightingorigin", "model", "skin", "modelscale", "SetBodyGroup", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows"])


class PropPhysicsMultiplayer(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7574.
    This class is the same as prop_physics, except the runtime collisions use a more bouncy method that avoids the prediction errors normal physics objects get.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, physicsmode=0):
        Entity.__init__(self, "prop_physics_multiplayer", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows


        # Physics Mode : 
        self.physicsmode = physicsmode

        self.auto_properties.extend(["origin", "globalname", "angles", "lightingorigin", "model", "skin", "modelscale", "SetBodyGroup", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "physicsmode"])


class PropPhysicsOverride(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7527.
    A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other constraints. It can also be configured to break when it takes enough damage. Props not meant to be used with prop_physics (dynamic or static props) can be used with this and it can also override health or interactions.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", health: int=0, InitialInteractions="", preferredcarryangles: "Origin"="0"):
        Entity.__init__(self, "prop_physics_override", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # Health : Number of points of damage to take before breaking.  0 means don't break. Use -1 to use default health, which could be 0 depending on the model.
        self.health: int = health
        # Interaction Override : Overrides this prop's default interactions. If you want to combine them, enter each number with a space or comma in between. (e.g. '1 5 7')
        self.InitialInteractions = InitialInteractions
        # Preferred Player-carry Angles : The angle which the object should orient to when the player picks it up with the physgun or +USE. Overrides the prop's own QC carry angles if it has any. '0' doesn't override the carry angles.
        self.preferredcarryangles: "Origin" = preferredcarryangles

        self.auto_properties.extend(["origin", "globalname", "angles", "lightingorigin", "model", "skin", "modelscale", "SetBodyGroup", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "health", "InitialInteractions", "preferredcarryangles"])


class PropRagdoll(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7592.
    A prop that physically simulates and can be articulated with internal joints. The joint constraints are part of the physics model.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", disableshadows=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, StartDisabled=0, renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, spawnflags="", angleOverride: str=""):
        Entity.__init__(self, "prop_ragdoll", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Override Animation : Filled in by the engine via wc_update_entity, do not edit by hand except to clear.
        self.angleOverride: str = angleOverride

        self.auto_properties.extend(["origin", "angles", "targetname", "lightingorigin", "model", "skin", "modelscale", "SetBodyGroup", "disableshadows", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "StartDisabled", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "spawnflags", "angleOverride"])


class PropSphere(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7587.
    Creates a perfect sphere.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", viewhideflags=0, disablereceiveshadows=0, radius: float=12):
        Entity.__init__(self, "prop_sphere", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. Most of these are only used by sprites.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # View ID nodraw : This keyvalue can control whether an entity should only draw on things like monitors or mirrors, or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs.
        self.viewhideflags = viewhideflags
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Radius : 
        self.radius: float = radius

        self.auto_properties.extend(["origin", "globalname", "angles", "lightingorigin", "model", "skin", "modelscale", "SetBodyGroup", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "renderfx", "rendermode", "renderamt", "rendercolor", "viewhideflags", "disablereceiveshadows", "radius"])


class PropStatic(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7437.
    A prop that doesn't move and doesn't animate.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, model: str="", skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0):
        Entity.__init__(self, "prop_static", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals


        self.auto_properties.extend(["origin", "angles", "mindxlevel", "maxdxlevel", "model", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals"])


class ShadowControl(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 3591.
    An entity to control the shadows in the map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="80 30 0", color: "RGB"="128 128 128", distance: float=75, disableallshadows=0, enableshadowsfromlocallights=0):
        Entity.__init__(self, "shadow_control", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        # Pitch Yaw Roll (Y Z X) : This is the shadow direction. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, and roll is the rotation around the X axis.
        self.angles: "Origin" = angles
        # Shadow Color : This is the color of the shadows.
        self.color: "RGB" = color
        # Maximum Distance : This is the maximum distance the shadow is allowed to cast, in inches.
        self.distance: float = distance
        # All Shadows Disabled : 
        self.disableallshadows = disableallshadows
        # Enable Local Light Shadows : Enables RTT dynamic shadow angles, which cause shadows to face away from the nearest light source instead of always using this entity's direction. This is a new feature and the original Half-Life 2 had no dynamic shadow angles. Leave this off if they are not desired.
        self.enableshadowsfromlocallights = enableshadowsfromlocallights

        self.auto_properties.extend(["origin", "targetname", "angles", "color", "distance", "disableallshadows", "enableshadowsfromlocallights"])


class SimplePhysicsBrush(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7638.
    A simple physics brush with no unique properties. Brush-based entities converted by phys_convert are turned into this entity. See func_physbox for more options.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", spawnflags=""):
        Entity.__init__(self, "simple_physics_brush", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "spawnflags"])


class SimplePhysicsProp(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 7628.
    A simple physics prop with no unique properties. Model-based entities converted by phys_convert are turned into this entity. See prop_physics for more options.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", lightingorigin: str="", model: str="", skin: int=0, modelscale: float="1.0", SetBodyGroup: int="", disableshadows=0, spawnflags=""):
        Entity.__init__(self, "simple_physics_prop", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Lighting Origin : Select an entity to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Bodygroup : Sets this model's bodygroup (from 0 - n). You can do things like put headcrabs on zombie ragdolls by using '1' here, but it's probably best not to mess with it if you don't know what it is.
        self.SetBodyGroup: int = SetBodyGroup
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "lightingorigin", "model", "skin", "modelscale", "SetBodyGroup", "disableshadows", "spawnflags"])


class SkyCamera(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2596.
    An entity used to control the 3D Skybox. Its origin is used to determine the 3D Skybox's position relative to the map. Place this entity, in the 3D Skybox, at the point where the origin of the map should be.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", parentname: str="", spawnflags="", skycolor: "RGB"="255 255 255 0", scale: int=16, fogenable=0, fogblend=0, use_angles=0, use_angles_for_sky=0, fogcolor: "RGB"="255 255 255", fogcolor2: "RGB"="255 255 255", fogdir: str="1 0 0", fogstart: str="500.0", fogend: str="2000.0", fogmaxdensity: float="1", farz: float="0"):
        Entity.__init__(self, "sky_camera", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent : The name of the entity to move with. NOTE: sky_camera's position is normally only updated on spawn. Fire the ForceUpdate or StartUpdating inputs to update the sky_camera's position! You might also want to enable Use Angles for Sky.
        self.parentname: str = parentname
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sky Color : Causes the skybox to use a solid color instead of the sky texture specified in worldspawn. Blended alpha is unfortunately not supported, but an alpha of '0' disables the effect and any alpha greater than that (e.g. 255) enables the effect.
        self.skycolor: "RGB" = skycolor
        # 3D Skybox scale : Scale of the skybox.
        self.scale: int = scale
        # Fog Enable : 
        self.fogenable = fogenable
        # Fog Blend : 
        self.fogblend = fogblend
        # Use Angles for Fog Dir : 
        self.use_angles = use_angles
        # Use Angles for Sky : Uses angles for actual skybox rotation, as if the world were tilted on this entity's axis.
        self.use_angles_for_sky = use_angles_for_sky
        # Primary Fog Color : 
        self.fogcolor: "RGB" = fogcolor
        # Secondary Fog Color : 
        self.fogcolor2: "RGB" = fogcolor2
        # Primary Fog Dir : 
        self.fogdir: str = fogdir
        # Fog Start : Distance at which the skybox fog should start.
        self.fogstart: str = fogstart
        # Fog End : Distance at which the skybox fog should be fully opaque.
        self.fogend: str = fogend
        # Fog Max Density [0..1] : 
        self.fogmaxdensity: float = fogmaxdensity
        # Far Z Clip Plane : Clips the sky.
        self.farz: float = farz

        self.auto_properties.extend(["origin", "targetname", "angles", "parentname", "spawnflags", "skycolor", "scale", "fogenable", "fogblend", "use_angles", "use_angles_for_sky", "fogcolor", "fogcolor2", "fogdir", "fogstart", "fogend", "fogmaxdensity", "farz"])


class SkyboxSwapper(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 2799.
    An entity that swaps skybox textures.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", SkyboxName: str=""):
        Entity.__init__(self, "skybox_swapper", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Sky Name : The name of the sky texture to change to.
        self.SkyboxName: str = SkyboxName

        self.auto_properties.extend(["origin", "targetname", "SkyboxName"])


class TanktrainAi(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8030.
    Train chase AI
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", startsound: str="vehicles/diesel_start1.wav", enginesound: str="vehicles/diesel_turbo_loop1.wav", movementsound: str="vehicles/tank_treads_loop1.wav"):
        Entity.__init__(self, "tanktrain_ai", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Train Name : 
        self.target: str = target
        # Start Moving Sound : 
        self.startsound: str = startsound
        # Engine Loop Sound : 
        self.enginesound: str = enginesound
        # Vehicle Movement Sound : 
        self.movementsound: str = movementsound

        self.auto_properties.extend(["origin", "targetname", "target", "startsound", "enginesound", "movementsound"])


class TanktrainAitarget(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8023.
    An entity that changes the target of a tanktrain_ai entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", newtarget: str=""):
        Entity.__init__(self, "tanktrain_aitarget", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Tank AI Entity : The tanktrain_ai entity to change the target of.
        self.target: str = target
        # New Target Entity : The entity to tell the tanktrain_ai to target.
        self.newtarget: str = newtarget

        self.auto_properties.extend(["origin", "targetname", "target", "newtarget"])


class TestTraceline(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8086.
    A debugging tool for testing tracelines.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "test_traceline", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "angles"])


class TriggerApplyImpulse(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 9027.
    A trigger that adds impulse to touching entities.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", impulse_dir: "Origin"="0 0 0", force: float="300"):
        Entity.__init__(self, "trigger_apply_impulse", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Impulse Direction (Pitch Yaw Roll) : Angles indicating the direction to push touching entities.
        self.impulse_dir: "Origin" = impulse_dir
        # Impulse Force : 
        self.force: float = force

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "impulse_dir", "force"])


class TriggerAutosave(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8098.
    A trigger volume that autosaves when the player touches it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", master: str="", NewLevelUnit=0, DangerousTimer: float=0, MinimumHitPoints: int=0):
        Entity.__init__(self, "trigger_autosave", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Master : Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate.
        self.master: str = master
        # Force New Level Unit : If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels.
        self.NewLevelUnit = NewLevelUnit
        # Dangerous Timer : The number of seconds the player must survive before this autosave takes effect.
        self.DangerousTimer: float = DangerousTimer
        # Minumum Hit Points : Don't save dangerous when player has less than this many hitpoints.
        self.MinimumHitPoints: int = MinimumHitPoints

        self.auto_properties.extend(["targetname", "master", "NewLevelUnit", "DangerousTimer", "MinimumHitPoints"])


class TriggerChangelevel(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8112.
    An entity that triggers a level change.\nPlace an info_landmark in both maps that marks the 'same' location in each map.\nTIPS & TRICKS: To fire events in the next level, use the OnLevelChange output to turn on an env_global in the current level.  Create a logic_auto in the next level that checks for the state set by the env_global.\n\nTo control which entities go through the level transition, create one or more trigger_transitions and give them the same name as the landmark. Any entities within the trigger_transition(s) will go to the next map.
    """
    def __init__(self, vmf_map: "ValveMap", StartDisabled=0, targetname: str="", map: str="", landmark: str="", spawnflags=""):
        Entity.__init__(self, "trigger_changelevel", vmf_map)

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Name : 
        self.targetname: str = targetname
        # New Map Name : 
        self.map: str = map
        # Landmark Name : 
        self.landmark: str = landmark
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["StartDisabled", "targetname", "map", "landmark", "spawnflags"])


class TriggerFall(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8348.
    A trigger that causes the player to die the moment they touch the ground as long as they are inside of this volume.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", StayLethal=0):
        Entity.__init__(self, "trigger_fall", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername

        # Stay Lethal : Causes players who touch this trigger to be marked for death by fall damage even after they leave the volume.
        self.StayLethal = StayLethal

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "StayLethal"])


class TriggerGravity(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8137.
    A trigger volume that changes the gravity on any entity that touches it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", gravity: int=1):
        Entity.__init__(self, "trigger_gravity", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Gravity (0-1) : 
        self.gravity: int = gravity

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "gravity"])


class TriggerHurt(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8165.
    A trigger volume that damages entities that touch it.
    """
    def __init__(self, vmf_map: "ValveMap", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", targetname: str="", damagetype=0, damagepresets=0, damageor=0, damage: int=10, damagecap: int=20, damagemodel=0, nodmgforce=0, hurtrate: float="0.5"):
        Entity.__init__(self, "trigger_hurt", vmf_map)






        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Type : The type(s) of damage associated with this entity.
        self.damagetype = damagetype
        # Damage Presets : User-friendly 'presets' based on combined damage types. This is accompanied by the damage type and damage or, if they are specified.
        self.damagepresets = damagepresets
        # Damage Or : Optional flags that can accompany the damage type.
        self.damageor = damageor

        # Damage : The amount of damage done to entities that touch this trigger. The damage is done every half-second. See also 'Damage Model' for extra details on how damage can be dealt.
        self.damage: int = damage
        # Damage Cap : Maximum damage dealt per second. This field is only used if you select the Doubling w/Forgiveness damage model, via the spawnflag.
        self.damagecap: int = damagecap
        # Damage Model : How damage is dealt. Normal always does the specified amount of damage each half second. Doubling starts with the specified amount and doubles it each time it hurts the toucher. Forgiveness means that if the toucher gets out of the trigger the damage will reset to the specified value. Good for making triggers that are deadly over time without having to cause massive damage on each touch.
        self.damagemodel = damagemodel
        # Zero Damage Force : Should the damaged entity receive no physics force from this trigger.
        self.nodmgforce = nodmgforce
        # Hurt Rate : Touchers will be hurt every X seconds while in this trigger_hurt.
        self.hurtrate: float = hurtrate

        self.auto_properties.extend(["parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "targetname", "damagetype", "damagepresets", "damageor", "damage", "damagecap", "damagemodel", "nodmgforce", "hurtrate"])


class TriggerImpact(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8278.
    A trigger volume that can be told to push all physics objects that are inside of it in the direction specified by this trigger's angles.\nAlso outputs the force at the time of impact for anyone else that wants to use it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", Magnitude: float=200, noise: float="0.1", viewkick: float="0.05"):
        Entity.__init__(self, "trigger_impact", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Magnitude : The strength of the impact. Negative values reverse the direction.
        self.Magnitude: float = Magnitude
        # Noise : The amount of directional noise (0-1). 0 = no noise, 1 = random direction.
        self.noise: float = noise
        # Viewkick : The amount to kick player's view if the player is in the trigger.  Proportional to magnitude (0-1).
        self.viewkick: float = viewkick

        self.auto_properties.extend(["targetname", "origin", "angles", "Magnitude", "noise", "viewkick"])


class TriggerLook(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8220.
    An entity used to trigger something when the player looks at something. It fires 'OnTrigger' when the player looks at a target entity for the given amount of time, while within the trigger volume. If the player leaves the trigger or looks away from the target entity the clock resets. If the 'Use Velocity instead of facing' spawnflag is checked, the trigger uses the player's velocity instead of the player's view, so it determines whenever the player is moving toward the target entity. Useful for triggering when players are driving a vehicle at something.NOTE: Only designed for single-player game. 
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", filtername: str="", spawnflags="", target: str="", LookTime: str="0.5", FieldOfView: str="0.9", Timeout: float="0", UseLOS=0):
        Entity.__init__(self, "trigger_look", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Look Target : The name of the entity to be looked at.
        self.target: str = target
        # LookTime : The time, in seconds, that the player must look the target before firing the output. Resets if player leaves trigger, or looks outside the Field of View threshold.
        self.LookTime: str = LookTime
        # FieldOfView : How close the player has to be looking at the target. 1.0 = straight ahead\n 0.0 = +/- 90 degrees\n -1.0 = all directions).
        self.FieldOfView: str = FieldOfView
        # Timeout : The time, in seconds, to wait after player enters the trigger before firing the OnTimeout output, 0 = never.
        self.Timeout: float = Timeout
        # Require LOS : If enabled, the player must have full LOS to the target entity in order to count as ''looking''.
        self.UseLOS = UseLOS

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "filtername", "spawnflags", "target", "LookTime", "FieldOfView", "Timeout", "UseLOS"])


class TriggerMultiple(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8202.
    A trigger volume that can be triggered multiple times.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", wait: int=1):
        Entity.__init__(self, "trigger_multiple", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Delay Before Reset : Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again (in which case you should just use a trigger_once).
        self.wait: int = wait

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "wait"])


class TriggerOnce(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8213.
    A trigger volume that removes itself after it is triggered once.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str=""):
        Entity.__init__(self, "trigger_once", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername"])


class TriggerPlayermovement(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8143.
    An entity that can be used to disable player's automatic ducking/unducking when jumping.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", filtername: str="", spawnflags=""):
        Entity.__init__(self, "trigger_playermovement", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "filtername", "spawnflags"])


class TriggerProximity(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8294.
    Measures the distance of the player within the trigger volume from a given point (and within a given radius). The NearestPlayerDistance output will be 0 when the player is at the center point, and 1 when the player is at the radius.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", measuretarget: str="", radius: str=256):
        Entity.__init__(self, "trigger_proximity", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Point to Measure From : The name of a target entity who's origin is the point to measure the player's distance from.
        self.measuretarget: str = measuretarget
        # Radius to measure within : The radius to which the distance should be mapped. If the player is outside the radius he will be ignored.
        self.radius: str = radius

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "measuretarget", "radius"])


class TriggerPush(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8250.
    A trigger volume that pushes entities that touch it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", filtername: str="", pushdir: "Origin"="0 0 0", spawnflags="", speed: int=40, alternateticksfix: float="0"):
        Entity.__init__(self, "trigger_push", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Push Direction (Pitch Yaw Roll) : Angles indicating the direction to push touched entities.
        self.pushdir: "Origin" = pushdir
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Speed of Push : The speed at which to push entities away, in inches / second.
        self.speed: int = speed
        # Scale force for alternate ticks : If nonzero, scale the force by this amount when running with alternate ticks. This fixes problems with an overly large force due to the longer frametime on when running with sv_alternateticks 1.
        self.alternateticksfix: float = alternateticksfix

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "filtername", "pushdir", "spawnflags", "speed", "alternateticksfix"])


class TriggerRemove(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8194.
    A trigger volume that removes any entities that touch it. Be careful, removing some entities can cause instability. This is not the same as killing entities. i.e. NPCs removed in this manner will not fire their OnKilled outputs.
    """
    def __init__(self, vmf_map: "ValveMap", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", targetname: str=""):
        Entity.__init__(self, "trigger_remove", vmf_map)






        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "targetname"])


class TriggerServerragdoll(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8343.
    A volume that forces any NPC inside it to create a server side ragdoll instead of a client one.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str=""):
        Entity.__init__(self, "trigger_serverragdoll", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername"])


class TriggerSoundscape(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8157.
    Soundscape trigger. It is not necessary to create outputs for this trigger. It automatically will trigger the soundscape referred to by its 'Soundscape' property.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", soundscape: str=""):
        Entity.__init__(self, "trigger_soundscape", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Soundscape : 
        self.soundscape: str = soundscape

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "soundscape"])


class TriggerTeleport(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8308.
    A trigger volume that teleports entities that touch it. Entities are teleported to the Remote Destination, and have their angles set to that of the Remote Destination's. If a Local Destination Landmark is specified, teleported entities are offset from the target by their initial offset from the landmark, and their angles are left alone.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", filtername: str="", target: str="", landmark: str="", spawnflags=""):
        Entity.__init__(self, "trigger_teleport", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Remote Destination : The entity specifying the point to which entities should be teleported.
        self.target: str = target
        # Local Destination Landmark : If specified, then teleported entities are offset from the target by their initial offset from the landmark.
        self.landmark: str = landmark
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "filtername", "target", "landmark", "spawnflags"])


class TriggerTeleportRelative(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8328.
    A trigger volume that teleports entities that touch it to their current position relative to the given offset. Their angles stay the same, but velocity is reset. Use trigger_teleport for more complicated teleporting operations.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", teleportoffset: "Origin"="0 0 0"):
        Entity.__init__(self, "trigger_teleport_relative", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Teleport Offset : The offset.
        self.teleportoffset: "Origin" = teleportoffset

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "teleportoffset"])


class TriggerTransition(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8336.
    A volume that's used to control which entities go through the level transition. Create one or more trigger_transitions and give them the same name as the changelevel landmark. Any entities within the trigger_transition(s) will go to the next map.See trigger_changelevel for more info.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str=""):
        Entity.__init__(self, "trigger_transition", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["targetname"])


class TriggerWind(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8265.
    A trigger volume that pushes physics objects that touch it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", angles: "Origin"="0 0 0", Speed: int=200, SpeedNoise: int=0, DirectionNoise: int=10, HoldTime: int=0, HoldNoise: int=0):
        Entity.__init__(self, "trigger_wind", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Speed : The baseline for how hard the wind blows.
        self.Speed: int = Speed
        # Speed Noise : Noise added to wind speed +/-
        self.SpeedNoise: int = SpeedNoise
        # Direction Noise : Noise added to wind direction.
        self.DirectionNoise: int = DirectionNoise
        # Hold Time : Baseline for how long to wait before changing wind.
        self.HoldTime: int = HoldTime
        # Hold Noise : Noise added to how long to wait before changing wind.
        self.HoldNoise: int = HoldNoise

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "angles", "Speed", "SpeedNoise", "DirectionNoise", "HoldTime", "HoldNoise"])


class VguiScreen(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1620.
    A VGUI screen. Useful for in-world monitors.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", panelname: str="", overlaymaterial: str="", width: int=32, height: int=32):
        Entity.__init__(self, "vgui_screen", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Panel Name : 
        self.panelname: str = panelname
        # Overlay Material : Name of a material to overlay over the top of the VGUI screen. NOTE: This material must write Z for the VGUI screen to work.
        self.overlaymaterial: str = overlaymaterial
        # Panel Width in World : Width of the panel in units.
        self.width: int = width
        # Panel Height in World : Height of the panel in units.
        self.height: int = height


        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "panelname", "overlaymaterial", "width", "height"])


class VguiSlideshowDisplay(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 1625.
    Slideshow Display
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", parentname: str="", displaytext: str="", directory: str="slideshow", minslidetime: float="0.5", maxslidetime: float="0.5", cycletype=0, nolistrepeat=0, width: int=256, height: int=128):
        Entity.__init__(self, "vgui_slideshow_display", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent. Use the format ''<parent name>, <attachment>'' to parent to a specific attachment point.
        self.parentname: str = parentname

        # Display Text : 
        self.displaytext: str = displaytext
        # Image Directory (materials/vgui/...) : 
        self.directory: str = directory
        # Min Slide Time : Minimum amount of random time that a slide is displayed.
        self.minslidetime: float = minslidetime
        # Max Slide Time : Maximum amount of random time that a slide is displayed.
        self.maxslidetime: float = maxslidetime
        # Cycle Type : 
        self.cycletype = cycletype
        # No List Repeat : 
        self.nolistrepeat = nolistrepeat
        # Panel width : Width of the panel in units.
        self.width: int = width
        # Panel height : Height of the panel in units.
        self.height: int = height

        self.auto_properties.extend(["origin", "targetname", "angles", "parentname", "displaytext", "directory", "minslidetime", "maxslidetime", "cycletype", "nolistrepeat", "width", "height"])


class WaterLodControl(Entity):
    """
    Auto-generated from mapbase_base.fgd, line 8387.
    An entity used to control the LOD behavior of any water in the map. If your map has water, this entity is required.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", cheapwaterstartdistance: float=1000, cheapwaterenddistance: float=2000):
        Entity.__init__(self, "water_lod_control", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Transition to Cheap Water : This is the distance from the camera that water will start transitioning to cheap water, in inches.
        self.cheapwaterstartdistance: float = cheapwaterstartdistance
        # End Transition to Cheap Water : This is the distance from the camera that water will finish transitioning to cheap water, in inches.
        self.cheapwaterenddistance: float = cheapwaterenddistance

        self.auto_properties.extend(["origin", "targetname", "cheapwaterstartdistance", "cheapwaterenddistance"])


