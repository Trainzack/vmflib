"""
Helper classes for creating maps in any Source Engine game that uses garrysmod.fgd.
This file was auto-generated by import_fgd.py on 2020-01-15 18:10:33.592883.
"""

from vmflib2.vmf import *


class EnvProjectedtexture(Entity):
    """
    Auto-generated from garrysmod.fgd, line 19.
    Projected texture entity.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", spawnflags="", target: str="", lightfov: float="90.0", nearz: float="4.0", farz: float="750.0", enableshadows=1, lightonlytarget=0, lightworld=1, lightcolor: "RGB"="255 255 255", lightstrength: float="1.0", cameraspace: int=0, texturename: str="effects/flashlight001", textureframe: int=0):
        Entity.__init__(self, "env_projectedtexture", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # target : target
        self.target: str = target
        # FOV : FOV
        self.lightfov: float = lightfov
        # NearZ : Near Z for projected texture
        self.nearz: float = nearz
        # FarZ : Far Z for projected texture
        self.farz: float = farz
        # Enable Shadows : Enables/disables shadows from this projected texture.
        self.enableshadows = enableshadows
        # Light Only Target : Limit flashlight effect to only effect target entity.
        self.lightonlytarget = lightonlytarget
        # Light World : Control whether flashlight effects static world geometry.
        self.lightworld = lightworld
        # Light Color : Light Color RGB-Intensity
        self.lightcolor: "RGB" = lightcolor
        # Light Strength : How bright the light appears
        self.lightstrength: float = lightstrength
        # Camera Space : Angles are interpreted as being relative to camera.
        self.cameraspace: int = cameraspace
        # Texture Name : The name of the texture to use
        self.texturename: str = texturename
        # Texture Frame : The frame of the texture
        self.textureframe: int = textureframe

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "spawnflags", "target", "lightfov", "nearz", "farz", "enableshadows", "lightonlytarget", "lightworld", "lightcolor", "lightstrength", "cameraspace", "texturename", "textureframe"])


class EnvSkypaint(Entity):
    """
    Auto-generated from garrysmod.fgd, line 62.
    Control the sky colours
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", topcolor="0.2 0.5 1.0", bottomcolor="0.8 1.0 1.0", fadebias: float="1.0", sunsize: float="2.0", sunnormal: "Origin"="0.4 0.0 0.01", sunposmethod=0, suncolor="0.2 0.1 0.0", duskscale: float="1.0", duskintensity: float="1.0", duskcolor="1.0 0.2 0.0", drawstars=0, startexture: str="skybox/starfield", starscale: float="0.5", starfade: float="1.0", starspeed: float="0.01", hdrscale: float="0.66"):
        Entity.__init__(self, "env_skypaint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Sky Top Color : The colour of the top of the sky
        self.topcolor = topcolor
        # Sky Bottom Color : The colour of the bottom of the sky
        self.bottomcolor = bottomcolor
        # Sky Fade Bias : Controls the bias of the fade between top/bottom (1.0 is even)
        self.fadebias: float = fadebias
        # Sun Size : Controls the size of the sun glow
        self.sunsize: float = sunsize
        # Sun Normal : The position of the sun, expressed as a normal from the center of the world
        self.sunnormal: "Origin" = sunnormal
        # Sun Position Method : How should we determine the position of the sun?
        self.sunposmethod = sunposmethod
        # Sun Color : The color of the sun glow (this is additive)
        self.suncolor = suncolor
        # Dusk Scale : The size of the dusk effect (colouring of the horizon)
        self.duskscale: float = duskscale
        # Dusk Intensity : How powerful the dusk effect is
        self.duskintensity: float = duskintensity
        # Dusk Color : The color of the dusk effect
        self.duskcolor = duskcolor
        # Draw Stars : 
        self.drawstars = drawstars
        # Star Texture : The star texture
        self.startexture: str = startexture
        # Star Scale : How big the star texture should be
        self.starscale: float = starscale
        # Star Fade : Fade the star texture towards the horizon
        self.starfade: float = starfade
        # Star Speed : How fast the star texture should scroll across the sky
        self.starspeed: float = starspeed
        # HDR Scale : When rendering your skybox in HDR mode, output will be scaled by this amount.
        self.hdrscale: float = hdrscale

        self.auto_properties.extend(["origin", "targetname", "topcolor", "bottomcolor", "fadebias", "sunsize", "sunnormal", "sunposmethod", "suncolor", "duskscale", "duskintensity", "duskcolor", "drawstars", "startexture", "starscale", "starfade", "starspeed", "hdrscale"])


class FuncLadder(Entity):
    """
    Auto-generated from garrysmod.fgd, line 5.
    Ladder. Players will be able to move freely along this brush, as if it was a ladder.Apply the toolsinvisibleladder material to a func_ladder brush.
    """
    def __init__(self, vmf_map: "ValveMap"):
        Entity.__init__(self, "func_ladder", vmf_map)


class LuaRun(Entity):
    """
    Auto-generated from garrysmod.fgd, line 11.
    Runs Lua Code
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Code: str=""):
        Entity.__init__(self, "lua_run", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Code : Lua code to run when triggered
        self.Code: str = Code

        self.auto_properties.extend(["origin", "targetname", "Code"])


