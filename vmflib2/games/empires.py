"""
Helper classes for creating maps in any Source Engine game that uses empires.fgd.
This file was auto-generated by import_fgd.py on 2020-01-19 09:11:11.950819.
"""

from vmflib2.vmf import *


class EmpBuildingImpAirfactory(Entity):
    """
    Auto-generated from empires.fgd, line 581.
    The air factory allows players to build aircraft.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Buildings/AirFactory/imp_airfactory.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_imp_airfactory", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingImpArmory(Entity):
    """
    Auto-generated from empires.fgd, line 611.
    The armory supplies ammo and health to players.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Buildings/Armory/imp_armory.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_imp_armory", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingImpBarracks(Entity):
    """
    Auto-generated from empires.fgd, line 641.
    The barracks spawns players and allows for dynamic class changes.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Buildings/Barracks/imp_barracks.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_imp_barracks", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "startBuilt"])


class EmpBuildingImpMgturret(Entity):
    """
    Auto-generated from empires.fgd, line 809.
    The MG turret fires on enemy infantry.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/turrets/mg_lvl1/imp_turret_mg_lvl1.mdl", startBuilt=1, level=1):
        Entity.__init__(self, "emp_building_imp_mgturret", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt
        # Level : Determines what level the turret is.
        self.level = level

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "startBuilt", "level"])


class EmpBuildingImpMlturret(Entity):
    """
    Auto-generated from empires.fgd, line 853.
    The ML turret fires on enemy buildings and vehicles.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/turrets/ml_lvl1/imp_turret_ml_lvl1.mdl", startBuilt=1, level=1):
        Entity.__init__(self, "emp_building_imp_mlturret", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt
        # Level : Determines what level the turret is.
        self.level = level

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "startBuilt", "level"])


class EmpBuildingImpRadar(Entity):
    """
    Auto-generated from empires.fgd, line 671.
    The radar provides access to research and detects enemy units.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Buildings/Radar/imp_radar.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_imp_radar", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingImpRefinery(Entity):
    """
    Auto-generated from empires.fgd, line 701.
    The refinery extracts minerals from the ground for purchasing vehicles and buildings.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Buildings/Refinery/imp_refinery.mdl", target: str="", startBuilt=1):
        Entity.__init__(self, "emp_building_imp_refinery", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Resource Node : This is the resource node the refinery is built on.
        self.target: str = target
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "target", "startBuilt"])


class EmpBuildingImpRepairstation(Entity):
    """
    Auto-generated from empires.fgd, line 735.
    The repair station repairs vehicles.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Buildings/RepairPad/imp_repairpad.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_imp_repairstation", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingImpVehiclefactory(Entity):
    """
    Auto-generated from empires.fgd, line 897.
    The vehicle factory produces vehicles.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Buildings/VehicleFactory/imp_vehiclefactory.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_imp_vehiclefactory", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingNfAirfactory(Entity):
    """
    Auto-generated from empires.fgd, line 596.
    The air factory allows players to build aircraft.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Buildings/AirFactory/nf_airfactory.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_nf_airfactory", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingNfArmory(Entity):
    """
    Auto-generated from empires.fgd, line 626.
    The armory supplies ammo and health to players.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Buildings/Armory/nf_armory.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_nf_armory", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingNfBarracks(Entity):
    """
    Auto-generated from empires.fgd, line 656.
    The barracks spawns players and allows for dynamic class changes.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Buildings/Barracks/nf_barracks.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_nf_barracks", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "startBuilt"])


class EmpBuildingNfMgturret(Entity):
    """
    Auto-generated from empires.fgd, line 831.
    The MG turret fires on enemy infantry.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/NF/turrets/mg_lvl1/nf_turret_mg_lvl1.mdl", startBuilt=1, level=1):
        Entity.__init__(self, "emp_building_nf_mgturret", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt
        # Level : Determines what level the turret is.
        self.level = level

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "startBuilt", "level"])


class EmpBuildingNfMlturret(Entity):
    """
    Auto-generated from empires.fgd, line 875.
    The ML turret fires on enemy buildings and vehicles.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/NF/turrets/ml_lvl1/nf_turret_ml_lvl1.mdl", startBuilt=1, level=1):
        Entity.__init__(self, "emp_building_nf_mlturret", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt
        # Level : Determines what level the turret is.
        self.level = level

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "startBuilt", "level"])


class EmpBuildingNfRadar(Entity):
    """
    Auto-generated from empires.fgd, line 686.
    The radar provides access to research and detects enemy units.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Buildings/Radar/nf_radar.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_nf_radar", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingNfRefinery(Entity):
    """
    Auto-generated from empires.fgd, line 718.
    The refinery extracts minerals from the ground for purchasing vehicles and buildings.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Buildings/Refinery/nf_refinery.mdl", target: str="", startBuilt=1):
        Entity.__init__(self, "emp_building_nf_refinery", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Resource Node : This is the resource node the refinery is built on.
        self.target: str = target
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "target", "startBuilt"])


class EmpBuildingNfRepairstation(Entity):
    """
    Auto-generated from empires.fgd, line 750.
    The repair station repairs vehicles.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Buildings/RepairPad/nf_repairpad.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_nf_repairstation", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpBuildingNfVehiclefactory(Entity):
    """
    Auto-generated from empires.fgd, line 912.
    The vehicle factory produces vehicles.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Buildings/VehicleFactory/nf_vehiclefactory.mdl", startBuilt=1):
        Entity.__init__(self, "emp_building_nf_vehiclefactory", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "startBuilt"])


class EmpCapModel(Entity):
    """
    Auto-generated from empires.fgd, line 230.
    An entity with three separate model states for use with capture points: neutral, Northern Faction owned, and Brenodi Empire owned
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", pointNumber: int=0, fademindist: float=-1, fademaxdist: float=0, disableshadows=0, model: str="models/Common/props_system/flagpole01_neutral.mdl", model2: str="models/common/props_system/flagpole01_nf.mdl", model3: str="models/common/props_system/flagpole01_imp.mdl", VisibleOnMap=1):
        Entity.__init__(self, "emp_cap_model", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows
        # Neutral Model : 
        self.model: str = model
        # Northern Faction Model : 
        self.model2: str = model2
        # Brenodi Empire Model : 
        self.model3: str = model3
        # Visible On Minimap : If yes, a flag of the owning team will appear at this entity's location on the minimap.
        self.VisibleOnMap = VisibleOnMap

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "pointNumber", "fademindist", "fademaxdist", "disableshadows", "model", "model2", "model3", "VisibleOnMap"])


class EmpCapPoint(Entity):
    """
    Auto-generated from empires.fgd, line 68.
    Empires capture point.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", pointNumber: int=0, locationName: str="Capture Point 1", timeToCap: int=5, timeToNeutral: int=5, playersRequiredNF: int=1, playersRequiredImp: int=1, canNFCap=0, canImpCap=0, teamOwner=0, linearMap=0, resToGiveNF: float=0, resToGiveImp: float=0, reinfToTakeNF: float=0, reinfToTakeImp: float=0):
        Entity.__init__(self, "emp_cap_point", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Number of this Capture Point : '1' is the first NF flag.  The highest numbered flag is the IMP's first flag.  Each capture point must be given a sequential number identifier to handle automatically enabling the next capture point and disabling the previous one.  A number of '0' will disable this feature requiring manual enabling/disabling of the next capture point.
        self.pointNumber: int = pointNumber
        # Location Name : The name of the capture point displayed to the player.
        self.locationName: str = locationName
        # Time To Capture : The amount of time (in seconds) required to be the only team touching to capture.
        self.timeToCap: int = timeToCap
        # Time To Neutral : The amount of time (in seconds) required to turn an enemy controlled flag neutral.
        self.timeToNeutral: int = timeToNeutral
        # Players Required (NF) : The number of players required to capture of team Northern Faction.
        self.playersRequiredNF: int = playersRequiredNF
        # Players Required (Imp) : The number of players required to capture of team Brenodi Empire.
        self.playersRequiredImp: int = playersRequiredImp
        # NF Cappable : Can the capture point be captured by the Northern Faction?
        self.canNFCap = canNFCap
        # Imp Cappable : Can the capture point be captured by the Brenodi Empire?
        self.canImpCap = canImpCap
        # Owned By : The initial owner of this capture point.
        self.teamOwner = teamOwner
        # Linear Capture : If yes, then the next capture point (based on capture point number) will be enabled for capture while the previous will be disabled to force capture points to be captured in a linear order.  Otherwise, the capture point number will only be utilized to enable/disable entities associated with this capture point.
        self.linearMap = linearMap
        # Resources to Give the NF : Number of resources to give to the Northern Faction per second when they have it captured.
        self.resToGiveNF: float = resToGiveNF
        # Resources to Give the Imperials : Number of resources to give to the Brenodi Empire per second when they have it captured.
        self.resToGiveImp: float = resToGiveImp
        # Reinforcements to take NF : Number of reinforcements to take from Northern Faction when the Brenodi Empire have it captured.
        self.reinfToTakeNF: float = reinfToTakeNF
        # Reinforcements to take Imperials : Number of reinforcements to take from the Brenodi Empire when the Northern Faction have it captured.
        self.reinfToTakeImp: float = reinfToTakeImp

        self.auto_properties.extend(["targetname", "parentname", "origin", "pointNumber", "locationName", "timeToCap", "timeToNeutral", "playersRequiredNF", "playersRequiredImp", "canNFCap", "canImpCap", "teamOwner", "linearMap", "resToGiveNF", "resToGiveImp", "reinfToTakeNF", "reinfToTakeImp"])


class EmpCommRestrict(Entity):
    """
    Auto-generated from empires.fgd, line 956.
    This brush will restrict commanders from building any item that touches it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str=""):
        Entity.__init__(self, "emp_comm_restrict", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        self.auto_properties.extend(["targetname", "parentname"])


class EmpCommanderAutoTarget(Entity):
    """
    Auto-generated from empires.fgd, line 1589.
    An entity that sets commander targets on entities passed in with SetPlayerTarget
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", targetEntityName: str=""):
        Entity.__init__(self, "emp_commander_auto_target", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target Entity Name : The name of the entity to target.
        self.targetEntityName: str = targetEntityName

        self.auto_properties.extend(["origin", "targetname", "targetEntityName"])


class EmpEngCamera(Entity):
    """
    Auto-generated from empires.fgd, line 765.
    The ENG Camera. All team choices must be the same for this camera.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="Browse for BE or NF model", startBuilt=1, teamNum=3, TeamNumber=3, SetTeam=3, Sequence=3, PlaybackRate: float="1", NewSequenceParity: int=1, ReseteventsParity: int=1):
        Entity.__init__(self, "emp_eng_camera", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Fully Built? : If yes, then the building will start with full health and be fully functional.  If no, then an engineer must repair it to full health before it functions.
        self.startBuilt = startBuilt
        # Faction set 1 : Which faction will own the camera.
        self.teamNum = teamNum
        # Faction set 2 : Which faction will own the camera.
        self.TeamNumber = TeamNumber
        # Faction set 3 : Which faction will own the camera.
        self.SetTeam = SetTeam
        # Faction set 4 : Which faction will own the camera.
        self.Sequence = Sequence
        # Unknown : Required to work in 2.3
        self.PlaybackRate: float = PlaybackRate
        # Unknown : Required to work in 2.3
        self.NewSequenceParity: int = NewSequenceParity
        # Unknown : Required to work in 2.3
        self.ReseteventsParity: int = ReseteventsParity

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "startBuilt", "teamNum", "TeamNumber", "SetTeam", "Sequence", "PlaybackRate", "NewSequenceParity", "ReseteventsParity"])


class EmpEngMapBrush(Entity):
    """
    Auto-generated from empires.fgd, line 338.
    An entity which when enabled can be built by the owning team's engineer into a defensive structure such as a wall or barricade.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", pointNumber: int=0, fademindist: float=-1, fademaxdist: float=0, initialOwner=0, changeOwner=0, raiseOnBuild=0, STFU=0, visibleToEnemy=0, timeToRespawn: float=120, Health: int=25, MaximumHealth: int=100, repairMultiplier: int=1, damageMultiplier: int=1, GrenadierOnly=0, SolidOnRespawn=0):
        Entity.__init__(self, "emp_eng_map_brush", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist
        # Initial Owner : This is the team that initially owns the object.  This should only be set for objects that are not associated with a control point.
        self.initialOwner = initialOwner
        # Changes Ownership : This option affects automatic enabling/disabling from an automated capture point.  If no, this object will be disabled when the other team holds the capture point and enable when the initial owner recaptures the point.  If yes, this object will change teams as the capture point is captured.
        self.changeOwner = changeOwner
        # Raise Object On Build : If yes, this entity will start at only 25% of its final height and will raise up to its full height as it's built.  It's a good effect for tall objects like walls.
        self.raiseOnBuild = raiseOnBuild
        # Solid On Spawn : Does this entity start solid or does it need to be fully built first?
        self.STFU = STFU
        # Visible To Enemy Team When Not Solid : Can players of the enemy team see this object if it hasn't been fully built yet (if 'Solid On Spawn' is yes [above], then this is ignored).
        self.visibleToEnemy = visibleToEnemy
        # Time To Respawn : Time in seconds for the object to respawn and be buildable again after being destroyed.  A time of 0 seconds will never respawn until it is disabled and/or changes teams.
        self.timeToRespawn: float = timeToRespawn
        # Structure's Initial Health : The initial health of the object on spawn.
        self.Health: int = Health
        # Structure's Max Health : The maximum health of the object and when it becomes fully built after being repaired by an engineer.
        self.MaximumHealth: int = MaximumHealth
        # Repair multiplier : All repairs done to this object will be multiplied by this number. (Integer > 0)
        self.repairMultiplier: int = repairMultiplier
        # Damage multiplier : All damage done to this object will be multiplied by this number. (Integer > 0)
        self.damageMultiplier: int = damageMultiplier
        # Only Grenadier Can Harm : If yes, then only the grenadier can harm this object, and his rpg does normal damage.  Use this for creating obstacles in your map that only grenadiers can get through.  If no, then enemy engineers can deconstruct it, and all blast damage does a reduced amount of damage to it.
        self.GrenadierOnly = GrenadierOnly
        # Solid On Respawn : After this is destroyed and it respawns, does this entity start solid or does it need to be fully built first?
        self.SolidOnRespawn = SolidOnRespawn

        self.auto_properties.extend(["targetname", "parentname", "pointNumber", "fademindist", "fademaxdist", "initialOwner", "changeOwner", "raiseOnBuild", "STFU", "visibleToEnemy", "timeToRespawn", "Health", "MaximumHealth", "repairMultiplier", "damageMultiplier", "GrenadierOnly", "SolidOnRespawn"])


class EmpEngMapModel(Entity):
    """
    Auto-generated from empires.fgd, line 258.
    An entity which when enabled can be built by the owning team's engineer into a defensive structure such as a wall or barricade.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Buildings/Walls/imp_wall1.mdl", fademindist: float=-1, fademaxdist: float=0, skin: int=0, pointNumber: int=0, disableshadows=0, initialOwner=0, changeOwner=0, raiseOnBuild=0, solidOnSpawn=0, visibleToEnemy=0, timeToRespawn: float=120, Health: int=25, MaximumHealth: int=100, repairMultiplier: int=1, damageMultiplier: int=1, GrenadierOnly=0, SolidOnRespawn=0):
        Entity.__init__(self, "emp_eng_map_model", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows
        # Initial Owner : This is the team that initially owns the object.  This should only be set for objects that are not associated with a control point.
        self.initialOwner = initialOwner
        # Changes Ownership : This option affects automatic enabling/disabling from an automated capture point.  If no, this object will be disabled when the other team holds the capture point and enable when the initial owner recaptures the point.  If yes, this object will change teams as the capture point is captured.
        self.changeOwner = changeOwner
        # Raise Object On Build : If yes, this entity will start at only 25% of its final height and will raise up to its full height as it's built.  It's a good effect for tall objects like walls.
        self.raiseOnBuild = raiseOnBuild
        # Solid On Spawn : Does this entity start solid or does it need to be fully built first?
        self.solidOnSpawn = solidOnSpawn
        # Visible To Enemy When Not Solid : Can players of the enemy team see this object if it hasn't been fully built yet (if 'Solid On Spawn' is yes [above], then this is ignored).
        self.visibleToEnemy = visibleToEnemy
        # Time To Respawn : Time in seconds for the object to respawn and be buildable again after being destroyed.  A time of 0 seconds will never respawn until it is disabled and/or changes teams.
        self.timeToRespawn: float = timeToRespawn
        # Structure's Initial Health : The initial health of the object on spawn.
        self.Health: int = Health
        # Structure's Max Health : The maximum health of the object and when it becomes fully built after being repaired by an engineer.
        self.MaximumHealth: int = MaximumHealth
        # Repair multiplier : All repairs done to this object will be multiplied by this number. (Integer > 0)
        self.repairMultiplier: int = repairMultiplier
        # Damage multiplier : All damage done to this object will be multiplied by this number. (Integer > 0)
        self.damageMultiplier: int = damageMultiplier
        # Only Grenadier Can Harm : If yes, then only the grenadier can harm this object, and his rpg does normal damage.  Use this for creating obstacles in your map that only grenadiers can get through.  If no, then enemy engineers can deconstruct it, and all blast damage does a reduced amount of damage to it.
        self.GrenadierOnly = GrenadierOnly
        # Solid On Respawn : After this is destroyed and it respawns, does this entity start solid or does it need to be fully built first?
        self.SolidOnRespawn = SolidOnRespawn

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "fademindist", "fademaxdist", "skin", "pointNumber", "disableshadows", "initialOwner", "changeOwner", "raiseOnBuild", "solidOnSpawn", "visibleToEnemy", "timeToRespawn", "Health", "MaximumHealth", "repairMultiplier", "damageMultiplier", "GrenadierOnly", "SolidOnRespawn"])


class EmpEngRestrict(Entity):
    """
    Auto-generated from empires.fgd, line 929.
    This brush will restrict engineers from building any item within it (ammo crates, walls, turrets, camera, and radar).
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", restrictNF=1, restrictImp=1, turretRestrict=3):
        Entity.__init__(self, "emp_eng_restrict", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Prevent NF Engineer Building : Select restrictions for the Northern Faction engineers from being able to build when touching this brush.
        self.restrictNF = restrictNF
        # Prevent Brenodi Engineer Building : Select restrictions for the Brenodi Empire engineers from being able to build when touching this brush.
        self.restrictImp = restrictImp
        # Prevent turret building : Does not affect the commander
        self.turretRestrict = turretRestrict

        self.auto_properties.extend(["targetname", "parentname", "restrictNF", "restrictImp", "turretRestrict"])


class EmpEnvEmbers(Entity):
    """
    Auto-generated from empires.fgd, line 963.
    An entity used to create a volume in which to spawn fire embers.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", particletype=0, density: int=50, lifetime: int=4, speed: int=32, start_size: int=1, end_size: int=0, rendercolor: "RGB"="255 255 255", spawnflags=""):
        Entity.__init__(self, "emp_env_embers", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Ember type : 
        self.particletype = particletype
        # Density (particles per second) : 
        self.density: int = density
        # Particle Lifetime (seconds) : 
        self.lifetime: int = lifetime
        # Particle Speed (units per second) : 
        self.speed: int = speed
        # Particle Size On Start : 
        self.start_size: int = start_size
        # Particle Size On End : 
        self.end_size: int = end_size
        # Ember Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "angles", "particletype", "density", "lifetime", "speed", "start_size", "end_size", "rendercolor", "spawnflags"])


class EmpFilterActivatorChassisname(Entity):
    """
    Auto-generated from empires.fgd, line 1499.
    A filter that filters by the chassis name of a vehicle
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", filterchassisname="!any"):
        Entity.__init__(self, "emp_filter_activator_chassisname", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated

        # Filter Chassis Name : Vehicle name as found in script file. Input '!any' to check for any vehicle.
        self.filterchassisname = filterchassisname

        self.auto_properties.extend(["origin", "targetname", "Negated", "filterchassisname"])


class EmpFilterActivatorWeaponname(Entity):
    """
    Auto-generated from empires.fgd, line 1529.
    A filter that filters by the chassis name or chassis spotted name of a vehicle
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", WeaponName: str=""):
        Entity.__init__(self, "emp_filter_activator_weaponname", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated

        # Filter Weapon Name : Filter name must by identical to the name in the script file. Input '!any' to check for any vehicle.
        self.WeaponName: str = WeaponName

        self.auto_properties.extend(["origin", "targetname", "Negated", "WeaponName"])


class EmpImpAmmoCrate(Entity):
    """
    Auto-generated from empires.fgd, line 464.
    Brenodi Empire Ammo Crate which resupplies IMP players with ammo when they 'use' the crate.  It never expires.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Props/imp_crateammo.mdl", fademindist: float=-1, fademaxdist: float=0, disableshadows=0, pointNumber: int=0, startDisabled=0):
        Entity.__init__(self, "emp_imp_ammo_crate", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows
        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Start Disabled? : If yes, then it will be invisible, not solid, and unusable until enabled by an input.
        self.startDisabled = startDisabled

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "fademindist", "fademaxdist", "disableshadows", "pointNumber", "startDisabled"])


class EmpImpCommander(Entity):
    """
    Auto-generated from empires.fgd, line 566.
    This entity is the Imperial commander's command tank.  Entering it allows him to drive the vehicle and to play the RTS aspect of the game (base building, issuing orders, etc) using his own unique interface.  The death of this unit ends the game. 
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "emp_imp_commander", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "targetname", "angles"])


class EmpImpHealthCrate(Entity):
    """
    Auto-generated from empires.fgd, line 489.
    Brenodi Empire Ammo Crate which resupplies IMP players with health when they 'use' the crate.  It never expires.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/Imperial/Props/imp_cratehealth.mdl", fademindist: float=-1, fademaxdist: float=0, disableshadows=0, pointNumber: int=0, startDisabled=0):
        Entity.__init__(self, "emp_imp_health_crate", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows
        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Start Disabled? : If yes, then it will be invisible, not solid, and unusable until enabled by an input.
        self.startDisabled = startDisabled

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "fademindist", "fademaxdist", "disableshadows", "pointNumber", "startDisabled"])


class EmpInfantryRestrict(Entity):
    """
    Auto-generated from empires.fgd, line 987.
    This brush will restrict infantry access based on class and faction.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", allowScout=1, allowRifleman=1, allowGrenadier=1, allowEngineer=1, allowNF=1, allowBE=1):
        Entity.__init__(self, "emp_infantry_restrict", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Allow scouts? : 
        self.allowScout = allowScout
        # Allow riflemen? : 
        self.allowRifleman = allowRifleman
        # Allow grenadiers? : 
        self.allowGrenadier = allowGrenadier
        # Allow engineers? : 
        self.allowEngineer = allowEngineer
        # Allow NF? : 
        self.allowNF = allowNF
        # Allow BE? : 
        self.allowBE = allowBE

        self.auto_properties.extend(["targetname", "parentname", "allowScout", "allowRifleman", "allowGrenadier", "allowEngineer", "allowNF", "allowBE"])


class EmpInfoMapOverview(Entity):
    """
    Auto-generated from empires.fgd, line 560.
    This entity determines where a player first entering the game will start their view point at which should be overlooking the map.  If more than one entity is created, one will be randomly chosen per player.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "emp_info_map_overview", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "targetname", "parentname", "angles"])


class EmpInfoParams(Entity):
    """
    Auto-generated from empires.fgd, line 154.
    Empires Parameters.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Skin=0, AutoResearch=0, NFRes: int=100, ImpRes: int=100, NFReinf: int=100, ImpReinf: int=100, eng_restrict_NF=0, eng_restrict_Imp=0, turretRestrict=0):
        Entity.__init__(self, "emp_info_params", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Map Theme : This is the setting/theme of the map and is only used to determine the camouflage that players wear.
        self.Skin = Skin
        # Automate Research? : Setting this to 'Yes' will automatically research the Research Tree, both teams will have the research tree fully researched.  You can also add or remove research items using the maps .cfg file for server side settings.
        self.AutoResearch = AutoResearch
        # Northern Faction Resources : The amount of resources the Northern Faction team starts with.
        self.NFRes: int = NFRes
        # Brenodi Empire Resources : The amount of resources the Brenodi Empire team starts with.
        self.ImpRes: int = ImpRes
        # Northern Faction Reinforcements : The amount of reinforcements the Northern Faction team starts with.
        self.NFReinf: int = NFReinf
        # Brenodi Empire Reinforcements : The amount of reinforcements the Brenodi Empire team starts with.
        self.ImpReinf: int = ImpReinf
        # Prevent NF Engineer Building : Select restrictions for the Northern Faction engineers from being able to build on this map.
        self.eng_restrict_NF = eng_restrict_NF
        # Prevent Brenodi Engineer Building : Select restrictions for the Brenodi Empire engineers from being able to build on this map.
        self.eng_restrict_Imp = eng_restrict_Imp
        # Prevent turret building : Does not affect the commander
        self.turretRestrict = turretRestrict

        self.auto_properties.extend(["origin", "targetname", "Skin", "AutoResearch", "NFRes", "ImpRes", "NFReinf", "ImpReinf", "eng_restrict_NF", "eng_restrict_Imp", "turretRestrict"])


class EmpInfoPlayerImp(Entity):
    """
    Auto-generated from empires.fgd, line 138.
    This entity indicates the position and facing direction at which a player on team Brenodi Empire will spawn during an Empires map. Any number of info_player_Imp entities may be placed in a map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", pointNumber: int=0, spawnEnabled=0):
        Entity.__init__(self, "emp_info_player_Imp", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Enabled? : Is the spawn point enabled on start?
        self.spawnEnabled = spawnEnabled

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "pointNumber", "spawnEnabled"])


class EmpInfoPlayerNf(Entity):
    """
    Auto-generated from empires.fgd, line 121.
    This entity indicates the position and facing direction at which a player on team Northern Faction will spawn during an Empires map. Any number of info_player_NF entities may be placed in a map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", pointNumber: int=0, spawnEnabled=0):
        Entity.__init__(self, "emp_info_player_NF", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Enabled? : Is the spawn point enabled on start?
        self.spawnEnabled = spawnEnabled

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "pointNumber", "spawnEnabled"])


class EmpMineRestrict(Entity):
    """
    Auto-generated from empires.fgd, line 1484.
    This brush will restrict the ability for grenadiers to drop mines.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str=""):
        Entity.__init__(self, "emp_mine_restrict", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        self.auto_properties.extend(["targetname", "parentname"])


class EmpNfAmmoCrate(Entity):
    """
    Auto-generated from empires.fgd, line 413.
    Northern Faction Ammo Crate which resupplies NF players with ammo when they 'use' the crate.  It never expires.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Props/nf_crateammo.mdl", fademindist: float=-1, fademaxdist: float=0, disableshadows=0, pointNumber: int=0, startDisabled=0):
        Entity.__init__(self, "emp_nf_ammo_crate", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows
        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Start Disabled? : If yes, then it will be invisible, not solid, and unusable until enabled by an input.
        self.startDisabled = startDisabled

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "fademindist", "fademaxdist", "disableshadows", "pointNumber", "startDisabled"])


class EmpNfCommander(Entity):
    """
    Auto-generated from empires.fgd, line 572.
    This entity is the Northern Faction commander's command tank.  Entering it allows him to drive the vehicle and to play the RTS aspect of the game (base building, issuing orders, etc) using his own unique interface.  The death of this unit ends the game. 
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "emp_nf_commander", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "targetname", "angles"])


class EmpNfHealthCrate(Entity):
    """
    Auto-generated from empires.fgd, line 439.
    Northern Faction Health Crate which resupplies NF players with health when they 'use' the crate.  It never expires.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", model: str="models/NF/Props/nf_cratehealth.mdl", fademindist: float=-1, fademaxdist: float=0, disableshadows=0, pointNumber: int=0, startDisabled=0):
        Entity.__init__(self, "emp_nf_health_crate", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows
        # Number of the parent Capture Point : If this entity is to be enabled/disabled in association with the capture/loss of a capture point, input the associated capture point's number (defined in the capture point's properties)
        self.pointNumber: int = pointNumber
        # Start Disabled? : If yes, then it will be invisible, not solid, and unusable until enabled by an input.
        self.startDisabled = startDisabled

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "model", "fademindist", "fademaxdist", "disableshadows", "pointNumber", "startDisabled"])


class EmpResourcePoint(Entity):
    """
    Auto-generated from empires.fgd, line 514.
    This is a resource point that either team can build a refinery on.  Once a refinery is built, its resources will be extracted and given to the team's total resource pool.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", Enabled=1, ResourcesSecond: float=1):
        Entity.__init__(self, "emp_resource_point", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Enabled? : If enabled, a refinery may be built on it.  If not enabled, then an entity within the map must enable it before a refinery can be built on it.
        self.Enabled = Enabled
        # Resources per Second : The amount of resources that will be extracted per second.
        self.ResourcesSecond: float = ResourcesSecond

        self.auto_properties.extend(["origin", "targetname", "angles", "Enabled", "ResourcesSecond"])


class EmpResourcePointProp(Entity):
    """
    Auto-generated from empires.fgd, line 534.
    This is a resource point prop that is used for the visual representation of the resource point.  Its sole purpose is so that it will still allow a refinery to be built even though it is in contact with the refinery.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, fademindist: float=-1, fademaxdist: float=0, disableshadows=0, Enabled=1):
        Entity.__init__(self, "emp_resource_point_prop", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Start Fade Dist : Distance at which the overlay starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Maximum distance at which the overlay is visible (0 = don't fade out).
        self.fademaxdist: float = fademaxdist
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows
        # Enabled? : If enabled, it will be visible.  It should be set to match its corresponding resource point.
        self.Enabled = Enabled

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "skin", "fademindist", "fademaxdist", "disableshadows", "Enabled"])


class EmpTeamSoundPointentity(Entity):
    """
    Auto-generated from empires.fgd, line 1534.
    An entity that will play a sound only to a particular team
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", sound: str="", team=2, soundvolume: float=1, soundduration: float=0, soundradius: int=500, radiotext: str="", spawnflags=""):
        Entity.__init__(self, "emp_team_sound_pointentity", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Sound : The specific name of the sound file or soundstring
        self.sound: str = sound
        # Team : The team who will recieve the sound
        self.team = team
        # Volume : Must be between 0 and 1,The volume the sound will play at.  if the sound uses the radio the volume will need to be significantly reduced
        self.soundvolume: float = soundvolume
        # Duration : The amount of time the sound will be playing for, a 0 duration means the sound will not be limited by duration
        self.soundduration: float = soundduration
        # Max Audible Distance : Maximum distance at which this sound is audible.
        self.soundradius: int = soundradius
        # Radio Text : Text displayed if this sound is played over the radio
        self.radiotext: str = radiotext
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "sound", "team", "soundvolume", "soundduration", "soundradius", "radiotext", "spawnflags"])


class EmpTeamTextPointentity(Entity):
    """
    Auto-generated from empires.fgd, line 1554.
    An entity that will display a message to a particular team
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", text: str="", team=2):
        Entity.__init__(self, "emp_team_text_pointentity", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Text : Message displayed
        self.text: str = text
        # Team : The team who will recieve the message
        self.team = team

        self.auto_properties.extend(["origin", "targetname", "text", "team"])


class EmpTutorialBotSpawner(Entity):
    """
    Auto-generated from empires.fgd, line 1565.
    An entity that spawns tutorial bots for a particular team
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", team=2, class_=1, weaponPrimary: str="PRIMARY_NF_RIFLE", weaponSecondary: str="SIDEARM_NF_9MM", grenade: str="GRENADE_NF_EXPLOSIVE", equipment: str="EQUIP_NF_ARMOR", desiredBotCount: int=10, respawnTime: float=10, spawnPoint: str=""):
        Entity.__init__(self, "emp_tutorial_bot_spawner", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Team : The team the bot should get
        self.team = team
        # Class : The class the bots should use
        self.class_ = class_
        # Primary Weapon : The WeaponName of the weapon to use as primary. (see scripts/emp_weapons.txt)
        self.weaponPrimary: str = weaponPrimary
        # Secondary Weapon : The WeaponName of the weapon to use as secondary. (see scripts/emp_weapons.txt)
        self.weaponSecondary: str = weaponSecondary
        # Grenade : The WeaponName of the weapon to use as grenade. (see scripts/emp_weapons.txt)
        self.grenade: str = grenade
        # Equipment : The WeaponName of the weapon to use as equipment. (see scripts/emp_weapons.txt)
        self.equipment: str = equipment
        # Desired Bot Count : The amount of bots that should be spawned.
        self.desiredBotCount: int = desiredBotCount
        # Respawn Time : Amount of seconds bots should wait between respawning.
        self.respawnTime: float = respawnTime
        # Spawn Point : The name of the spawn point to use
        self.spawnPoint: str = spawnPoint

        self.auto_properties.extend(["origin", "targetname", "team", "class_", "weaponPrimary", "weaponSecondary", "grenade", "equipment", "desiredBotCount", "respawnTime", "spawnPoint"])


class EmpTutorialEntity(Entity):
    """
    Auto-generated from empires.fgd, line 1650.
    Tutorial entity, doesn't work outside of the tutorial map
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "emp_tutorial_entity", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class EmpVehiclePreset(Entity):
    """
    Auto-generated from empires.fgd, line 1036.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", teamNumber=2, spawnPoint=0, cost: int=0, chassisType=0, engineType=0, armorType=0, armorFront=0, armorRear=0, armorLeft=0, armorRight=0, weaponType1=-1, weaponMode2=0, weaponGroup2: int=0, weaponType3=-1, weaponMode3=0, weaponGroup3: int=0, weaponType4=-1, weaponMode4=0, weaponGroup4: int=0, weaponType5=-1, weaponMode5=0, weaponGroup5: int=0, weaponType6=-1, weaponMode6=0, weaponType7=-1, weaponMode7=0, weaponGroup7: int=0, weaponType8=-1, weaponMode8=0, weaponGroup8: int=0):
        Entity.__init__(self, "emp_vehicle_preset", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Faction : Which faction will own the tank.
        self.teamNumber = teamNumber
        # Spawn Point : Whether or not this vehicle will act as a mobile spawn point. Any APC that spawns after APD has been researched will act as a spawn point, regardless of this setting.
        self.spawnPoint = spawnPoint
        # Cost : The cost of the vehicle (will not build if the team cannot afford).
        self.cost: int = cost
        # Chassis : Chassis Type.
        self.chassisType = chassisType
        # Engine : Engine Type (Jeep, Apc, LT, Med, Heavy, Artillery).
        self.engineType = engineType
        # Armor : Armor Type
        self.armorType = armorType
        # Front Armor Plates : How many plates on the tank's Front?
        self.armorFront = armorFront
        # Rear Armor Plates : How many plates on the tank's Rear?
        self.armorRear = armorRear
        # Left Armor Plates : How many plates on the tank's Left?
        self.armorLeft = armorLeft
        # Right Armor Plates : How many plates on the tank's Right?
        self.armorRight = armorRight
        # Weapon 1: Type : ID for the weapon type.
        self.weaponType1 = weaponType1
        # Weapon 2: Mode : The key binding for this weapon.
        self.weaponMode2 = weaponMode2
        # Weapon 2: Groups : The weapon groups will this weapon will be associated with, (add 1,2,4,8,16,32)
        self.weaponGroup2: int = weaponGroup2
        # Weapon 3: Type : ID for the weapon type.
        self.weaponType3 = weaponType3
        # Weapon 3: Mode : The key binding for this weapon.
        self.weaponMode3 = weaponMode3
        # Weapon 3: Groups : The weapon groups will this weapon will be associated with, (add 1,2,4,8,16,32)
        self.weaponGroup3: int = weaponGroup3
        # Weapon 4: Type : ID for the weapon type.
        self.weaponType4 = weaponType4
        # Weapon 4: Mode : The key binding for this weapon.
        self.weaponMode4 = weaponMode4
        # Weapon 4: Groups : The weapon groups will this weapon will be associated with, (add 1,2,4,8,16,32)
        self.weaponGroup4: int = weaponGroup4
        # Weapon 5: Type : ID for the weapon type.
        self.weaponType5 = weaponType5
        # Weapon 5: Mode : The key binding for this weapon.
        self.weaponMode5 = weaponMode5
        # Weapon 5: Groups : The weapon groups will this weapon will be associated with, (add 1,2,4,8,16,32)
        self.weaponGroup5: int = weaponGroup5
        # Weapon 6: Type : ID for the weapon type.
        self.weaponType6 = weaponType6
        # Weapon 6: Mode : The key binding for this weapon.
        self.weaponMode6 = weaponMode6
        # Weapon 7: Type : ID for the weapon type.
        self.weaponType7 = weaponType7
        # Weapon 7: Mode : The key binding for this weapon.
        self.weaponMode7 = weaponMode7
        # Weapon 7: Groups : The weapon groups will this weapon will be associated with, (add 1,2,4,8,16,32)
        self.weaponGroup7: int = weaponGroup7
        # Weapon 8: Type : ID for the weapon type.
        self.weaponType8 = weaponType8
        # Weapon 8: Mode : The key binding for this weapon.
        self.weaponMode8 = weaponMode8
        # Weapon 8: Groups : The weapon groups will this weapon will be associated with, (add 1,2,4,8,16,32)
        self.weaponGroup8: int = weaponGroup8

        self.auto_properties.extend(["origin", "targetname", "teamNumber", "spawnPoint", "cost", "chassisType", "engineType", "armorType", "armorFront", "armorRear", "armorLeft", "armorRight", "weaponType1", "weaponMode2", "weaponGroup2", "weaponType3", "weaponMode3", "weaponGroup3", "weaponType4", "weaponMode4", "weaponGroup4", "weaponType5", "weaponMode5", "weaponGroup5", "weaponType6", "weaponMode6", "weaponType7", "weaponMode7", "weaponGroup7", "weaponType8", "weaponMode8", "weaponGroup8"])


class EmpVehicleRepairBrush(Entity):
    """
    Auto-generated from empires.fgd, line 33.
    This brush repairs vehicles inside of it
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", Enabled=1, BEEnabled=1, NFEnabled=1, AmountToRepair: int=0, AmmoToGive: int=0):
        Entity.__init__(self, "emp_vehicle_repair_brush", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Enable this brush : Warning: BE/NFEnabled still needed to enable this brush
        self.Enabled = Enabled
        # Enable BE Vehicles to be repaired here : Warning: Enabled is first checked for, don't forget to enable it
        self.BEEnabled = BEEnabled
        # Enable NF vehicles to be repaired here : Warning: Enabled is first checked for, don't forget to enable it
        self.NFEnabled = NFEnabled
        # Amount to repair per second : Integer
        self.AmountToRepair: int = AmountToRepair
        # Amount of ammo to give per second : Integer
        self.AmmoToGive: int = AmmoToGive

        self.auto_properties.extend(["targetname", "parentname", "Enabled", "BEEnabled", "NFEnabled", "AmountToRepair", "AmmoToGive"])


class EmpVehicleSpawnBrush(Entity):
    """
    Auto-generated from empires.fgd, line 1618.
    This brush allows people to build a vehicle via the vehicle customization menu by pressing V.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", Enabled=1, BEEnabled=1, NFEnabled=1):
        Entity.__init__(self, "emp_vehicle_spawn_brush", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Enable this brush : Warning: BE/NFEnabled still needed to enable this brush
        self.Enabled = Enabled
        # Enable BE infantry to build vehicles here : Warning: Enabled is first checked for, don't forget to enable it
        self.BEEnabled = BEEnabled
        # Enable NF infantry to build vehicles here : Warning: Enabled is first checked for, don't forget to enable it
        self.NFEnabled = NFEnabled

        self.auto_properties.extend(["targetname", "parentname", "Enabled", "BEEnabled", "NFEnabled"])


class EmpVehicleSpawner(Entity):
    """
    Auto-generated from empires.fgd, line 1461.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", enabled=1, autorespawn=0, CostsResources=1):
        Entity.__init__(self, "emp_vehicle_spawner", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Enabled : Should this entity start enabled?
        self.enabled = enabled
        # Automatically Respawn? : Monitor the last spawned vehicle, and respawn if necessary. (Only monitors one vehicle at a time)
        self.autorespawn = autorespawn
        # Costs resources? : If set, deducts the appropiate resource count from the teams balance
        self.CostsResources = CostsResources

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "enabled", "autorespawn", "CostsResources"])


class FilterActivatorTeam(Entity):
    """
    Auto-generated from empires.fgd, line 1488.
    A filter that filters by the team of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", filterteam=2):
        Entity.__init__(self, "filter_activator_team", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated

        # Filter Team Number : The team number to filter by.  If the filter mode is Allow, only entities whose 
        self.filterteam = filterteam

        self.auto_properties.extend(["origin", "targetname", "Negated", "filterteam"])


class FuncNavBlocker(Entity):
    """
    Auto-generated from empires.fgd, line 23.
    A brush entity that can block nav areas touching its AABB.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", teamToBlock=-2, StartDisabled=0):
        Entity.__init__(self, "func_nav_blocker", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Team(s) to block : Team(s) this entity should block
        self.teamToBlock = teamToBlock
        # Start Disabled : Should this nav_blocker be disabled on start
        self.StartDisabled = StartDisabled


        self.auto_properties.extend(["targetname", "teamToBlock", "StartDisabled"])


class InfoEmphint(Entity):
    """
    Auto-generated from empires.fgd, line 1601.
    Empires hint, shown as a box in the HUD
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", forceDisplay=0, title: str="", text: str=""):
        Entity.__init__(self, "info_emphint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Force hint : Hint will be shown regardlessly of emp_cl_hints_enabled CVar
        self.forceDisplay = forceDisplay
        # Hint title : Must be kept under 32 chars
        self.title: str = title
        # Hint text : Limited by string table
        self.text: str = text

        self.auto_properties.extend(["origin", "targetname", "forceDisplay", "title", "text"])


class NpcGrenadierBe(Entity):
    """
    Auto-generated from empires.fgd, line 1669.
    A BE grenadier NPC
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", model: str="models/imperial/npcs/gi/imp_grenadier_bot.mdl"):
        Entity.__init__(self, "npc_grenadier_be", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Model : 
        self.model: str = model

        self.auto_properties.extend(["targetname", "origin", "model"])


class NpcGrenadierNf(Entity):
    """
    Auto-generated from empires.fgd, line 1674.
    A NF grenadier NPC
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", model: str="models/nf/npcs/gi/nf_grenadier_bot.mdl"):
        Entity.__init__(self, "npc_grenadier_nf", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Model : 
        self.model: str = model

        self.auto_properties.extend(["targetname", "origin", "model"])


class NpcHumanBe(Entity):
    """
    Auto-generated from empires.fgd, line 1659.
    A BE human NPC
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", model: str="models/imperial/npcs/gi/imp_soldier_bot_ed.mdl"):
        Entity.__init__(self, "npc_human_be", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Model : 
        self.model: str = model

        self.auto_properties.extend(["targetname", "origin", "model"])


class NpcHumanNf(Entity):
    """
    Auto-generated from empires.fgd, line 1664.
    A NF human NPC
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", model: str="models/nf/npcs/gi/nf_soldier_bot_kant.mdl"):
        Entity.__init__(self, "npc_human_nf", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Model : 
        self.model: str = model

        self.auto_properties.extend(["targetname", "origin", "model"])


class PropPhysicsRespawnable(Entity):
    """
    Auto-generated from empires.fgd, line 27.
    This class is the same as prop_physics, except it respawns after it breaks
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, modelscale: float="1.0", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, RespawnTime: float=60):
        Entity.__init__(self, "prop_physics_respawnable", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows


        # Respawn Time : Ammount in seconds this prop will respawn after it breaks.
        self.RespawnTime: float = RespawnTime

        self.auto_properties.extend(["origin", "globalname", "angles", "model", "skin", "modelscale", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "RespawnTime"])


class WeaponEmpBaseGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1679.
    Base Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_base_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpBinoculars(Entity):
    """
    Auto-generated from empires.fgd, line 1680.
    Brenodi Binoculars
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_binoculars", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpConcussionGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1681.
    Brenodi Concussion Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_concussion_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpEngineerKit(Entity):
    """
    Auto-generated from empires.fgd, line 1682.
    Brenodi Engineer Kit
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_engineer_kit", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpExplosiveGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1683.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_explosive_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpHmg(Entity):
    """
    Auto-generated from empires.fgd, line 1684.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_hmg", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpMachinepistol(Entity):
    """
    Auto-generated from empires.fgd, line 1685.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_machinepistol", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpMortar(Entity):
    """
    Auto-generated from empires.fgd, line 1686.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_mortar", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpPistol1(Entity):
    """
    Auto-generated from empires.fgd, line 1687.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_pistol1", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpPistol2(Entity):
    """
    Auto-generated from empires.fgd, line 1688.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_pistol2", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpRifle1(Entity):
    """
    Auto-generated from empires.fgd, line 1689.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_rifle1", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpRifle2(Entity):
    """
    Auto-generated from empires.fgd, line 1690.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_rifle2", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpRifle3(Entity):
    """
    Auto-generated from empires.fgd, line 1691.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_rifle3", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpRpg(Entity):
    """
    Auto-generated from empires.fgd, line 1692.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_rpg", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpSeismicGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1693.
    Brenodi Seismic Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_seismic_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpShotgun(Entity):
    """
    Auto-generated from empires.fgd, line 1694.
    Brenodi Shotgun
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_shotgun", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpSmg1(Entity):
    """
    Auto-generated from empires.fgd, line 1695.
    Brenodi SMG #1
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_smg1", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpSmg2(Entity):
    """
    Auto-generated from empires.fgd, line 1696.
    Brenodi SMG #2
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_smg2", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpSmokeGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1697.
    Brenodi Smoke Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_smoke_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpStickyGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1698.
    Brenodi Sticky Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_sticky_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpImpStickyStunGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1699.
    Brenodi Sticky Stun Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_imp_sticky_stun_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNf50cal(Entity):
    """
    Auto-generated from empires.fgd, line 1700.
    Northern Faction 50cal Rifle
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_50cal", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfBinoculars(Entity):
    """
    Auto-generated from empires.fgd, line 1701.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_binoculars", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfConcussionGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1702.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_concussion_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfEngineerKit(Entity):
    """
    Auto-generated from empires.fgd, line 1703.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_engineer_kit", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfExplosiveGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1704.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_explosive_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfHmg(Entity):
    """
    Auto-generated from empires.fgd, line 1705.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_hmg", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfMortar(Entity):
    """
    Auto-generated from empires.fgd, line 1706.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_mortar", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfPistol(Entity):
    """
    Auto-generated from empires.fgd, line 1707.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_pistol", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfRifle(Entity):
    """
    Auto-generated from empires.fgd, line 1708.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_rifle", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfRpg(Entity):
    """
    Auto-generated from empires.fgd, line 1709.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_rpg", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfScoutRifle(Entity):
    """
    Auto-generated from empires.fgd, line 1710.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_scout_rifle", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfSeismicGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1711.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_seismic_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfShotPistol(Entity):
    """
    Auto-generated from empires.fgd, line 1712.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_shot_pistol", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfShotgun(Entity):
    """
    Auto-generated from empires.fgd, line 1713.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_shotgun", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfSmg1(Entity):
    """
    Auto-generated from empires.fgd, line 1714.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_smg1", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfSmg2(Entity):
    """
    Auto-generated from empires.fgd, line 1715.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_smg2", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfSmg3(Entity):
    """
    Auto-generated from empires.fgd, line 1716.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_smg3", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfSmokeGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1717.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_smoke_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfStickyGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1718.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_sticky_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponEmpNfStickyStunGrenade(Entity):
    """
    Auto-generated from empires.fgd, line 1719.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_emp_nf_sticky_stun_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


