"""
Helper classes for creating maps in any Source Engine game that uses base.fgd.
This file was auto-generated by import_fgd.py on 2018-06-20 00:01:52.205419.
"""

from vmflib2.vmf import *

class aiSpeechfilter(Entity):
    """
    Auto-generated from base.fgd, line 6267.
    An entity that can be used to control the idle speech patterns of a set of NPCs.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "ai_speechfilter")


class ambientGeneric(Entity):
    """
    Auto-generated from base.fgd, line 865.
    Universal ambient sound. Use it to play and control a single sound.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "ambient_generic")


class colorCorrection(Entity):
    """
    Auto-generated from base.fgd, line 3089.
    An entity to control the color correction in the map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "color_correction")


class colorCorrectionVolume(Entity):
    """
    Auto-generated from base.fgd, line 3109.
    An entity to control the color correction in the map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "color_correction_volume")


class cycler(Entity):
    """
    Auto-generated from base.fgd, line 1410.
    An entity used to display a model for testing purposes. Shooting it with cycle through the model's animations.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "cycler")


class envBeam(Entity):
    """
    Auto-generated from base.fgd, line 1453.
    An entity that creates a visible beam between two points. The points can be attached to entities to make the beam move around.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_beam")


class envBeverage(Entity):
    """
    Auto-generated from base.fgd, line 1517.
    HL1 Legacy: Beverage Dispenser.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_beverage")


class envBlood(Entity):
    """
    Auto-generated from base.fgd, line 1566.
    An entity used to spawn blood effects.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_blood")


class envBubbles(Entity):
    """
    Auto-generated from base.fgd, line 1592.
    An entity used to create a volume in which to spawn bubbles.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_bubbles")


class envCredits(Entity):
    """
    Auto-generated from base.fgd, line 6360.
    An entity to control the rolling credits.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_credits")


class envCubemap(Entity):
    """
    Auto-generated from base.fgd, line 3815.
    An entity that creates a sample point for the Cubic Environment Map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_cubemap")


class envDustpuff(Entity):
    """
    Auto-generated from base.fgd, line 3903.
    An entity that can emit dust puffs.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_dustpuff")


class envEffectscript(Entity):
    """
    Auto-generated from base.fgd, line 3927.
    An entity that allows you to script special visual effects via a script file.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_effectscript")


class envEmbers(Entity):
    """
    Auto-generated from base.fgd, line 1535.
    An entity used to create a volume in which to spawn fire embers.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_embers")


class envEntityIgniter(Entity):
    """
    Auto-generated from base.fgd, line 1818.
    An entity that catches a target entity on fire. If the entity is an animating model, it will have sprite flames attached to its skeleton. Otherwise the entity will emit particle flame puffs.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_entity_igniter")


class envEntityMaker(Entity):
    """
    Auto-generated from base.fgd, line 4523.
    Spawns the specified entity template at its origin. If set to auto-spawn, it will spawn the template whenever there's room and the player is looking elsewhere.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_entity_maker")


class envExplosion(Entity):
    """
    Auto-generated from base.fgd, line 1612.
    An entity that creates an explosion at its origin.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_explosion")


class envFade(Entity):
    """
    Auto-generated from base.fgd, line 1163.
    An entity that controls screen fades.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_fade")


class envFire(Entity):
    """
    Auto-generated from base.fgd, line 1747.
    An entity that handles a single flame at its origin. The flame causes heat 'damage' to other env_fire entities around it, and will eventually ignite non-flaming env_fire entities nearby, causing the fire to spread.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_fire")


class envFiresensor(Entity):
    """
    Auto-generated from base.fgd, line 1799.
    An entity that detects changes in heat nearby.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_firesensor")


class envFiresource(Entity):
    """
    Auto-generated from base.fgd, line 1783.
    An entity that provides heat to all nearby env_fire entities. Cannot be extinguished.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_firesource")


class envFogController(Entity):
    """
    Auto-generated from base.fgd, line 1828.
    An entity that controls the fog and view distance in the map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_fog_controller")


class envFunnel(Entity):
    """
    Auto-generated from base.fgd, line 1557.
    HL1 Legacy: Large Portal Funnel
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_funnel")


class envHudhint(Entity):
    """
    Auto-generated from base.fgd, line 1981.
    An entity to control the display of HUD hints. HUD hints are used to show the player what key is bound to a particular command.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_hudhint")


class envLaser(Entity):
    """
    Auto-generated from base.fgd, line 1921.
    An entity that creates a laser beam between itself and a given target.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_laser")


class envLightglow(Entity):
    """
    Auto-generated from base.fgd, line 1104.
    An entity that puts an additive glow in the world, mostly used over light sources.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_lightglow")


class envMessage(Entity):
    """
    Auto-generated from base.fgd, line 1955.
    An entity that draws a text message on player's HUDs.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_message")


class envMicrophone(Entity):
    """
    Auto-generated from base.fgd, line 4305.
    An entity that acts as a microphone. It works in one of two modes. If it has a 'Speaker' set, it picks up all sounds within the specified sound range, and rebroadcasts them through the Speaker entity. In this Speaker mode, it ignores the Hears X spawnflags and does not fire the SoundLevel output. If it has no Speaker set, it measures the sound level at a point, and outputs the sound level as a value between 0 and 1. In Measuring mode, it only hears sounds that match the Hear X spawnflags.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_microphone")


class envParticlePerformanceMonitor(Entity):
    """
    Auto-generated from base.fgd, line 6502.
    An entity for turning on and off measuring and display of particle throughput.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_particle_performance_monitor")


class envParticlelight(Entity):
    """
    Auto-generated from base.fgd, line 1028.
    An entity that can be used to light the smoke particles emitted by env_smokestack entities. Does not light any other particle types.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_particlelight")


class envParticlescript(Entity):
    """
    Auto-generated from base.fgd, line 3915.
    An entity that has special animation events that can be fired by a model with an animation inside its .qc designed foruse by this entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_particlescript")


class envPhysexplosion(Entity):
    """
    Auto-generated from base.fgd, line 1671.
    An entity that creates an explosion at its origin. If the no-damage spawnflag is set, the explosion won't be visible, but will apply force to any physics objects within its radius.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_physexplosion")


class envPhysimpact(Entity):
    """
    Auto-generated from base.fgd, line 1696.
    An entity that will cause a physics impact on another entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_physimpact")


class envPlayerSurfaceTrigger(Entity):
    """
    Auto-generated from base.fgd, line 1184.
    An entity that monitors the material of the surface the player is standing on, and fires outputs whenever it changes to/from a specific material.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_player_surface_trigger")


class envProjectedtexture(Entity):
    """
    Auto-generated from base.fgd, line 6449.
    Projected texture entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_projectedtexture")


class envRotorshooter(Entity):
    """
    Auto-generated from base.fgd, line 2088.
    An entity that creates gibs when it's within the influence of a helicopter's rotor wash.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_rotorshooter")


class envRotorwashEmitter(Entity):
    """
    Auto-generated from base.fgd, line 2038.
    Creates rotorwash.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_rotorwash_emitter")


class envScreeneffect(Entity):
    """
    Auto-generated from base.fgd, line 988.
    Allows screenspace effects to be played on the player's view.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_screeneffect")


class envScreenoverlay(Entity):
    """
    Auto-generated from base.fgd, line 958.
    An entity that can display and control a set of screen overlays, to be displayed over the player's view. Useful for view effects like drunkenness, or teleporter afterimages, etc.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_screenoverlay")


class envShake(Entity):
    """
    Auto-generated from base.fgd, line 1996.
    An entity to control screen shake on players.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_shake")


class envShooter(Entity):
    """
    Auto-generated from base.fgd, line 2049.
    An entity that shoots models, or sprites, out of its origin.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_shooter")


class envSmokestack(Entity):
    """
    Auto-generated from base.fgd, line 1125.
    An entity that spits out a constant stream of smoke. See particlezoo.vmf for sample usage. You can place up to two env_particlelight entities near the smoke stack to add ambient light to its particles.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_smokestack")


class envSmoketrail(Entity):
    """
    Auto-generated from base.fgd, line 1650.
    An entity that creates a smoke trail.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_smoketrail")


class envSoundscape(Entity):
    """
    Auto-generated from base.fgd, line 2127.
    An entity to control sound in an area. The active soundscape at any time is the last one that had line-of-sight to the player, and was within the radius.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_soundscape")


class envSoundscapeProxy(Entity):
    """
    Auto-generated from base.fgd, line 2119.
    An entity that acts like a soundscape but gets all of its sound parameters from another env_soundscape entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_soundscape_proxy")


class envSoundscapeTriggerable(Entity):
    """
    Auto-generated from base.fgd, line 2157.
    An entity that works like env_soundscape except that it works in conjunction with trigger_soundscape to determine when a player hears it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_soundscape_triggerable")


class envSpark(Entity):
    """
    Auto-generated from base.fgd, line 2162.
    An entity used to create sparks at its origin.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_spark")


class envSplash(Entity):
    """
    Auto-generated from base.fgd, line 1013.
    An entity that creates a splash effect at its origin. If the 'find water surface' spawnflag is set, it will instead trace down below itself to find the water surface on which to create splashes.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_splash")


class envSprite(Entity):
    """
    Auto-generated from base.fgd, line 2196.
    An entity that controls the drawing of a sprite in the world.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_sprite")


class envSpriteOriented(Entity):
    """
    Auto-generated from base.fgd, line 2222.
    A env_sprite that allows orientation.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_sprite_oriented")


class envSpritetrail(Entity):
    """
    Auto-generated from base.fgd, line 6429.
    A magical trail you can parent to anything you heart desires.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_spritetrail")


class envSteam(Entity):
    """
    Auto-generated from base.fgd, line 1880.
    An entity used to create a jet of steam.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_steam")


class envSun(Entity):
    """
    Auto-generated from base.fgd, line 1043.
    An entity to control & draw a sun effect in the sky.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_sun")


class envTexturetoggle(Entity):
    """
    Auto-generated from base.fgd, line 1003.
    An entity that allows you to change the textures on other brush-built entities.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_texturetoggle")


class envTonemapController(Entity):
    """
    Auto-generated from base.fgd, line 1215.
    An entity that controls the HDR tonemapping for the player. Think of it as a method of controlling the exposure of the player's eyes.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_tonemap_controller")


class envViewpunch(Entity):
    """
    Auto-generated from base.fgd, line 2022.
    Causes a view punch on players.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_viewpunch")


class envWind(Entity):
    """
    Auto-generated from base.fgd, line 2249.
    An entity to control wind in the map. Partially functional.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_wind")


class envZoom(Entity):
    """
    Auto-generated from base.fgd, line 942.
    An entity that can be used to control the player's FOV. Useful for scenes where the player's view is being controlled, or player-usable binoculars/telescopes, etc.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_zoom")


class filterActivatorClass(Entity):
    """
    Auto-generated from base.fgd, line 4613.
    A filter that filters by the class name of the activator.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_activator_class")


class filterActivatorMassGreater(Entity):
    """
    Auto-generated from base.fgd, line 4621.
    A filter that filters by the mass of the activator.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_activator_mass_greater")


class filterActivatorName(Entity):
    """
    Auto-generated from base.fgd, line 4605.
    A filter that filters by the name of the activator.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_activator_name")


class filterDamageType(Entity):
    """
    Auto-generated from base.fgd, line 4629.
    A damage filter that filters by the type of damage inflicted. This can only be used as a damage filter, not as an activator filter.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_damage_type")


class filterEnemy(Entity):
    """
    Auto-generated from base.fgd, line 4659.
    A filter that filters a potential enemy entity by a set of criteria.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_enemy")


class filterMulti(Entity):
    """
    Auto-generated from base.fgd, line 4580.
    A filter that tests the activator against multiple filters. This allows you to build more complex filters, such as'Allow anyone on Team 1 who is also class engineer', or 'Allow everyone except classes npc_zombie and npc_headcrab'.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_multi")


class funcAreaportal(Entity):
    """
    Auto-generated from base.fgd, line 5568.
    A portal brush used to manage visibility in maps. Portals define areas, which are spaces that are connected in the map. Both sides of a portal cannot touch the same area, for example, a doughnut shaped map would require at least two portals to divide the map into two areas. A linear map could be divided into two areas with a single area portal.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_areaportal")


class funcAreaportalwindow(Entity):
    """
    Auto-generated from base.fgd, line 1276.
    An entity that can be used to optimize the visibility in a map. If you seal off an area with them, when the viewer moves the specified distance away from them, they will go opaque and the parts inside the area will not be drawn. The 'target' brush model should enclose the func_areaportal window so no parts of it are culled by the window. If you use the optional foreground brush model, then it should enclose the 'target' brush model.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_areaportalwindow")


class funcBreakable(Entity):
    """
    Auto-generated from base.fgd, line 5605.
    A brush entity that can be broken from damage, or an input.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_breakable")


class funcBreakableSurf(Entity):
    """
    Auto-generated from base.fgd, line 5614.
    A breakable surface, for partially breakable glass / tile / etc.  All faces but the desired visible one must be marked as NODRAW and thatface must be 4 sided.  The material applied to the visible face must be set up to be breakable.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_breakable_surf")


class funcBrush(Entity):
    """
    Auto-generated from base.fgd, line 1303.
    An brush built entity with various features.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_brush")


class funcButton(Entity):
    """
    Auto-generated from base.fgd, line 3382.
    A brush entity that's designed to be used for a player-useable button. When used by the player, it moves to a pressed position.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_button")


class funcClipVphysics(Entity):
    """
    Auto-generated from base.fgd, line 1297.
    A brush entity that's considered solid to vphysics.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_clip_vphysics")


class funcConveyor(Entity):
    """
    Auto-generated from base.fgd, line 5635.
    Conveyor Belt
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_conveyor")


class funcDetail(Entity):
    """
    Auto-generated from base.fgd, line 5652.
    An entity that turns its brushes into detail brushes. Detail brushes do NOT contribute to visibility in the PVS. World geometry is not clipped to detail brushes, so if you have a small detail clump attached to a wall, the wall won't be cut up by the detail brush.func_detail is great for high-frequency brush geometry that's visual detail only. It is also ideal for reducing map VIS time.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_detail")


class funcDoor(Entity):
    """
    Auto-generated from base.fgd, line 3701.
    A brush entity for use as a player-useable door.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_door")


class funcDoorRotating(Entity):
    """
    Auto-generated from base.fgd, line 3709.
    A brush entity for use as a rotating player-useable door.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_door_rotating")


class funcDustcloud(Entity):
    """
    Auto-generated from base.fgd, line 3894.
    A brush entity that spawns a translucent dust cloud within its volume.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_dustcloud")


class funcDustmotes(Entity):
    """
    Auto-generated from base.fgd, line 3860.
    A brush entity that spawns sparkling dust motes within its volume.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_dustmotes")


class funcFishPool(Entity):
    """
    Auto-generated from base.fgd, line 5726.
    Creates a school of interactive fish that swim near this entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_fish_pool")


class funcGuntarget(Entity):
    """
    Auto-generated from base.fgd, line 5709.
    This is a moving target that moves along a path of path_tracks. It can be shot and killed.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_guntarget")


class funcIllusionary(Entity):
    """
    Auto-generated from base.fgd, line 5664.
    Legacy support. Use func_brush instead.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_illusionary")


class funcInstance(Entity):
    """
    Auto-generated from base.fgd, line 6528.
    An entity for placing an instance of a map file.  You may translate and rotate this entity. You can use the replace keys to do parameter changes on the instance contents.  In a $ at the beginning of a variable name.  Then just use the $variable name inside of the instance contents on any value portion of a key/value pair.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_instance")


class funcInstanceParms(Entity):
    """
    Auto-generated from base.fgd, line 6555.
    Place one copy of this entity inside of an instance.  Whenever you add a $parameter for the instance, get the properties of this entity.  It will auto-populate it with the variables and allow you to indicate the variable type.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_instance_parms")


class funcLadderendpoint(Entity):
    """
    Auto-generated from base.fgd, line 1256.
    An entity used to specify the endpoints of a ladder. This entity is functional, but has been replaced by the easier-to-use func_useableladder entity. Left in only for backwards-compatibility!\n\nTo be valid, a full sized player hull traced between the start and end points must not be obstructed at level activation time. The angle determines in which direction the player leaves the ladder if the player presses the +jump button.\n\nNote: This entity is non-functional in Counter-Strike: Source. In CS:S, use func_ladder instead.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_ladderendpoint")


class funcLod(Entity):
    """
    Auto-generated from base.fgd, line 931.
    Brush-built model that fades out over a specified distance. Useful for creating world detail that doesn't need to be drawn far away, for performance reasons.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_lod")


class funcMovelinear(Entity):
    """
    Auto-generated from base.fgd, line 3149.
    A brush entity that moves linearly along a given distance, in a given direction.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_movelinear")


class funcOccluder(Entity):
    """
    Auto-generated from base.fgd, line 5589.
    A occluder brush used to manage dynamic visibility in maps. Occluders are used to dynamically determine what things are behind them, to prevent trying to draw them at all.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_occluder")


class funcPhysbox(Entity):
    """
    Auto-generated from base.fgd, line 4856.
    A brush entity that's physically simulated.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_physbox")


class funcPlatrot(Entity):
    """
    Auto-generated from base.fgd, line 3237.
    A brush entity that moves vertically, and can rotate while doing so.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_platrot")


class funcPrecipitation(Entity):
    """
    Auto-generated from base.fgd, line 5670.
    A brush entity that creates rain and snow inside its volume.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_precipitation")


class funcReflectiveGlass(Entity):
    """
    Auto-generated from base.fgd, line 6492.
    Used to produce perfectly reflective glass that renders world + entities. Typically, you want your glass brush to have nodraw on all non-reflective surfaces and you want to use a shader like lightmappedreflective in your material applied to the non-nodraw surfaces. See hl2/materials/glass/reflectiveglass001.vmt for an example. NOTE: currently, you cannot use reflective glass in scenes with water, and you can only have 1 reflective glass in your view frustum ( + pvs ) at a time.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_reflective_glass")


class funcRotButton(Entity):
    """
    Auto-generated from base.fgd, line 3500.
    A brush entity that's designed to be used for a rotating player-useable button. When used by the player, it rotates to a pressed position.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_rot_button")


class funcRotating(Entity):
    """
    Auto-generated from base.fgd, line 3197.
    A rotating brush entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_rotating")


class funcSmokevolume(Entity):
    """
    Auto-generated from base.fgd, line 3869.
    A brush entity that spawns smoke particles within its volume.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_smokevolume")


class funcTanktrain(Entity):
    """
    Auto-generated from base.fgd, line 5903.
    A moving train that follows a path of path_track entities, shoots at the player, and can be killed.\nNOTE: Build your train so that the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_tanktrain")


class funcTrackautochange(Entity):
    """
    Auto-generated from base.fgd, line 5860.
    An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_trackautochange")


class funcTrackchange(Entity):
    """
    Auto-generated from base.fgd, line 5871.
    An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_trackchange")


class funcTracktrain(Entity):
    """
    Auto-generated from base.fgd, line 5879.
    A moving platform that the player can ride. It follows a path of path_track entities.\nNOTE: Build your train so that the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_tracktrain")


class funcTraincontrols(Entity):
    """
    Auto-generated from base.fgd, line 5914.
    When used by the player, this entity overrides the player's controls to let them drive a train.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_traincontrols")


class funcUseableladder(Entity):
    """
    Auto-generated from base.fgd, line 1228.
    A Half-Life 2 ladder. Handles player auto mount/unmount, as well as +use to get onto the ladder. \n\nSee also 'info_ladder_dismount', used to specify ladder auto-dismount points.\n\nNote: This entity is non-functional in Counter-Strike: Source. Use func_ladder instead.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_useableladder")


class funcViscluster(Entity):
    """
    Auto-generated from base.fgd, line 5659.
    Any leaves touching this brush will have their vis merged together into a single cluster.  Use multiple func_viscluster entities to reduce vis time
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_viscluster")


class funcWall(Entity):
    """
    Auto-generated from base.fgd, line 1291.
    Legacy support. Use func_brush instead.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_wall")


class funcWallToggle(Entity):
    """
    Auto-generated from base.fgd, line 5684.
    A brush entity that can be toggled on/off. When off, the brush will be non-solid and invisible. Does not cast lightmap shadows.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_wall_toggle")


class funcWaterAnalog(Entity):
    """
    Auto-generated from base.fgd, line 3176.
    A water brush entity that moves linearly along a given distance, in a given direction
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_water_analog")


class gameEnd(Entity):
    """
    Auto-generated from base.fgd, line 2331.
    An entity that ends a multiplayer game.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_end")


class gameGibManager(Entity):
    """
    Auto-generated from base.fgd, line 1090.
    An entity to control the number of gibs in the world, for performance reasons.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_gib_manager")


class gamePlayerEquip(Entity):
    """
    Auto-generated from base.fgd, line 2338.
    An entity that gives equipment to the player who activates it. To use, add new keys to this entity, where each key is the classname of a weapon/item, and the corresponding value is the number of those weapons/items to give to the player who uses this entity. If the 'Use Only' spawnflag isn't set, then players can just touch this entity to get the equipment.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_player_equip")


class gamePlayerTeam(Entity):
    """
    Auto-generated from base.fgd, line 2348.
    An entity that changes the team of the player who activates it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_player_team")


class gameRagdollManager(Entity):
    """
    Auto-generated from base.fgd, line 1073.
    An entity to control the number of ragdolls in the world, for performance reasons.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_ragdoll_manager")


class gameScore(Entity):
    """
    Auto-generated from base.fgd, line 2361.
    An entity that awards/deducts points from the player who activates it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_score")


class gameText(Entity):
    """
    Auto-generated from base.fgd, line 2377.
    An entity that displays text on player's screens.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_text")


class gameUi(Entity):
    """
    Auto-generated from base.fgd, line 2526.
    An entity used to override player input when the player is looking at it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_ui")


class gameWeaponManager(Entity):
    """
    Auto-generated from base.fgd, line 2320.
    An entity used to limit the number of a particular weapon type in the world. Useful in places where NPCs are spawning rapidly, dying, and dropping weapons.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_weapon_manager")


class gameZonePlayer(Entity):
    """
    Auto-generated from base.fgd, line 2566.
    An entity used to count the number of players within a zone.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "game_zone_player")


class gibshooter(Entity):
    """
    Auto-generated from base.fgd, line 2044.
    An entity that shoots out gibs. Style of body part depends on language type.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "gibshooter")


class hammerUpdateignorelist(Entity):
    """
    Auto-generated from base.fgd, line 4263.
    Specifies entities that are to be ignored by the hammer_update_safe_entities console command. Enter the targetnames of entities that you want to exclude into the list of fields here. Several of these may exist in a map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "hammer_updateignorelist")


class infoCameraLink(Entity):
    """
    Auto-generated from base.fgd, line 6302.
    An entity that can use point_cameras to render images for materials used by entities. To author the material, use the special identifier _rt_Camera for the $baseTexture (or whatever texture you want, like envmap, etc.) in the .vmt then connect the 'target' field to the entity which uses that material, and the 'PointCamera' field to the point_camera you want to have appear on that entity's material
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_camera_link")


class infoConstraintAnchor(Entity):
    """
    Auto-generated from base.fgd, line 4993.
    An entity used to attach constraints to a local position on an entity. Usually constraints will attach to the center of mass of an object. Attach the desired constraint to this entity, and then parent this entity to the entity you want the constraint to apply to.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_constraint_anchor")


class infoHint(Entity):
    """
    Auto-generated from base.fgd, line 2874.
    A hint that is not used for navigation. They don't go into the nodegraph, nor do they fall to the ground. Use these to provide some spatial context for NPCs, such as 'look here if you can't find the player' or 'throw rocks at this spot'.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_hint")


class infoIntermission(Entity):
    """
    Auto-generated from base.fgd, line 2669.
    An entity that defines an intermission spot where dead players will float until they respawn.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_intermission")


class infoLadderDismount(Entity):
    """
    Auto-generated from base.fgd, line 1270.
    An entity to handle endpoints for multiple ladders that are too close to each other.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_ladder_dismount")


class infoLandmark(Entity):
    """
    Auto-generated from base.fgd, line 2675.
    An entity that acts as a landmark for transitions to another level. There should be a corresponding info_landmark entity in the next map. Entities will be transitioned to the next level relative to the info_landmark entities.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_landmark")


class infoLighting(Entity):
    """
    Auto-generated from base.fgd, line 2803.
    An entity that can be used to change the lighting origin of a prop_static. Set the prop_static's Lighting Origin to point at this entity to make the prop_static light as if it was at the info_lighting's origin. Good for prop_static entities that are embedded in world geometry (like rocks/windows/etc).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_lighting")


class infoMassCenter(Entity):
    """
    Auto-generated from base.fgd, line 5000.
    An entity that overrides the mass center of the target physics prop, or func_physbox, by moving it to the info_mass_center's location.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_mass_center")


class infoNoDynamicShadow(Entity):
    """
    Auto-generated from base.fgd, line 2614.
    Use this entity to mark surfaces that shouldn't receive dynamic shadows. Useful to apply to walls and floors where shadows are drawn improperly, giving away the location of enemies.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_no_dynamic_shadow")


class infoNode(Entity):
    """
    Auto-generated from base.fgd, line 2822.
    A navigation node for ground moving NPCs. Navigation nodes are baked into the nodegraph so that NPCs can move to them. Ground nodes fall to the ground when they spawn.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_node")


class infoNodeAir(Entity):
    """
    Auto-generated from base.fgd, line 2857.
    A navigation node for flying NPCs. Air navigation nodes are baked into the nodegraph so that NPCs can move to them. Air nodes do not fall to the ground when they spawn.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_node_air")


class infoNodeAirHint(Entity):
    """
    Auto-generated from base.fgd, line 2864.
    A navigation node for flying NPCs that includes some context information for NPCs that are interested in it. The hint might indicate a window that could be looked into, or an item of interest that could be commented on. Many hint nodes are NPC-specific, so it's helpful to use naming conventions like 'Crow: Fly to point' in the hint choices list. The angles of a hint node indicate what direction the NPC should face to perform the hint behavior.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_node_air_hint")


class infoNodeClimb(Entity):
    """
    Auto-generated from base.fgd, line 2965.
    A climb-node for AI navigation. Only usable by NPCs that can climb.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_node_climb")


class infoNodeHint(Entity):
    """
    Auto-generated from base.fgd, line 2841.
    A navigation node for ground moving NPCs that includes some context information for NPCs that are interested in it. The hint might indicate a window that could be looked out of, or an item of interest that could be commented on. Many hint nodes are NPC-specific, so it's helpful to use naming conventions like 'Crow: Fly to point' in the hint choices list. The angles of a hint node indicate what direction the NPC should face to perform the hint behavior.\n\nIt's important to understand the distinction between scripts, such as scripted_sequence and scripted_schedule, and info_hint entities. Scripts summon NPCs to specific cue points to play their parts, while hints provide context information to the AI that they use to perform their behaviors. Hints require code support in the NPC, while scripts are generic and may require only animations to play. Use a hint if the behavior is driven by the AI, use a script if the behavior is driven by the map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_node_hint")


class infoNodeLink(Entity):
    """
    Auto-generated from base.fgd, line 2880.
    A dynamic connection between two navigation nodes. You specify the node IDs of the start and end nodes, and then you can use entity I/O to turn on and off the connection. This could be used to create or destroy a connection in the nodegraph because of some event in your map (a bridge being created/destroyed, etc).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_node_link")


class infoNodeLinkController(Entity):
    """
    Auto-generated from base.fgd, line 2926.
    An entity that controls all connections between nodes that intersect the controller's volume. This allows for mass enabling/disabling of all node connections through a volume.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_node_link_controller")


class infoNpcSpawnDestination(Entity):
    """
    Auto-generated from base.fgd, line 523.
    NPC Spawn Destination. (Consult npc_template_maker help for more info)
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_npc_spawn_destination")


class infoNull(Entity):
    """
    Auto-generated from base.fgd, line 2680.
    An entity that's immediately removed on spawning. Useful as a spotlight target.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_null")


class infoOverlay(Entity):
    """
    Auto-generated from base.fgd, line 2633.
    An entity that places an overlay on the world.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_overlay")


class infoOverlayTransition(Entity):
    """
    Auto-generated from base.fgd, line 2655.
    Overlay Transition
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_overlay_transition")


class infoParticleSystem(Entity):
    """
    Auto-generated from base.fgd, line 2694.
    An entity that spawns a particle system built using the particle editor.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_particle_system")


class infoPlayerStart(Entity):
    """
    Auto-generated from base.fgd, line 2621.
    This entity indicates the position and facing direction at which the player will spawn. Any number of info_player_start entities may be placed in a map for when working in cordoned-off portions of the map. When multiple info_player_start entities are present in a map, set the 'Master' spawnflag on one of them to indicate which one should be used when running the entire map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_start")


class infoProjecteddecal(Entity):
    """
    Auto-generated from base.fgd, line 2603.
    An entity that projects a decal onto the world (or props). If the decal has no target name, it will immediately apply itself when the level is loaded. If it has a name specified, it won't apply until it receives the 'Activate' input.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_projecteddecal")


class infoRadialLinkController(Entity):
    """
    Auto-generated from base.fgd, line 2959.
    This entity automatically severs node connections that pass through its radius. If it moves, it will restore those connections.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_radial_link_controller")


class infoTarget(Entity):
    """
    Auto-generated from base.fgd, line 2685.
    An entity that does nothing. Very useful as a positioning entity for other entities to refer to (i.e. the endpoint of an env_beam)
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_target")


class infoTeleportDestination(Entity):
    """
    Auto-generated from base.fgd, line 2810.
    An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can be used instead.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_teleport_destination")


class infodecal(Entity):
    """
    Auto-generated from base.fgd, line 2585.
    An entity that places a decal on the world. If the decal has no target name, it will immediately apply itself when the level is loaded. If it has a name specified, it won't apply until it receives the 'Activate' input.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "infodecal")


class keyframeRope(Entity):
    """
    Auto-generated from base.fgd, line 3342.
    A node entity that marks a point in a rope. The first node in the rope should be a move_rope, followed by 1 or more keyframe_ropes.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "keyframe_rope")


class keyframeTrack(Entity):
    """
    Auto-generated from base.fgd, line 3254.
    Animation KeyFrame
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "keyframe_track")


class light(Entity):
    """
    Auto-generated from base.fgd, line 2976.
    An invisible omnidirectional lightsource.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "light")


class lightDynamic(Entity):
    """
    Auto-generated from base.fgd, line 3010.
    An invisible lightsource that changes in some way over time.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "light_dynamic")


class lightEnvironment(Entity):
    """
    Auto-generated from base.fgd, line 2984.
    Sets the color and angle of the light from the sun and sky.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "light_environment")


class lightSpot(Entity):
    """
    Auto-generated from base.fgd, line 2998.
    An invisible and directional spotlight.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "light_spot")


class logicActiveAutosave(Entity):
    """
    Auto-generated from base.fgd, line 4470.
    An entity that is used to look for opportunities to autosave.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_active_autosave")


class logicAuto(Entity):
    """
    Auto-generated from base.fgd, line 3944.
    Fires outputs when a map spawns. If 'Remove on fire' flag is set the logic_auto is deleted after firing. It can be set to check a global state before firing. This allows you to only fire events based on what took place in a previous map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_auto")


class logicAutosave(Entity):
    """
    Auto-generated from base.fgd, line 4452.
    An entity that is used to force an autosave.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_autosave")


class logicBranch(Entity):
    """
    Auto-generated from base.fgd, line 4076.
    Tests a boolean value and fires an output based on whether the value is true or false. Use this entity to branch between two potential sets of events.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_branch")


class logicBranchListener(Entity):
    """
    Auto-generated from base.fgd, line 4096.
    Contains a list of logic_branch entities and fires outputs when the state of any of the logic_branches changes.\n\nThis entity is used to fire an event when a set of conditions are all satisfied.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_branch_listener")


class logicCase(Entity):
    """
    Auto-generated from base.fgd, line 4125.
    Compares an input to up to 16 preset values. If the input value is the same as any of the preset values, an output corresponding to that value is fired.\n\nFor example: if Case01 is set to 2 and Case02 is set to 5, and the input value is 5, the OnCase02 output will be fired.\n\nThis entity can also be used to select from a number of random targets via the PickRandom input. One of the OnCase outputs that is connected to another entity will be picked at random and fired.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_case")


class logicCollisionPair(Entity):
    """
    Auto-generated from base.fgd, line 4287.
    An entity that can be used to enables/disable vphysics collisions between two target entities.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_collision_pair")


class logicCompare(Entity):
    """
    Auto-generated from base.fgd, line 4053.
    Compares an input value to another value. If the input value is less than the compare value, the OnLessThan output is fired with the input value. If the input value is equal to the compare value, the OnEqualTo output is fired with the input value. If the input value is greater than the compare value, the OnGreaterThan output is fired with the input value.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_compare")


class logicLineto(Entity):
    """
    Auto-generated from base.fgd, line 4423.
    An entity that calculates and outputs a vector from one entity to another.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_lineto")


class logicMeasureMovement(Entity):
    """
    Auto-generated from base.fgd, line 6321.
    An entity that can measure the movement of an entity relative to another entity and apply that movement to a third entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_measure_movement")


class logicMulticompare(Entity):
    """
    Auto-generated from base.fgd, line 4177.
    Compares a set of inputs to each other. If they are all the same, fires an OnEqual output. If any are different, fires the OnNotEqual output.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_multicompare")


class logicNavigation(Entity):
    """
    Auto-generated from base.fgd, line 4433.
    An entity that is used to set navigation properties on other entities. Useful to make NPCs ignore physics props in their way that they can easily push.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_navigation")


class logicPlayerproxy(Entity):
    """
    Auto-generated from base.fgd, line 6400.
    An entity that is used to relay inputs/ouputs to the player and back to the world.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_playerproxy")


class logicRelay(Entity):
    """
    Auto-generated from base.fgd, line 4198.
    A message forwarder. Fires an OnTrigger output when triggered, and can be disabled to prevent forwarding outputs.\n\nUseful as an intermediary between one entity and another for turning on or off an I/O connection, or as a container for holding a set of outputs that can be triggered from multiple places.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_relay")


class logicTimer(Entity):
    """
    Auto-generated from base.fgd, line 4223.
    An entity that fires a timer event at regular, or random, intervals. It can also be set to oscillate betweena high and low end, in which case it will fire alternating high/low outputs each time it fires.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "logic_timer")


class materialModifyControl(Entity):
    """
    Auto-generated from base.fgd, line 6372.
    An entity that can be used to directly control material vars. To use it, you need to read the .vmt of the material you intend to change. Parent this entity to a brush model entity who's material you want to control.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "material_modify_control")


class mathColorblend(Entity):
    """
    Auto-generated from base.fgd, line 4374.
    Used to create a blend between two colors for controlling the color of another entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "math_colorblend")


class mathCounter(Entity):
    """
    Auto-generated from base.fgd, line 4394.
    Holds a numeric value and performs arithmetic operations upon it. If either the minimum or maximum legal value is nonzero, OutValue will be clamped to the legal range, and the OnHitMin/OnHitMax outputs will be fired at the appropriate times. If both min and max are set to zero, no clamping is performed and only the OutValue output will be fired.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "math_counter")


class mathRemap(Entity):
    """
    Auto-generated from base.fgd, line 4353.
    An entity that remaps a range of input values to a given range of output values.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "math_remap")


class momentaryRotButton(Entity):
    """
    Auto-generated from base.fgd, line 3533.
    A brush entity that's designed to be used for rotating wheels, where the player can rotate them to arbitrary positions before stopping.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "momentary_rot_button")


class moveKeyframed(Entity):
    """
    Auto-generated from base.fgd, line 3259.
    Keyframed Move Behavior
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "move_keyframed")


class moveRope(Entity):
    """
    Auto-generated from base.fgd, line 3347.
    The first node in set of nodes that are used to place ropes in the world. It should connect to 1 or more keyframe_rope entities.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "move_rope")


class moveTrack(Entity):
    """
    Auto-generated from base.fgd, line 3264.
    Track Move Behavior
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "move_track")


class npcFurniture(Entity):
    """
    Auto-generated from base.fgd, line 6351.
    An entity used for non-NPCs that need to synchronise their animation with an NPC in a scripted_sequence. Usually a pieceof furniture or door that an NPC needs to manipulate within a scripted_sequence.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "npc_furniture")


class npcPuppet(Entity):
    """
    Auto-generated from base.fgd, line 6512.
    Puppet entity that mimics the animations of a target NPC.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "npc_puppet")


class npcTemplateMaker(Entity):
    """
    Auto-generated from base.fgd, line 571.
    An entity that creates NPCs. The NPCs it creates are clones of a template NPC. NPCs are spawned around this maker's origin, or at specified destination points.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "npc_template_maker")


class pathTrack(Entity):
    """
    Auto-generated from base.fgd, line 5936.
    An entity used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the next path_track in the path.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "path_track")


class physBallsocket(Entity):
    """
    Auto-generated from base.fgd, line 5063.
    A constraint that keeps the position of two objects fixed, relative to the constraint's origin. It does not affect rotation.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_ballsocket")


class physConstraint(Entity):
    """
    Auto-generated from base.fgd, line 5071.
    A constraint that keeps the relative position and orientation of two objects fixed.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_constraint")


class physConstraintsystem(Entity):
    """
    Auto-generated from base.fgd, line 4940.
    An entity used to manage a group of interacting constraints and keep them stable. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_constraintsystem")


class physConvert(Entity):
    """
    Auto-generated from base.fgd, line 5155.
    Turns an arbitrary entity into a physically simulated entity. i.e. brush entities will behave like func_physbox, model entities behave like prop_physics.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_convert")


class physHinge(Entity):
    """
    Auto-generated from base.fgd, line 5035.
    A physically simulated hinge. Use the helper to define the axis of rotation.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_hinge")


class physKeepupright(Entity):
    """
    Auto-generated from base.fgd, line 4947.
    A controller that tries to keep an entity facing a particular direction.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_keepupright")


class physLengthconstraint(Entity):
    """
    Auto-generated from base.fgd, line 5122.
    A constraint that preserves the distance between two entities. If the 'Keep Rigid' flag is set, think of it as a rod. If not, think off it as a virtual rope.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_lengthconstraint")


class physMagnet(Entity):
    """
    Auto-generated from base.fgd, line 5248.
    An entity that acts like a magnet, attaching metallic physics objects to itself when they touch it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_magnet")


class physMotor(Entity):
    """
    Auto-generated from base.fgd, line 5221.
    An entity that tries to spin a target entity at a particular speed.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_motor")


class physPulleyconstraint(Entity):
    """
    Auto-generated from base.fgd, line 5076.
    A constraint that is essentially two length constraints and two points. Imagine it as a virtual rope connected to two objects, each suspended from a pulley above them.The constraint keeps the sum of the distances between the pulley points and their suspended objects constant.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_pulleyconstraint")


class physRagdollconstraint(Entity):
    """
    Auto-generated from base.fgd, line 5135.
    A constraint that fixes the position of two entities, relative to this constraint's origin. Also allows for limits on the rotation around each axis, in the space of this constraint.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_ragdollconstraint")


class physRagdollmagnet(Entity):
    """
    Auto-generated from base.fgd, line 2787.
    An entity that acts like a magnet for ragdolls. Useful for crafting exaggerated ragdoll behavior (i.e. guys falling over rails on death). If the Bar Magnet spawnflag is set, the magnet works like it was a cylindrical magnet i.e. it attracts ragdolls to the nearest point on a line.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_ragdollmagnet")


class physSlideconstraint(Entity):
    """
    Auto-generated from base.fgd, line 5090.
    A constraint that constrains an entity along a line segment.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_slideconstraint")


class physSpring(Entity):
    """
    Auto-generated from base.fgd, line 5006.
    A physically simulated spring. 'Length' is what's known as the 'natural spring length'. This is how long the spring would be if it was at rest (nothing hanging on it or attached). When you attach something to the spring, it will stretch longer than its 'natural length'. The amount of stretch is determined by the 'Sprint Constant'. The larger the spring constant the less stretch the spring.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_spring")


class physThruster(Entity):
    """
    Auto-generated from base.fgd, line 5198.
    An entity used to apply constant acceleration to a physics object. The force and torque is calculated using the position and direction of the thruster as an impulse. So moving those off the object's center will cause torque as well. Torque can be removed by unchecking the 'apply torque' flag. The position of the thruster can be forced to be at the object's center by checking to 'ignore pos' flag.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_thruster")


class physTorque(Entity):
    """
    Auto-generated from base.fgd, line 5213.
    An angular thruster. Use it to apply angular force to an entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "phys_torque")


class physicsCannister(Entity):
    """
    Auto-generated from base.fgd, line 4962.
    A physically simulated gas cannister that can have its cap shot off, at which point gas will start escaping and cause the cannister to fly around. If it takes enough damage, it will explode.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "physics_cannister")


class pointAnglesensor(Entity):
    """
    Auto-generated from base.fgd, line 4686.
    An entity that detects if another entity points in a given direction for a period of time.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_anglesensor")


class pointAngularvelocitysensor(Entity):
    """
    Auto-generated from base.fgd, line 4710.
    An entity that detects if another entity's angular velocity meets or exceeds a threshold value.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_angularvelocitysensor")


class pointBonusmapsAccessor(Entity):
    """
    Auto-generated from base.fgd, line 2514.
    An entity that relays bonus maps changes.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_bonusmaps_accessor")


class pointClientcommand(Entity):
    """
    Auto-generated from base.fgd, line 2500.
    An entity that issues commands to the client console, as if it was typed in by the player (if activator is a player, or the local player in single player).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_clientcommand")


class pointDevshotCamera(Entity):
    """
    Auto-generated from base.fgd, line 6392.
    An entity used by the -makedevshots system, which automatically takes screenshots at the position of every devshot camera in the level.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_devshot_camera")


class pointEnableMotionFixup(Entity):
    """
    Auto-generated from base.fgd, line 2413.
    An entity used to move a motion-disabled prop when it enables motion. Parent this entity to the prop, and when the prop has its motion enabled, it will immediately teleport to the origin of this entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_enable_motion_fixup")


class pointGamestatsCounter(Entity):
    """
    Auto-generated from base.fgd, line 6520.
    Generic game statistics counter.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_gamestats_counter")


class pointHurt(Entity):
    """
    Auto-generated from base.fgd, line 4793.
    An entity that does damage to all entities in a radius around itself, with a specified delay.If 'Target Entity' is specified, the damage is only done to that entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_hurt")


class pointMessage(Entity):
    """
    Auto-generated from base.fgd, line 2418.
    An entity that displays a text message in the world, at its origin.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_message")


class pointPlayermoveconstraint(Entity):
    """
    Auto-generated from base.fgd, line 4835.
    An entity that constrains players to a radius around itself, slowing them down the closer they get to the edge of the radius.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_playermoveconstraint")


class pointPosecontroller(Entity):
    """
    Auto-generated from base.fgd, line 4015.
    An entity that controls a pose parameter of a prop and cycles the pose clientside.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_posecontroller")


class pointProximitySensor(Entity):
    """
    Auto-generated from base.fgd, line 4759.
    An entity that detects another entity's proximity to a target position.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_proximity_sensor")


class pointServercommand(Entity):
    """
    Auto-generated from base.fgd, line 2507.
    An entity that issues commands to the server console.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_servercommand")


class pointSpotlight(Entity):
    """
    Auto-generated from base.fgd, line 2439.
    An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player. Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rests.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_spotlight")


class pointTeleport(Entity):
    """
    Auto-generated from base.fgd, line 4777.
    An entity that teleports a target entity to this position and angles. If 'Teleport Home' spawn flag is set, teleports the target entity to its spawn position instead.If object is physically simulated, simulation is turned off when teleported.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_teleport")


class pointTemplate(Entity):
    """
    Auto-generated from base.fgd, line 4483.
    Turns an entity, or set of entities, into a single template that can be instanced anywhere, and multiple times. If there are interdependencies (entity I/O, hierarchy, or other name references) between the entities in the template, the entities in the template will have their names changed and the interdependencies will be reconnected to the changes names. The name change format is as follows: '<original name>&0000', where the 0000 will be replaced with the current global template instance, so wildcard searches for '<original name>*' will still find them.\nIf you don't want the name fixup to happen, because you're only spawning the template once, or you want inputs to trigger all instances of the template, check the 'Preserve entity names' spawnflag. \nTo spawn the template in other places, use an env_entity_maker.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_template")


class pointTesla(Entity):
    """
    Auto-generated from base.fgd, line 2470.
    An entity that creates tesla lightning arcs around its origin.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_tesla")


class pointVelocitysensor(Entity):
    """
    Auto-generated from base.fgd, line 4741.
    An entity that detects and outputs an entity's velocity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_velocitysensor")


class pointViewcontrol(Entity):
    """
    Auto-generated from base.fgd, line 3981.
    A camera entity that controls the player's view. While it's active, the player will see out of the camera.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_viewcontrol")


class propDetail(Entity):
    """
    Auto-generated from base.fgd, line 5396.
    Detail Prop
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_detail")


class propDoorRotating(Entity):
    """
    Auto-generated from base.fgd, line 3729.
    An entity used to place a door in the world.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_door_rotating")


class propDynamic(Entity):
    """
    Auto-generated from base.fgd, line 5407.
    A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used as a prop_physics (i.e. it should be physically simulated) then it CANNOT be used as a prop_dynamic. Upon level load it will display a warning in the console and remove itself. Use a prop_physics instead.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_dynamic")


class propDynamicOrnament(Entity):
    """
    Auto-generated from base.fgd, line 5547.
    A way to attach one studio model to another as an ornament. It will render in the way that player/NPC weapons render.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_dynamic_ornament")


class propDynamicOverride(Entity):
    """
    Auto-generated from base.fgd, line 5415.
    A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage.\nprop_dynamic_override is a prototyping entity only. It will allow the use of models designed to be used as prop_physics.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_dynamic_override")


class propPhysics(Entity):
    """
    Auto-generated from base.fgd, line 5501.
    A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other constraints. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used as a prop_dynamic (i.e. it should not be physically simulated) then it CANNOT be used as a prop_physics. Upon level load it will display a warning in the console and remove itself. Use a prop_dynamic instead.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_physics")


class propPhysicsMultiplayer(Entity):
    """
    Auto-generated from base.fgd, line 5515.
    This class is the same as prop_physics, except the runtime collisions use a more bouncy method that avoids the prediction errors normal physics objects get.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_physics_multiplayer")


class propPhysicsOverride(Entity):
    """
    Auto-generated from base.fgd, line 5488.
    A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other constraints. It can also be configured to break when it takes enough damage. Health can be overridden on this version.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_physics_override")


class propRagdoll(Entity):
    """
    Auto-generated from base.fgd, line 5528.
    A prop that physically simulates and can be articulated with internal joints. The joint constraints are part of the physics model.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_ragdoll")


class propStatic(Entity):
    """
    Auto-generated from base.fgd, line 5402.
    A prop that doesn't move and doesn't animate.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_static")


class shadowControl(Entity):
    """
    Auto-generated from base.fgd, line 3063.
    An entity to control the shadows in the map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "shadow_control")


class skyCamera(Entity):
    """
    Auto-generated from base.fgd, line 2270.
    An entity used to control the 3D Skybox. Its origin is used to determine the 3D Skybox's position relative to the map. Place this entity, in the 3D Skybox, at the point where the origin of the map should be.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "sky_camera")


class tanktrainAi(Entity):
    """
    Auto-generated from base.fgd, line 5927.
    Train chase AI
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "tanktrain_ai")


class tanktrainAitarget(Entity):
    """
    Auto-generated from base.fgd, line 5920.
    An entity that changes the target of a tanktrain_ai entity.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "tanktrain_aitarget")


class testTraceline(Entity):
    """
    Auto-generated from base.fgd, line 5983.
    A debugging tool for testing tracelines.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "test_traceline")


class triggerApplyImpulse(Entity):
    """
    Auto-generated from base.fgd, line 6571.
    A trigger that adds impulse to touching entities.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_apply_impulse")


class triggerAutosave(Entity):
    """
    Auto-generated from base.fgd, line 5995.
    A trigger volume that autosaves when the player touches it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_autosave")


class triggerChangelevel(Entity):
    """
    Auto-generated from base.fgd, line 6009.
    An entity that triggers a level change.\nPlace an info_landmark in both maps that marks the 'same' location in each map.\nTIPS & TRICKS: To fire events in the next level, use the OnLevelChange output to turn on an env_global in the current level.  Create a logic_auto in the next level that checks for the state set by the env_global.\n\nTo control which entities go through the level transition, create one or more trigger_transitions and give them the same name as the landmark. Any entities within the trigger_transition(s) will go to the next map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_changelevel")


class triggerGravity(Entity):
    """
    Auto-generated from base.fgd, line 6034.
    A trigger volume that changes the gravity on any entity that touches it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_gravity")


class triggerHurt(Entity):
    """
    Auto-generated from base.fgd, line 6062.
    A trigger volume that damages entities that touch it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_hurt")


class triggerImpact(Entity):
    """
    Auto-generated from base.fgd, line 6195.
    A trigger volume that can be told to push all physics objects that are inside of it in the direction specified by this trigger's angles.\nAlso outputs the force at the time of impact for anyone else that wants to use it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_impact")


class triggerLook(Entity):
    """
    Auto-generated from base.fgd, line 6143.
    An entity used to trigger something when the player looks at something. It fires 'OnTrigger' when the player looks at a target entity for the given amount of time, while within the trigger volume. If the player leaves the trigger or looks away from the target entity the clock resets. If the 'Use Velocity instead of facing' spawnflag is checked, the trigger uses the player's velocity instead of the player's view, so it determines whenever the player is moving toward the target entity. Useful for triggering when players are driving a vehicle at something.NOTE: Only designed for single-player game. 
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_look")


class triggerMultiple(Entity):
    """
    Auto-generated from base.fgd, line 6121.
    A trigger volume that can be triggered multiple times.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_multiple")


class triggerOnce(Entity):
    """
    Auto-generated from base.fgd, line 6136.
    A trigger volume that removes itself after it is triggered once.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_once")


class triggerPlayermovement(Entity):
    """
    Auto-generated from base.fgd, line 6040.
    An entity that can be used to disable player's automatic ducking/unducking when jumping.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_playermovement")


class triggerProximity(Entity):
    """
    Auto-generated from base.fgd, line 6211.
    Measures the distance of the player within the trigger volume from a given point (and within a given radius). The NearestPlayerDistance output will be 0 when the player is at the center point, and 1 when the player is at the radius.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_proximity")


class triggerPush(Entity):
    """
    Auto-generated from base.fgd, line 6167.
    A trigger volume that pushes entities that touch it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_push")


class triggerRemove(Entity):
    """
    Auto-generated from base.fgd, line 6113.
    A trigger volume that removes any entities that touch it. Be careful, removing some entities can cause instability. This is not the same as killing entities. i.e. NPCs removed in this manner will not fire their OnKilled outputs.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_remove")


class triggerServerragdoll(Entity):
    """
    Auto-generated from base.fgd, line 6252.
    A volume that forces any NPC inside it to create a server side ragdoll instead of a client one.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_serverragdoll")


class triggerSoundscape(Entity):
    """
    Auto-generated from base.fgd, line 6054.
    Soundscape trigger. It is not necessary to create outputs for this trigger. It automatically will trigger the soundscape referred to by its 'Soundscape' property.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_soundscape")


class triggerTeleport(Entity):
    """
    Auto-generated from base.fgd, line 6225.
    A trigger volume that teleports entities that touch it. Entities are teleported to the Remote Destination, and have their angles set to that of the Remote Destination's. If a Local Destination Landmark is specified, teleported entities are offset from the target by their initial offset from the landmark, and their angles are left alone.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_teleport")


class triggerTeleportRelative(Entity):
    """
    Auto-generated from base.fgd, line 6238.
    A trigger volume that teleports entities that touch it. Entities are teleported by Offset from their current position. Useful to get objects out of situations where levels or entities suddenly appear interseting with them.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_teleport_relative")


class triggerTransition(Entity):
    """
    Auto-generated from base.fgd, line 6245.
    A volume that's used to control which entities go through the level transition. Create one or more trigger_transitions and give them the same name as the changelevel landmark. Any entities within the trigger_transition(s) will go to the next map.See trigger_changelevel for more info.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_transition")


class triggerWind(Entity):
    """
    Auto-generated from base.fgd, line 6182.
    A trigger volume that pushes physics objects that touch it.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "trigger_wind")


class vguiScreen(Entity):
    """
    Auto-generated from base.fgd, line 1359.
    A VGUI screen. Useful for in-world monitors.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "vgui_screen")


class vguiSlideshowDisplay(Entity):
    """
    Auto-generated from base.fgd, line 1364.
    Slideshow Display
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "vgui_slideshow_display")


class waterLodControl(Entity):
    """
    Auto-generated from base.fgd, line 6286.
    An entity used to control the LOD behavior of any water in the map. If your map has water, this entity is required.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "water_lod_control")


class worldspawn(Entity):
    """
    Auto-generated from base.fgd, line 860.
    This is the world entity. Each map can only contain one, and it's automatically created for you.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "worldspawn")


