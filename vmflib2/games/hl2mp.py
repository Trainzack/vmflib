"""
Helper classes for creating maps in any Source Engine game that uses hl2mp.fgd.
This file was auto-generated by import_fgd.py on 2020-01-15 18:10:33.803135.
"""

from vmflib2.vmf import *


class FilterActivatorTeam(Entity):
    """
    Auto-generated from hl2mp.fgd, line 30.
    A filter that filters by the team of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", filterteam=2):
        Entity.__init__(self, "filter_activator_team", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated

        # Filter Team Number : 
        self.filterteam = filterteam

        self.auto_properties.extend(["origin", "targetname", "Negated", "filterteam"])


class InfoPlayerCombine(Entity):
    """
    Auto-generated from hl2mp.fgd, line 17.
    This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of info_player_deathmatch entities may be placed in a map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "info_player_combine", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "angles"])


class InfoPlayerDeathmatch(Entity):
    """
    Auto-generated from hl2mp.fgd, line 10.
    This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of info_player_deathmatch entities may be placed in a map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "info_player_deathmatch", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "angles"])


class InfoPlayerRebel(Entity):
    """
    Auto-generated from hl2mp.fgd, line 24.
    This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of info_player_deathmatch entities may be placed in a map.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "info_player_rebel", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "angles"])


class PropPhysicsRespawnable(Entity):
    """
    Auto-generated from hl2mp.fgd, line 43.
    This class is the same as prop_physics, except it respawns after it breaks
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, modelscale: float="1.0", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, RespawnTime: float=60):
        Entity.__init__(self, "prop_physics_respawnable", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows


        # Respawn Time : Ammount in seconds this prop will respawn after it breaks.
        self.RespawnTime: float = RespawnTime

        self.auto_properties.extend(["origin", "globalname", "angles", "model", "skin", "modelscale", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "RespawnTime"])


class WeaponSlam(Entity):
    """
    Auto-generated from hl2mp.fgd, line 50.
    S.L.A.M. - Selectable Lightweight Attack Munition
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_slam", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


