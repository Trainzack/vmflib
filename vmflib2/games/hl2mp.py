"""
Helper classes for creating maps in any Source Engine game that uses hl2mp.fgd.
This file was auto-generated by import_fgd.py on 2018-06-20 02:19:30.566681.
"""

from vmflib2.vmf import *


class FilterActivatorTeam(Entity):
    """
    Auto-generated from hl2mp.fgd, line 30.
    A filter that filters by the team of the activator.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_activator_team", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = "Allow entities that match criteria" 

        # Filter Team Number : TODO: Replace this filler.
        self.filterteam = 2 

        self.auto_properties.extend(["targetname", "Negated", "filterteam"])


class InfoPlayerCombine(Entity):
    """
    Auto-generated from hl2mp.fgd, line 17.
    This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of info_player_deathmatch entities may be placed in a map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_combine", vmf_map)


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        self.auto_properties.extend(["angles"])


class InfoPlayerDeathmatch(Entity):
    """
    Auto-generated from hl2mp.fgd, line 10.
    This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of info_player_deathmatch entities may be placed in a map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_deathmatch", vmf_map)


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        self.auto_properties.extend(["angles"])


class InfoPlayerRebel(Entity):
    """
    Auto-generated from hl2mp.fgd, line 24.
    This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of info_player_deathmatch entities may be placed in a map.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_rebel", vmf_map)


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        self.auto_properties.extend(["angles"])


class PropPhysicsRespawnable(Entity):
    """
    Auto-generated from hl2mp.fgd, line 43.
    This class is the same as prop_physics, except it respawns after it breaks
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "prop_physics_respawnable", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname = "" 

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # World Model : TODO: Replace this filler.
        self.model = ""
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin = 0 
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = 0 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter = "" 

        # Disable shadows : TODO: Replace this filler.
        self.disableshadows = 0 

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage = 0 
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius = 0 
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = 0 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay = 0 

        # Minimum DX Level : TODO: Replace this filler.
        self.mindxlevel = 0 
        # Maximum DX Level : TODO: Replace this filler.
        self.maxdxlevel = 0 

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist = -1 
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist = 0 
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale = 1 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg = 0 
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist = 0 
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale = "0.1" 
        # Impact damage type : TODO: Replace this filler.
        self.Damagetype = 0 
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = 0 
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale = "1.0" 
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale = "0" 
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript = "" 
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion = 0 
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion = 0 
        # Sound to make when punted : TODO: Replace this filler.
        self.puntsound = ""

        # Render FX : TODO: Replace this filler.
        self.renderfx = 0 

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = 0 
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt = 255 
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor = "255 255 255" 
        # Disable Receiving Shadows : TODO: Replace this filler.
        self.disablereceiveshadows = 0 


        # Respawn Time : Ammount in seconds this prop will respawn after it breaks.
        self.RespawnTime = 60 

        self.auto_properties.extend(["targetname", "globalname", "angles", "model", "skin", "disableshadows", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "spawnflags", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "RespawnTime"])


class WeaponSlam(Entity):
    """
    Auto-generated from hl2mp.fgd, line 50.
    S.L.A.M. - Selectable Lightweight Attack Munition
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_slam", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist = -1 
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist = 0 
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale = 1 


        self.auto_properties.extend(["targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


