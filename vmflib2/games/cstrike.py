"""
Helper classes for creating maps in any Source Engine game that uses cstrike.fgd.
This file was auto-generated by import_fgd.py on 2018-06-20 02:19:30.646467.
"""

from vmflib2.vmf import *


class EnvDetailController(Entity):
    """
    Auto-generated from cstrike.fgd, line 118.
    An entity that lets you control the fade distances for detail props.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "env_detail_controller", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade.
        self.fademindist = 400 
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible.
        self.fademaxdist = 1200 

        self.auto_properties.extend(["angles", "fademindist", "fademaxdist"])


class FilterActivatorTeam(Entity):
    """
    Auto-generated from cstrike.fgd, line 42.
    A filter that filters by the team of the activator.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_activator_team", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = "Allow entities that match criteria" 

        # Filter Team Number : The team number to filter by.  If the filter mode is Allow, only entities whose 
        self.filterteam = 2 

        self.auto_properties.extend(["targetname", "Negated", "filterteam"])


class FuncBombTarget(Entity):
    """
    Auto-generated from cstrike.fgd, line 195.
    Bomb Target. The terrorists can place C4 explosives while standing in this zone.\n\nWhen the bomb is planted and explodes inside this area, the BombExplode outputs are fired. The game handles all of the bomb planting and scoring logic – the BombExplode outputs are provided to add visual and damage effects.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_bomb_target", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Heist Mode bomb target : This is a Bomb Target designed for the Heist game mode.
        self.heistbomb = 0 
        # Bomb Mount Target : TODO: Replace this filler.
        self.bomb_mount_target = ""

        self.auto_properties.extend(["targetname", "parentname", "heistbomb", "bomb_mount_target"])


class FuncBuyzone(Entity):
    """
    Auto-generated from cstrike.fgd, line 188.
    Buy Zone. Players can buy equipment while standing in this zone, if the zone matches their current team.\n\nA single Buy Zone entity must be either terrorist or counter-terrorist, it cannot be both. Should have the toolstrigger material applied to all sides
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_buyzone", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team Number (int) : TODO: Replace this filler.
        self.TeamNum = 0 


        self.auto_properties.extend(["targetname", "TeamNum"])


class FuncHostageRescue(Entity):
    """
    Auto-generated from cstrike.fgd, line 213.
    Hostage Rescue Zone. When a hostage is led into this zone, it is marked as rescued.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_hostage_rescue", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["targetname"])


class FuncLadder(Entity):
    """
    Auto-generated from cstrike.fgd, line 175.
    Ladder. Players will be able to freely along this brush, as if it was a ladder. If you are using a model prop for the visual representation of the ladder in the map, apply the toolsinvisibleladder material to the func_ladder brush.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_ladder", vmf_map)


class FuncPhysboxMultiplayer(Entity):
    """
    Auto-generated from cstrike.fgd, line 182.
    This class is the same as func_physbox, except the runtime collisions use a more bouncy method that avoids the prediction errors normal physics objects get.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_physbox_multiplayer", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter = "" 

        # Disable shadows : TODO: Replace this filler.
        self.disableshadows = 0 

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage = 0 
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius = 0 
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = 0 

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname = "" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # Prop Data : Set to the best approximation of the size and material of this entity's brushes. If set, it will override this entity's health and damage taken from various weapons. See the propdata.txt file in the scripts directory of your MOD to get a detailed list of what each entry specifies.
        self.propdata = 0 
        # Strength : Number of points of damage to take before breaking. 0 means don't break.
        self.health = 1 
        # Material Type : Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken.
        self.material = 0 
        # Gibs Direction : Used to decide which direction to throw gibs when broken.
        self.explosion = 0 
        # Precise Gib Direction : Specifies the direction to throw gibs when this breakable breaks. Be sure to select Use Precise Gib Dir in the Gibs Direction field!
        self.gibdir = "0 0 0" 
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = 0 
        # Gib Model : Used by HL1Port to specify a custom gib model to break into, overriding the 'Material Type'.
        self.gibmodel = "" 
        # Spawn On Break : When broken, an entity of the selected type will be created.
        self.spawnobject = 0 
        # Explode Magnitude : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage.
        self.explodemagnitude = 0 
        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay = 0 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin = ""

        # Render FX : TODO: Replace this filler.
        self.renderfx = 0 

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = 0 
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt = 255 
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor = "255 255 255" 
        # Disable Receiving Shadows : TODO: Replace this filler.
        self.disablereceiveshadows = 0 

        # Disable shadows : TODO: Replace this filler.
        self.disableshadows = 0 

        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # Impact Damage Type : TODO: Replace this filler.
        self.Damagetype = 0 
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale = "0" 
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript = "" 
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion = 0 
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion = 0 
        # Strength : Number of points of damage to take before breaking.  0 means don't break.
        self.health = 0 
        # Preferred Player-carry Angles : If the 'Use Preferred Carry Angles' spawnflag is set, this angle is the angle which the object should orient to when the player picks it up, with the physgun or +USE.
        self.preferredcarryangles = "0 0 0" 
        # Not solid to world : TODO: Replace this filler.
        self.notsolid = 0 


        self.auto_properties.extend(["targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "parentname", "globalname", "spawnflags", "propdata", "health", "material", "explosion", "gibdir", "nodamageforces", "gibmodel", "spawnobject", "explodemagnitude", "pressuredelay", "targetname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "disableshadows", "_minlight", "spawnflags", "Damagetype", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "health", "preferredcarryangles", "notsolid"])


class FuncTerritoryRespawnArea(Entity):
    """
    Auto-generated from cstrike.fgd, line 291.
    Players will respawn inside this area.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_territory_respawn_area", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["targetname"])


class HostageEntity(Entity):
    """
    Auto-generated from cstrike.fgd, line 78.
    Hostage. A hostage NPC will spawn at this point.\n\nThere are usually four hostages placed in each hostage rescue map. The model for each Hostage is randomly chosen.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "hostage_entity", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Hostage Model (int) : Not used. Hostage models are chosen randomly by the game.
        self.HostageType = 0 

        self.auto_properties.extend(["angles", "HostageType"])


class InfoMapParameters(Entity):
    """
    Auto-generated from cstrike.fgd, line 103.
    Map parameters. Used to set which teams can buys, and the C4 bomb detonation radius.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_map_parameters", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Teams that can buy : TODO: Replace this filler.
        self.buying = 0 
        # C4 Explosion Radius : Overrides the default radius of the explosion when the C4 bomb explodes. Max range is 2048
        self.bombradius = 500 

        self.auto_properties.extend(["targetname", "angles", "buying", "bombradius"])


class InfoPlayerCounterterrorist(Entity):
    """
    Auto-generated from cstrike.fgd, line 60.
    This entity marks the start point for counter-terrorists. One of these needs to be placed for each team member. 20 start points is typical. Should be placed at least 128 units away from each other and surrounding walls
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_counterterrorist", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        self.auto_properties.extend(["angles"])


class InfoPlayerLogo(Entity):
    """
    Auto-generated from cstrike.fgd, line 72.
    This is for logo maps for demos. All players will spawn here, and there will be no class menu, team menu, or HUD.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_logo", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        self.auto_properties.extend(["angles"])


class InfoPlayerTerrorist(Entity):
    """
    Auto-generated from cstrike.fgd, line 66.
    This entity marks the start point for terrorists. One of these needs to be placed for each team member. 20 start points is typical. Should be placed at least 128 units away from each other and surrounding walls.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_terrorist", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 


        self.auto_properties.extend(["angles"])


class InfoTerritoryControlBank(Entity):
    """
    Auto-generated from cstrike.fgd, line 266.
    Bank Territory Control Point
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_territory_control_bank", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Respawn area name : TODO: Replace this filler.
        self.respawn_area = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.buyzone = ""


        self.auto_properties.extend(["targetname", "angles", "respawn_area", "buyzone"])


class InfoTerritoryControlBarracks(Entity):
    """
    Auto-generated from cstrike.fgd, line 260.
    Barracks Territory Control Point
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_territory_control_barracks", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Respawn area name : TODO: Replace this filler.
        self.respawn_area = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.buyzone = ""


        self.auto_properties.extend(["targetname", "angles", "respawn_area", "buyzone"])


class InfoTerritoryControlCounterterrorist(Entity):
    """
    Auto-generated from cstrike.fgd, line 254.
    Counter-Terrorists' Base Territory Point (Non-Capturable)
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_territory_control_counterterrorist", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Respawn area name : TODO: Replace this filler.
        self.respawn_area = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.buyzone = ""


        self.auto_properties.extend(["targetname", "angles", "respawn_area", "buyzone"])


class InfoTerritoryControlEncryption(Entity):
    """
    Auto-generated from cstrike.fgd, line 272.
    Encryption Center Territory Control Point
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_territory_control_encryption", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Respawn area name : TODO: Replace this filler.
        self.respawn_area = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.buyzone = ""


        self.auto_properties.extend(["targetname", "angles", "respawn_area", "buyzone"])


class InfoTerritoryControlHospital(Entity):
    """
    Auto-generated from cstrike.fgd, line 240.
    Hospital Territory Control Point
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_territory_control_hospital", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Respawn area name : TODO: Replace this filler.
        self.respawn_area = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.buyzone = ""


        self.auto_properties.extend(["targetname", "angles", "respawn_area", "buyzone"])


class InfoTerritoryControlSurveillance(Entity):
    """
    Auto-generated from cstrike.fgd, line 278.
    Surveillance Center Territory Control Point
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_territory_control_surveillance", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Respawn area name : TODO: Replace this filler.
        self.respawn_area = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.buyzone = ""


        self.auto_properties.extend(["targetname", "angles", "respawn_area", "buyzone"])


class InfoTerritoryControlTerrorist(Entity):
    """
    Auto-generated from cstrike.fgd, line 247.
    Terrorists' Base Territory Point (Non-Capturable)
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_territory_control_terrorist", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Respawn area name : TODO: Replace this filler.
        self.respawn_area = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.buyzone = ""


        self.auto_properties.extend(["targetname", "angles", "respawn_area", "buyzone"])


class InfoViewParameters(Entity):
    """
    Auto-generated from cstrike.fgd, line 92.
    This entity selects whether or not this level uses the Half-Life 2 view parameters (eye height: 64, FOV: 75) or the old Counter-Strike settings (eye height: 53.5, FOV: 90).
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_view_parameters", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # View Mode : TODO: Replace this filler.
        self.ViewMode = 0 

        self.auto_properties.extend(["angles", "ViewMode"])


class ItemDefuser(Entity):
    """
    Auto-generated from cstrike.fgd, line 136.
    Defuse Kit
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "item_defuser", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class PointSurroundtest(Entity):
    """
    Auto-generated from cstrike.fgd, line 224.
    
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_surroundtest", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""


        self.auto_properties.extend(["targetname"])


class PointTerritoryControlRules(Entity):
    """
    Auto-generated from cstrike.fgd, line 285.
    
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "point_territory_control_rules", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Wave Respawn Time : Respawn time in seconds.
        self.respawntime = 30 

        self.auto_properties.extend(["targetname", "respawntime"])


class WeaponAk47(Entity):
    """
    Auto-generated from cstrike.fgd, line 156.
    CV-47
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_ak47", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponAug(Entity):
    """
    Auto-generated from cstrike.fgd, line 160.
    Bullpup
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_aug", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponAwp(Entity):
    """
    Auto-generated from cstrike.fgd, line 165.
    Magnum Sniper Rifle
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_awp", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponC4(Entity):
    """
    Auto-generated from cstrike.fgd, line 137.
    C4 Bomb
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_c4", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponDeagle(Entity):
    """
    Auto-generated from cstrike.fgd, line 142.
    Night Hawk .50C
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_deagle", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponElite(Entity):
    """
    Auto-generated from cstrike.fgd, line 144.
    .40 Dual Elites
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_elite", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponFamas(Entity):
    """
    Auto-generated from cstrike.fgd, line 158.
    Clarion 5.56
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_famas", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponFiveseven(Entity):
    """
    Auto-generated from cstrike.fgd, line 143.
    ES Five-Seven
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_fiveseven", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponFlashbang(Entity):
    """
    Auto-generated from cstrike.fgd, line 132.
    Flashbang
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_flashbang", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponG3sg1(Entity):
    """
    Auto-generated from cstrike.fgd, line 163.
    D3/AU-1 Semi-Auto Sniper Rifle
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_g3sg1", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponGalil(Entity):
    """
    Auto-generated from cstrike.fgd, line 155.
    IDF Defender
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_galil", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponGlock(Entity):
    """
    Auto-generated from cstrike.fgd, line 139.
    9X19mm Sidearm
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_glock", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponHegrenade(Entity):
    """
    Auto-generated from cstrike.fgd, line 133.
    HE Grenade
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_hegrenade", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponKnife(Entity):
    """
    Auto-generated from cstrike.fgd, line 130.
    Knife
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_knife", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponM249(Entity):
    """
    Auto-generated from cstrike.fgd, line 167.
    ES M249 Para
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_m249", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponM3(Entity):
    """
    Auto-generated from cstrike.fgd, line 146.
    Leone 12 Gauge Super
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_m3", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponM4a1(Entity):
    """
    Auto-generated from cstrike.fgd, line 159.
    Maverick M4A1 Carbine
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_m4a1", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponMac10(Entity):
    """
    Auto-generated from cstrike.fgd, line 153.
    Ingram MAC-10
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_mac10", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponMp5navy(Entity):
    """
    Auto-generated from cstrike.fgd, line 150.
    K&M Sub-Machine Gun
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_mp5navy", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponP228(Entity):
    """
    Auto-generated from cstrike.fgd, line 141.
    228 Compact
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_p228", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponP90(Entity):
    """
    Auto-generated from cstrike.fgd, line 152.
    ES C90
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_p90", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponScout(Entity):
    """
    Auto-generated from cstrike.fgd, line 162.
    Schmidt Scout
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_scout", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponSg550(Entity):
    """
    Auto-generated from cstrike.fgd, line 164.
    Krieg 550 Commando
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_sg550", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponSg552(Entity):
    """
    Auto-generated from cstrike.fgd, line 157.
    Krieg 552 Commando
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_sg552", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponSmokegrenade(Entity):
    """
    Auto-generated from cstrike.fgd, line 134.
    Smoke Grenade
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_smokegrenade", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponTmp(Entity):
    """
    Auto-generated from cstrike.fgd, line 149.
    Schmidt Machine Pistol
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_tmp", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponUmp45(Entity):
    """
    Auto-generated from cstrike.fgd, line 151.
    K&M UMP45
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_ump45", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponUsp(Entity):
    """
    Auto-generated from cstrike.fgd, line 140.
    K&M .45 Tactical
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_usp", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


class WeaponXm1014(Entity):
    """
    Auto-generated from cstrike.fgd, line 147.
    Leone YG1265 Auto Shotgun
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "weapon_xm1014", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""


        self.auto_properties.extend(["targetname", "angles", "spawnflags"])


