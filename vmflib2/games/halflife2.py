"""
Helper classes for creating maps in any Source Engine game that uses halflife2.fgd.
This file was auto-generated by import_fgd.py on 2020-01-19 09:11:14.327497.
"""

from vmflib2.vmf import *


class AiAllyManager(Entity):
    """
    Auto-generated from halflife2.fgd, line 2251.
    AI Ally Manager
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", maxallies: int=5, maxmedics: int=1):
        Entity.__init__(self, "ai_ally_manager", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Maximum number of allies : 
        self.maxallies: int = maxallies
        # Maximum number of medics : 
        self.maxmedics: int = maxmedics

        self.auto_properties.extend(["origin", "targetname", "maxallies", "maxmedics"])


class AiBattleLine(Entity):
    """
    Auto-generated from halflife2.fgd, line 2430.
    Battle line
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", parentname: str="", spawnflags="", actor: str="", Active=0, Strict=1):
        Entity.__init__(self, "ai_battle_line", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Actor(s) or squad to affect : 
        self.actor: str = actor
        # Active : 
        self.Active = Active
        # Strict : Player orders can override, applies to allies only
        self.Strict = Strict

        self.auto_properties.extend(["origin", "targetname", "angles", "parentname", "spawnflags", "actor", "Active", "Strict"])


class AiChangehintgroup(Entity):
    """
    Auto-generated from halflife2.fgd, line 2804.
    Change Hint Group
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", SearchType=0, SearchName: str="", NewHintGroup: str="", Radius: str="0.0", hintlimiting=0):
        Entity.__init__(self, "ai_changehintgroup", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Search Type : How to search for the entities to change.
        self.SearchType = SearchType
        # Name to search for : 
        self.SearchName: str = SearchName
        # New Hint Group : 
        self.NewHintGroup: str = NewHintGroup
        # Search Radius : Radius to search (0 for all of map)
        self.Radius: str = Radius
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, does not limit local navigation.
        self.hintlimiting = hintlimiting

        self.auto_properties.extend(["origin", "targetname", "SearchType", "SearchName", "NewHintGroup", "Radius", "hintlimiting"])


class AiChangetarget(Entity):
    """
    Auto-generated from halflife2.fgd, line 2788.
    Change Target
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", m_iszNewTarget: str=""):
        Entity.__init__(self, "ai_changetarget", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target entity : Name of entity whose target will be changed.
        self.target: str = target
        # New Target : 
        self.m_iszNewTarget: str = m_iszNewTarget

        self.auto_properties.extend(["origin", "targetname", "target", "m_iszNewTarget"])


class AiCitizenResponseSystem(Entity):
    """
    Auto-generated from halflife2.fgd, line 3042.
    If placed in the level, will manage citizens responses to player's actions.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "ai_citizen_response_system", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class AiGoalActbusy(Entity):
    """
    Auto-generated from halflife2.fgd, line 2715.
    AI Goal Act Busy
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", actor: str="", StartActive=0, SearchType=0, busysearchrange: float=2048, visibleonly=0, seeentity: str="", seeentitytimeout: str="1", sightmethod=0, type=0, safezone: str="", allowteleport=0):
        Entity.__init__(self, "ai_goal_actbusy", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor(s) to affect : NPC's that should act busy
        self.actor: str = actor
        # Start Active : 
        self.StartActive = StartActive
        # Search Type : How to search for the entities using the targetname.
        self.SearchType = SearchType
        # Search Range for Busy Hints : 
        self.busysearchrange: float = busysearchrange
        # Visible Busy Hints Only : 
        self.visibleonly = visibleonly

        # Sight Entity : The Sight Entity (if you provide one) is an entity that will leave the current ActBusy if the Actor playing the ActBusy loses sight of it for the amount of time specified in 'Sight Entity Timeout'. THIS MAY ONLY BE A TARGET NAME. NO CLASSNAMES.
        self.seeentity: str = seeentity
        # Sight Entity Timeout : If you provide a Sight Entity, the Actor will leave the current ActBusy if the Actor has lost sight of Sight Entity for this many seconds.
        self.seeentitytimeout: str = seeentitytimeout
        # Sight Enemy Method : The method to use to determine whether the Sight enemy is visible.
        self.sightmethod = sightmethod
        # Actbusy Type : 
        self.type = type
        # Combat Safe Zone : Only for combat actbusy. Lets you specify a volume which is the 'safe zone'. The Combat ActBusy will cancel if any enemies are seen in the safe zone.
        self.safezone: str = safezone
        # Allow actor to teleport? : 
        self.allowteleport = allowteleport

        self.auto_properties.extend(["origin", "targetname", "actor", "StartActive", "SearchType", "busysearchrange", "visibleonly", "seeentity", "seeentitytimeout", "sightmethod", "type", "safezone", "allowteleport"])


class AiGoalActbusyQueue(Entity):
    """
    Auto-generated from halflife2.fgd, line 2747.
    AI Goal Act Busy Queue
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", actor: str="", StartActive=0, SearchType=0, busysearchrange: float=2048, visibleonly=0, node_exit: str="", node01: str="", node02: str="", node03: str="", node04: str="", node05: str="", node06: str="", node07: str="", node08: str="", node09: str="", node10: str="", node11: str="", node12: str="", node13: str="", node14: str="", node15: str="", node16: str="", node17: str="", node18: str="", node19: str="", node20: str="", mustreachfront=0):
        Entity.__init__(self, "ai_goal_actbusy_queue", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor(s) to affect : NPC's that should act busy
        self.actor: str = actor
        # Start Active : 
        self.StartActive = StartActive
        # Search Type : How to search for the entities using the targetname.
        self.SearchType = SearchType
        # Search Range for Busy Hints : 
        self.busysearchrange: float = busysearchrange
        # Visible Busy Hints Only : 
        self.visibleonly = visibleonly

        # Exit Node : The name of the node the first NPC in the queue should move to when he leaves the head of the queue.
        self.node_exit: str = node_exit
        # Node 1 : The name of the first actbusy hint node in the queue.
        self.node01: str = node01
        # Node 2 : The name of the second actbusy hint node in the queue.
        self.node02: str = node02
        # Node 3 : The name of the third actbusy hint node in the queue.
        self.node03: str = node03
        # Node 4 : The name of the fourth actbusy hint node in the queue.
        self.node04: str = node04
        # Node 5 : The name of the fifth actbusy hint node in the queue.
        self.node05: str = node05
        # Node 6 : The name of the sixth actbusy hint node in the queue.
        self.node06: str = node06
        # Node 7 : The name of the seventh actbusy hint node in the queue.
        self.node07: str = node07
        # Node 8 : The name of the eighth actbusy hint node in the queue.
        self.node08: str = node08
        # Node 9 : The name of the ninth actbusy hint node in the queue.
        self.node09: str = node09
        # Node 10 : The name of the tenth actbusy hint node in the queue.
        self.node10: str = node10
        # Node 11 : The name of the eleventh actbusy hint node in the queue.
        self.node11: str = node11
        # Node 12 : The name of the twelfth actbusy hint node in the queue.
        self.node12: str = node12
        # Node 13 : The name of the thirteenth actbusy hint node in the queue.
        self.node13: str = node13
        # Node 14 : The name of the fourteenth actbusy hint node in the queue.
        self.node14: str = node14
        # Node 15 : The name of the fifteenth actbusy hint node in the queue.
        self.node15: str = node15
        # Node 16 : The name of the sixteenth actbusy hint node in the queue.
        self.node16: str = node16
        # Node 17 : The name of the seventeenth actbusy hint node in the queue.
        self.node17: str = node17
        # Node 18 : The name of the eighteenth actbusy hint node in the queue.
        self.node18: str = node18
        # Node 19 : The name of the nineteenth actbusy hint node in the queue.
        self.node19: str = node19
        # Node 20 : The name of the twentieth actbusy hint node in the queue.
        self.node20: str = node20
        # Must Reach Front : If true, NPCs much reach the front node in the queue before they're allowed to leave the queue.
        self.mustreachfront = mustreachfront

        self.auto_properties.extend(["origin", "targetname", "actor", "StartActive", "SearchType", "busysearchrange", "visibleonly", "node_exit", "node01", "node02", "node03", "node04", "node05", "node06", "node07", "node08", "node09", "node10", "node11", "node12", "node13", "node14", "node15", "node16", "node17", "node18", "node19", "node20", "mustreachfront"])


class AiGoalAssault(Entity):
    """
    Auto-generated from halflife2.fgd, line 2640.
    AI Goal Assault
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", actor: str="", rallypoint: str="", SearchType=0, StartActive=0, AssaultCue=1, RallySelectMethod=0):
        Entity.__init__(self, "ai_goal_assault", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor(s) to affect : NPC's that should perform this assault
        self.actor: str = actor
        # Rally Point Set : Root name of rally points for this assault. Use an asterisk '*' after the root name to match all with the same root.
        self.rallypoint: str = rallypoint
        # Search Type : How to search for the entities using the targetname.
        self.SearchType = SearchType
        # Start Active : 
        self.StartActive = StartActive
        # Assault Cue : 
        self.AssaultCue = AssaultCue
        # Rally Point Selection Method : 
        self.RallySelectMethod = RallySelectMethod

        self.auto_properties.extend(["origin", "targetname", "actor", "rallypoint", "SearchType", "StartActive", "AssaultCue", "RallySelectMethod"])


class AiGoalFollow(Entity):
    """
    Auto-generated from halflife2.fgd, line 2422.
    AI Goal Follow
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", actor: str="", goal: str="", SearchType=0, StartActive=0, MaximumState=1, Formation=0):
        Entity.__init__(self, "ai_goal_follow", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor(s) to affect : 
        self.actor: str = actor
        # Target Entity : The name of the entity to follow. If blank, and the actor likes the player, then defaults to player
        self.goal: str = goal
        # Search Type : How to search for the entities using the targetname.
        self.SearchType = SearchType
        # Start Active : 
        self.StartActive = StartActive
        # Maximum state : 
        self.MaximumState = MaximumState
        # Formation : 
        self.Formation = Formation


        self.auto_properties.extend(["origin", "targetname", "actor", "goal", "SearchType", "StartActive", "MaximumState", "Formation"])


class AiGoalInjuredFollow(Entity):
    """
    Auto-generated from halflife2.fgd, line 2426.
    AI Goal Injured Follow
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", actor: str="", goal: str="", SearchType=0, StartActive=0, MaximumState=1, Formation=0):
        Entity.__init__(self, "ai_goal_injured_follow", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor(s) to affect : 
        self.actor: str = actor
        # Target Entity : The name of the entity to follow. If blank, and the actor likes the player, then defaults to player
        self.goal: str = goal
        # Search Type : How to search for the entities using the targetname.
        self.SearchType = SearchType
        # Start Active : 
        self.StartActive = StartActive
        # Maximum state : 
        self.MaximumState = MaximumState
        # Formation : 
        self.Formation = Formation


        self.auto_properties.extend(["origin", "targetname", "actor", "goal", "SearchType", "StartActive", "MaximumState", "Formation"])


class AiGoalLead(Entity):
    """
    Auto-generated from halflife2.fgd, line 2356.
    AI Goal Lead
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", actor: str="", goal: str="", WaitPointName: str="", WaitDistance: float="", LeadDistance: float="64", RetrieveDistance: float="96", SuccessDistance: float="0", Run="0", Retrieve=1, ComingBackWaitForSpeak=1, RetrieveWaitForSpeak=1, DontSpeakStart=0, LeadDuringCombat=0, GagLeader=0, AttractPlayerConceptModifier: str="", WaitOverConceptModifier: str="", ArrivalConceptModifier: str="", PostArrivalConceptModifier: str="", SuccessConceptModifier: str="", FailureConceptModifier: str="", ComingBackConceptModifier: str="", RetrieveConceptModifier: str="", spawnflags="", SearchType=0):
        Entity.__init__(self, "ai_goal_lead", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor(s) to affect : 
        self.actor: str = actor
        # Target Entity : 
        self.goal: str = goal
        # Point to wait at if the target's not visible : 
        self.WaitPointName: str = WaitPointName
        # Wait until player gets this close : 
        self.WaitDistance: float = WaitDistance
        # Lead Distance : The player is considered to be lagging if he's beyond this distance.  The Actor will consider retrieving when the player is 4x 'Lead Distance' away.
        self.LeadDistance: float = LeadDistance
        # Retrieve Distance : The distance from the player that the NPC should return to when retrieving a lagging player. Must be between ('Lead Distance' + 24) and ('Lead Distance' * 4) to avoid the leader ping-ponging.
        self.RetrieveDistance: float = RetrieveDistance
        # Success Distance : The distance from the player (to the NPC) that the player must be within for the Lead to succeed, once the NPC has reached the goal. If set to 0, it'll use the lead distance instead (for legacy support).
        self.SuccessDistance: float = SuccessDistance
        # Run instead of Walk : 
        self.Run = Run
        # Retrieve player? : 
        self.Retrieve = Retrieve
        # Before Coming Back, Wait for speech? : 
        self.ComingBackWaitForSpeak = ComingBackWaitForSpeak
        # On Retrieve, Wait for speech? : 
        self.RetrieveWaitForSpeak = RetrieveWaitForSpeak
        # Speak start greeting? : 
        self.DontSpeakStart = DontSpeakStart
        # Lead during combat? : 
        self.LeadDuringCombat = LeadDuringCombat
        # Gag Leader? : 
        self.GagLeader = GagLeader
        # Attract player concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ATTRACTPLAYER' concept is spoken.
        self.AttractPlayerConceptModifier: str = AttractPlayerConceptModifier
        # Player wait over concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_WAITOVER' concept is spoken.
        self.WaitOverConceptModifier: str = WaitOverConceptModifier
        # Arrival concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ARRIVAL' concept is spoken.
        self.ArrivalConceptModifier: str = ArrivalConceptModifier
        # Post-arrival concepts modifier : 
        self.PostArrivalConceptModifier: str = PostArrivalConceptModifier
        # Success concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_SUCCESS' concept is spoken.
        self.SuccessConceptModifier: str = SuccessConceptModifier
        # Failure concept modifier : Appended to the keyvalues passed into the response rules when the 'lead_fail' concept is spoken.
        self.FailureConceptModifier: str = FailureConceptModifier
        # Coming Back concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_RETRIEVE' concept is spoken. Spoken as the NPC starts returning to the player to retrieve him.
        self.ComingBackConceptModifier: str = ComingBackConceptModifier
        # Retrieve concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_COMINGBACK' concept is spoken. Spoken when NPC has finally reached the player to retrieve him.
        self.RetrieveConceptModifier: str = RetrieveConceptModifier
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Search Type : How to search for the entities using the targetname.
        self.SearchType = SearchType

        self.auto_properties.extend(["origin", "targetname", "actor", "goal", "WaitPointName", "WaitDistance", "LeadDistance", "RetrieveDistance", "SuccessDistance", "Run", "Retrieve", "ComingBackWaitForSpeak", "RetrieveWaitForSpeak", "DontSpeakStart", "LeadDuringCombat", "GagLeader", "AttractPlayerConceptModifier", "WaitOverConceptModifier", "ArrivalConceptModifier", "PostArrivalConceptModifier", "SuccessConceptModifier", "FailureConceptModifier", "ComingBackConceptModifier", "RetrieveConceptModifier", "spawnflags", "SearchType"])


class AiGoalLeadWeapon(Entity):
    """
    Auto-generated from halflife2.fgd, line 2365.
    AI Goal Lead (Weapon). A version of the ai_goal_lead entity that requires the player to have the specified weapon before the Actor(s) will lead the player to their target.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", actor: str="", goal: str="", WaitPointName: str="", WaitDistance: float="", LeadDistance: float="64", RetrieveDistance: float="96", SuccessDistance: float="0", Run="0", Retrieve=1, ComingBackWaitForSpeak=1, RetrieveWaitForSpeak=1, DontSpeakStart=0, LeadDuringCombat=0, GagLeader=0, AttractPlayerConceptModifier: str="", WaitOverConceptModifier: str="", ArrivalConceptModifier: str="", PostArrivalConceptModifier: str="", SuccessConceptModifier: str="", FailureConceptModifier: str="", ComingBackConceptModifier: str="", RetrieveConceptModifier: str="", spawnflags="", WeaponName="weapon_bugbait", MissingWeaponConceptModifier: str="", SearchType=0):
        Entity.__init__(self, "ai_goal_lead_weapon", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor(s) to affect : 
        self.actor: str = actor
        # Target Entity : 
        self.goal: str = goal
        # Point to wait at if the target's not visible : 
        self.WaitPointName: str = WaitPointName
        # Wait until player gets this close : 
        self.WaitDistance: float = WaitDistance
        # Lead Distance : The player is considered to be lagging if he's beyond this distance.  The Actor will consider retrieving when the player is 4x 'Lead Distance' away.
        self.LeadDistance: float = LeadDistance
        # Retrieve Distance : The distance from the player that the NPC should return to when retrieving a lagging player. Must be between ('Lead Distance' + 24) and ('Lead Distance' * 4) to avoid the leader ping-ponging.
        self.RetrieveDistance: float = RetrieveDistance
        # Success Distance : The distance from the player (to the NPC) that the player must be within for the Lead to succeed, once the NPC has reached the goal. If set to 0, it'll use the lead distance instead (for legacy support).
        self.SuccessDistance: float = SuccessDistance
        # Run instead of Walk : 
        self.Run = Run
        # Retrieve player? : 
        self.Retrieve = Retrieve
        # Before Coming Back, Wait for speech? : 
        self.ComingBackWaitForSpeak = ComingBackWaitForSpeak
        # On Retrieve, Wait for speech? : 
        self.RetrieveWaitForSpeak = RetrieveWaitForSpeak
        # Speak start greeting? : 
        self.DontSpeakStart = DontSpeakStart
        # Lead during combat? : 
        self.LeadDuringCombat = LeadDuringCombat
        # Gag Leader? : 
        self.GagLeader = GagLeader
        # Attract player concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ATTRACTPLAYER' concept is spoken.
        self.AttractPlayerConceptModifier: str = AttractPlayerConceptModifier
        # Player wait over concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_WAITOVER' concept is spoken.
        self.WaitOverConceptModifier: str = WaitOverConceptModifier
        # Arrival concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ARRIVAL' concept is spoken.
        self.ArrivalConceptModifier: str = ArrivalConceptModifier
        # Post-arrival concepts modifier : 
        self.PostArrivalConceptModifier: str = PostArrivalConceptModifier
        # Success concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_SUCCESS' concept is spoken.
        self.SuccessConceptModifier: str = SuccessConceptModifier
        # Failure concept modifier : Appended to the keyvalues passed into the response rules when the 'lead_fail' concept is spoken.
        self.FailureConceptModifier: str = FailureConceptModifier
        # Coming Back concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_RETRIEVE' concept is spoken. Spoken as the NPC starts returning to the player to retrieve him.
        self.ComingBackConceptModifier: str = ComingBackConceptModifier
        # Retrieve concept modifier : Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_COMINGBACK' concept is spoken. Spoken when NPC has finally reached the player to retrieve him.
        self.RetrieveConceptModifier: str = RetrieveConceptModifier
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Weapon : 
        self.WeaponName = WeaponName
        # Missing weapon concept modifier : 
        self.MissingWeaponConceptModifier: str = MissingWeaponConceptModifier
        # Search Type : How to search for the entities using the targetname.
        self.SearchType = SearchType

        self.auto_properties.extend(["origin", "targetname", "actor", "goal", "WaitPointName", "WaitDistance", "LeadDistance", "RetrieveDistance", "SuccessDistance", "Run", "Retrieve", "ComingBackWaitForSpeak", "RetrieveWaitForSpeak", "DontSpeakStart", "LeadDuringCombat", "GagLeader", "AttractPlayerConceptModifier", "WaitOverConceptModifier", "ArrivalConceptModifier", "PostArrivalConceptModifier", "SuccessConceptModifier", "FailureConceptModifier", "ComingBackConceptModifier", "RetrieveConceptModifier", "spawnflags", "WeaponName", "MissingWeaponConceptModifier", "SearchType"])


class AiGoalOperator(Entity):
    """
    Auto-generated from halflife2.fgd, line 1857.
    Indicates items in the world that some NPCs may operate upon
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, actor: str="", target: str="", contexttarget: str="", state=0, moveto=1):
        Entity.__init__(self, "ai_goal_operator", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Actor to affect : NPC that should perform this operation
        self.actor: str = actor
        # Position entity : Name of the entity that the NPC should move to in order to perform the operation.
        self.target: str = target
        # Context target : (Optional) Name of an entity that the operator will use within context.
        self.contexttarget: str = contexttarget
        # Initial State : 
        self.state = state
        # How should NPC approach? : 
        self.moveto = moveto

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "actor", "target", "contexttarget", "state", "moveto"])


class AiGoalPolice(Entity):
    """
    Auto-generated from halflife2.fgd, line 2528.
    AI Goal Police
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", spawnflags="", policeradius: float=512, policetarget: str=""):
        Entity.__init__(self, "ai_goal_police", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Radius : Radius to police
        self.policeradius: float = policeradius
        # Target : Target to police
        self.policetarget: str = policetarget

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "spawnflags", "policeradius", "policetarget"])


class AiGoalStandoff(Entity):
    """
    Auto-generated from halflife2.fgd, line 2457.
    AI Goal Standoff
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", actor: str="", SearchType=0, StartActive=0, HintGroupChangeReaction=1, Aggressiveness=2, PlayerBattleline=1, StayAtCover=0, AbandonIfEnemyHides=0):
        Entity.__init__(self, "ai_goal_standoff", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor(s) to affect : 
        self.actor: str = actor
        # Search Type : How to search for the entities using the targetname.
        self.SearchType = SearchType
        # Start Active : 
        self.StartActive = StartActive
        # Reaction to tactical change : What to do if leader moves, threat is neutralized, hint group changes, etc
        self.HintGroupChangeReaction = HintGroupChangeReaction
        # Aggressiveness : 
        self.Aggressiveness = Aggressiveness
        # Player battleline : Player defines a battle line, applies to allies only
        self.PlayerBattleline = PlayerBattleline
        # Stay at cover location : When have suitable cover, don't change it (disables advancing to battle line)
        self.StayAtCover = StayAtCover
        # Abandon if enemies hide : If no enemy detected recently, stop the standoff
        self.AbandonIfEnemyHides = AbandonIfEnemyHides

        self.auto_properties.extend(["origin", "targetname", "actor", "SearchType", "StartActive", "HintGroupChangeReaction", "Aggressiveness", "PlayerBattleline", "StayAtCover", "AbandonIfEnemyHides"])


class AiNpcEventresponsesystem(Entity):
    """
    Auto-generated from halflife2.fgd, line 2798.
    An entity that allows you to generate events for nearby friendly NPCs to respond to.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "ai_npc_eventresponsesystem", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class AiRelationship(Entity):
    """
    Auto-generated from halflife2.fgd, line 2208.
    AI Relationship - Sets relationships between groups of NPCs in the AI.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", subject: str="", target: str="", disposition=3, radius: float=0, rank: int=0, StartActive=0, Reciprocal=0, spawnflags=""):
        Entity.__init__(self, "ai_relationship", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Subject(s) : This is the NPC(s) whose disposition will change. May be a targetname or a classname.
        self.subject: str = subject
        # Target(s) : This is the NPC(s) about whom the Subject(s) will change their disposition. May be a tarGetname or a classname.
        self.target: str = target
        # Disposition : Choose the way the Subject(s) should feel about the Target(s)
        self.disposition = disposition
        # Radius for subject : 
        self.radius: float = radius
        # Disposition Priority : How much the Subject(s) should Like/Hate/Fear the Target(s). Higher priority = stronger feeling.
        self.rank: int = rank
        # Start Active : 
        self.StartActive = StartActive
        # Reciprocal : Set this to YES to have the new relationship mirrored by Target
        self.Reciprocal = Reciprocal
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "subject", "target", "disposition", "radius", "rank", "StartActive", "Reciprocal", "spawnflags"])


class AiScriptConditions(Entity):
    """
    Auto-generated from halflife2.fgd, line 2827.
    AI Script Conditions
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Actor: str="", StartDisabled=1, MinimumState=1, MaximumState=3, ScriptStatus=2, RequiredTime: float=0, MinTimeout: float=0, MaxTimeout: float=0, ActorSeePlayer=2, PlayerActorProximity: float=0, PlayerActorFOV: float=360, PlayerActorFOVTrueCone=0, PlayerActorLOS=2, target: str="", ActorSeeTarget=2, ActorTargetProximity: float=0, PlayerTargetProximity: float=0, PlayerTargetFOV: float=360, PlayerTargetFOVTrueCone=0, PlayerTargetLOS=2, PlayerBlockingActor=2, ActorInPVS=2, ActorInVehicle=2, PlayerInVehicle=2, spawnflags=""):
        Entity.__init__(self, "ai_script_conditions", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Actor : NPC Target
        self.Actor: str = Actor
        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Minimum state : 
        self.MinimumState = MinimumState
        # Maximum state : 
        self.MaximumState = MaximumState
        # Actor is running a script? : 
        self.ScriptStatus = ScriptStatus
        # Required Time : Duration of time that all the conditions must be true
        self.RequiredTime: float = RequiredTime
        # Minimum time out : Minimum time before OnConditionsTimeout is fired. 0 = never expire.
        self.MinTimeout: float = MinTimeout
        # Maximum time out : Maximum time before OnConditionsTimeout is fired. 0 = ignore (If you don't specify a Maximum timeout, conditions will time out at exactly Minimum Time Out. If you DO specify a Maximum time out, timeout will occur randomly between Minimum and Maximum time out values.)
        self.MaxTimeout: float = MaxTimeout
        # Actor Sees Player : 
        self.ActorSeePlayer = ActorSeePlayer
        # Player distance : The distance the player must/must not be to the actor. Negative values for NOT, 0 for ignore.
        self.PlayerActorProximity: float = PlayerActorProximity
        # Player FOV for Actor  : Specify angle of view cone in degrees. Negative value = NOT
        self.PlayerActorFOV: float = PlayerActorFOV
        # Play FOV to Actor is a true view cone : Player's view cone is evaluated as a true cone, not pie slice 
        self.PlayerActorFOVTrueCone = PlayerActorFOVTrueCone
        # Player has LOS to Actor : Checks that the player has clear Line of Sight to the Actor
        self.PlayerActorLOS = PlayerActorLOS
        # Target (Optional) : Optional entity to include in conditions
        self.target: str = target
        # Actor Sees Target : 
        self.ActorSeeTarget = ActorSeeTarget
        # Target distance : The distance the actor must/must not be to the Target. Negative values for NOT, 0 for ignore.
        self.ActorTargetProximity: float = ActorTargetProximity
        # Player distance from Target : The distance the player must/must not be to the Target. Negative values for NOT, 0 for ignore.
        self.PlayerTargetProximity: float = PlayerTargetProximity
        # Player FOV for Target : Specify angle of view cone in degrees. Negative value = NOT
        self.PlayerTargetFOV: float = PlayerTargetFOV
        # Play FOV to Target is a true view cone : Player's view cone is evaluated as a true cone, not pie slice 
        self.PlayerTargetFOVTrueCone = PlayerTargetFOVTrueCone
        # Player has LOS to Target : Checks that the player has clear Line of Sight to the Target
        self.PlayerTargetLOS = PlayerTargetLOS
        # Player blocking Actor : Checks that the player is blocking the Actor's path
        self.PlayerBlockingActor = PlayerBlockingActor
        # Actor in Player's PVS : Checks that the actor is in the player's PVS
        self.ActorInPVS = ActorInPVS
        # Actor in a vehicle : Checks the actor's state in a vehicle
        self.ActorInVehicle = ActorInVehicle
        # Player in a vehicle : Checks the player's state in a vehicle
        self.PlayerInVehicle = PlayerInVehicle
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "Actor", "StartDisabled", "MinimumState", "MaximumState", "ScriptStatus", "RequiredTime", "MinTimeout", "MaxTimeout", "ActorSeePlayer", "PlayerActorProximity", "PlayerActorFOV", "PlayerActorFOVTrueCone", "PlayerActorLOS", "target", "ActorSeeTarget", "ActorTargetProximity", "PlayerTargetProximity", "PlayerTargetFOV", "PlayerTargetFOVTrueCone", "PlayerTargetLOS", "PlayerBlockingActor", "ActorInPVS", "ActorInVehicle", "PlayerInVehicle", "spawnflags"])


class AiSound(Entity):
    """
    Auto-generated from halflife2.fgd, line 3842.
    This entity makes sounds or smells that can be sensed by NPCs, butnot by the player. This can be used to cause reactions in nearby NPCs.\n\nSound Types\n  Combat: Will cause most NPCs to become alert\n  World: Will cause most NPCs to become alert\n  Danger: Will cause most NPCs to move away from the position of the sound\n  Bullet Impact: \n  Carcass: \n  Meat: \n  Garbage: \n  Thumper: causes antlions to run away briefly\n  Readiness: (Low, Medium, High) Causes player companions that can hear this sound to change readiness\n
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", volume: int=120, duration: float="0.5", soundtype=0, soundcontext=0, locationproxy: str=""):
        Entity.__init__(self, "ai_sound", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Volume : How far away this sound can be heard. This is a radius.
        self.volume: int = volume
        # Duration : How long the sound persists each time you insert it.
        self.duration: float = duration
        # Sound Type : The type of sound or smell will determine the reaction of NPCs that sense it.
        self.soundtype = soundtype
        # Additional sound context (optional) : Optional settings specifying such things as who can or cannot hear the sound.
        self.soundcontext = soundcontext
        # Location Proxy : The name of an entity to use as a proxy to determine the location at which to make the sound. If you specify an entity here, the sound will be made at that entity's location (!player included)
        self.locationproxy: str = locationproxy

        self.auto_properties.extend(["origin", "targetname", "parentname", "volume", "duration", "soundtype", "soundcontext", "locationproxy"])


class AiscriptedSchedule(Entity):
    """
    Auto-generated from halflife2.fgd, line 2989.
    Issues a command to an NPC without taking the NPC out of its AI. This does not seize control of the NPC as a scripted_sequence does
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", m_iszEntity: str="", m_flRadius: int=0, graball=0, spawnflags="", forcestate=0, schedule=1, interruptability=0, goalent: str=""):
        Entity.__init__(self, "aiscripted_schedule", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target NPC : The name or classname of an NPC to use.
        self.m_iszEntity: str = m_iszEntity
        # Search Radius (0=everywhere) : Radius to search within for an NPC to use. 0 searches everywhere.
        self.m_flRadius: int = m_flRadius
        # All in radius : Whether to grab all matching NPCs in the specified radius, instead of just one
        self.graball = graball
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # AI state to set : 
        self.forcestate = forcestate
        # Schedule to run : 
        self.schedule = schedule
        # Interruptability : 
        self.interruptability = interruptability
        # Goal entity : Provides the name of a schedule-specific goal entity (see 'Schedule to run')
        self.goalent: str = goalent

        self.auto_properties.extend(["origin", "targetname", "m_iszEntity", "m_flRadius", "graball", "spawnflags", "forcestate", "schedule", "interruptability", "goalent"])


class AssaultAssaultpoint(Entity):
    """
    Auto-generated from halflife2.fgd, line 2574.
    (Assault) assault point
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", assaultgroup: str="", nextassaultpoint: str="", assaulttimeout: float="3.0", clearoncontact=0, allowdiversion=0, allowdiversionradius: float=0, nevertimeout=0, strict=0, spawnflags="", forcecrouch=0, urgent=0, assaulttolerance=36):
        Entity.__init__(self, "assault_assaultpoint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Assault Hint Group : NPC's movements are constrained to this hint group once assault has begun
        self.assaultgroup: str = assaultgroup
        # Next assault point (optional) : 
        self.nextassaultpoint: str = nextassaultpoint
        # Assault time out : This point is cleared when no enemies are seen for this long (seconds)
        self.assaulttimeout: float = assaulttimeout
        # Clear on contact with enemies : If you come in contact with enemies while approaching the assault point, clear our assault point
        self.clearoncontact = clearoncontact
        # Allow diversion : If you come in contact with enemies while approaching the assault point, divert to kill them. Resume the assault once contact is lost.
        self.allowdiversion = allowdiversion
        # Diversion Proximity : If Allow Diversion is set, NPC will only divert from assault to attack an enemy that is within this distance of the assault point. 0 = No limit.
        self.allowdiversionradius: float = allowdiversionradius
        # Never Timeout : If set, the assault never ends for NPCs assaulting this point. Useful for forcing NPCs back to a point.
        self.nevertimeout = nevertimeout
        # Strict? : 
        self.strict = strict
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Force Crouch : NPCs using this assault point are forced into crouching while holding it.
        self.forcecrouch = forcecrouch
        # Urgent : If true, NPCs will consider movement to this assault point as Urgent Navigation.
        self.urgent = urgent
        # Attack Tolerance : How far this NPC may move from the assault point to try to attack an enemy.
        self.assaulttolerance = assaulttolerance

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "assaultgroup", "nextassaultpoint", "assaulttimeout", "clearoncontact", "allowdiversion", "allowdiversionradius", "nevertimeout", "strict", "spawnflags", "forcecrouch", "urgent", "assaulttolerance"])


class AssaultRallypoint(Entity):
    """
    Auto-generated from halflife2.fgd, line 2551.
    (Assault) rally point
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", assaultpoint: str="", assaultdelay: float=0, rallysequence: str="", priority: int=1, forcecrouch=0, urgent=0):
        Entity.__init__(self, "assault_rallypoint", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Assault Point : Location to move to as assault begins
        self.assaultpoint: str = assaultpoint
        # Assault Delay : How long to wait after cue is given before assault begins.
        self.assaultdelay: float = assaultdelay
        # Rally Sequence : Override the NPC's wait activity by entering a sequence name.
        self.rallysequence: str = rallysequence
        # Priority : Higher priority rally points get selected first.
        self.priority: int = priority
        # Force Crouch : NPCs using this assault point are forced into crouching while holding it.
        self.forcecrouch = forcecrouch
        # Urgent : If true, NPCs will consider movement to this rally point as Urgent Navigation.
        self.urgent = urgent

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "assaultpoint", "assaultdelay", "rallysequence", "priority", "forcecrouch", "urgent"])


class CombineMine(Entity):
    """
    Auto-generated from halflife2.fgd, line 3901.
    Combine Land Mine
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", bounce=1, LockSilently=1, StartDisarmed=0, Modification=0):
        Entity.__init__(self, "combine_mine", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Bounce : Whether the mine should bounce up in the air before exploding.
        self.bounce = bounce
        # Lock Silently : If yes, mine plays no sound when clamps close
        self.LockSilently = LockSilently
        # Start Disarmed : If yes, mine begins dormant.
        self.StartDisarmed = StartDisarmed
        # Citizen modified : 'Normal' is default Combine behavior. 'Cavern' detonates earlier in its jump, and has a different default skin.
        self.Modification = Modification

        self.auto_properties.extend(["origin", "targetname", "parentname", "bounce", "LockSilently", "StartDisarmed", "Modification"])


class CyclerActor(Entity):
    """
    Auto-generated from halflife2.fgd, line 1972.
    Actor Cycler
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", damagefilter: str="", ResponseContext: str="", target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, disableshadows=0, model: str="", Sentence: str=""):
        Entity.__init__(self, "cycler_actor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles



        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext


        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Model : 
        self.model: str = model
        # Sentence Group : 
        self.Sentence: str = Sentence

        self.auto_properties.extend(["origin", "targetname", "angles", "damagefilter", "ResponseContext", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "disableshadows", "model", "Sentence"])


class EnvAlyxemp(Entity):
    """
    Auto-generated from halflife2.fgd, line 4493.
    Special effect for the Alyx's EMP device.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", parentname: str="", Type=0, EndTargetName: str=""):
        Entity.__init__(self, "env_alyxemp", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # EMP Type : 
        self.Type = Type
        # Target Entity : Entity to use as a target endpoint.
        self.EndTargetName: str = EndTargetName

        self.auto_properties.extend(["origin", "angles", "targetname", "parentname", "Type", "EndTargetName"])


class EnvAr2explosion(Entity):
    """
    Auto-generated from halflife2.fgd, line 3934.
    AR2 explosion visual effect. Big, volume-filling brown cloud. Does not cause damage or emit sound.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", material: str="particle/particle_noisesphere"):
        Entity.__init__(self, "env_ar2explosion", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Particle Material : The material to use for each particle in the explosion.
        self.material: str = material

        self.auto_properties.extend(["origin", "targetname", "parentname", "material"])


class EnvCitadelEnergyCore(Entity):
    """
    Auto-generated from halflife2.fgd, line 4477.
    Special effect for the energy cores in citadel.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", scale: float=1):
        Entity.__init__(self, "env_citadel_energy_core", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Scale : Scale of the effect.  1 is the default size, 2 is twice that, etc.
        self.scale: float = scale

        self.auto_properties.extend(["origin", "angles", "targetname", "parentname", "spawnflags", "scale"])


class EnvEntityDissolver(Entity):
    """
    Auto-generated from halflife2.fgd, line 4573.
    Entity Dissolver
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str="", magnitude: int=250, dissolvetype="Energy"):
        Entity.__init__(self, "env_entity_dissolver", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target to Dissolve : Targetname of the entity you want to dissolve.
        self.target: str = target
        # Magnitude : How strongly to push away from the center.
        self.magnitude: int = magnitude
        # Dissolve Type : 
        self.dissolvetype = dissolvetype

        self.auto_properties.extend(["origin", "targetname", "target", "magnitude", "dissolvetype"])


class EnvFlare(Entity):
    """
    Auto-generated from halflife2.fgd, line 3948.
    Flare
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", scale: float=1, duration: float=30, spawnflags=""):
        Entity.__init__(self, "env_flare", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Scale : 
        self.scale: float = scale
        # Duration : 
        self.duration: float = duration
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "scale", "duration", "spawnflags"])


class EnvGlobal(Entity):
    """
    Auto-generated from halflife2.fgd, line 3126.
    An entity to control a game-specific global states.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", initialstate=0, counter: int=0, spawnflags="", globalstate=""):
        Entity.__init__(self, "env_global", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Initial State : 
        self.initialstate = initialstate
        # Counter : An integer counter value associated with this global.
        self.counter: int = counter
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Global State to Set : 
        self.globalstate = globalstate

        self.auto_properties.extend(["origin", "targetname", "initialstate", "counter", "spawnflags", "globalstate"])


class EnvGunfire(Entity):
    """
    Auto-generated from halflife2.fgd, line 1116.
    Gunfire Effect
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", targetname: str="", StartDisabled=0, target: str="", minburstsize: int=2, maxburstsize: int=7, minburstdelay: float=2, maxburstdelay: float=5, rateoffire: float=10, spread=5, bias=1, collisions=0, shootsound="Weapon_AR2.NPC_Single", tracertype="AR2TRACER"):
        Entity.__init__(self, "env_gunfire", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Target : Shoot at this target. REMEMBER - this is an effect only! It does not do damage!
        self.target: str = target
        # Min Burst Size : Minimum number of rounds in a burst.
        self.minburstsize: int = minburstsize
        # Max Burst Size : Maximum number of rounds in a burst.
        self.maxburstsize: int = maxburstsize
        # Min Delay Between Bursts : Minimum delay between bursts. (seconds)
        self.minburstdelay: float = minburstdelay
        # Max Delay Between Bursts : Maximum delay between bursts. (seconds)
        self.maxburstdelay: float = maxburstdelay
        # Rate of fire : Expressed as rounds per second
        self.rateoffire: float = rateoffire
        # Bullet spread : The 'cone of inaccuracy' of the shots fired by this entity.
        self.spread = spread
        # Bullet distribution should be... : How to distribute bullets within the spread. Even distribution is a true scatter throughout the spread. Biased towards the outside makes the shots 'miss' the target by tending towards the outside of the spread.
        self.bias = bias
        # Collision detection : Whether/how to handle bullet collision detection. NOTE: If you select NONE, this entity will be very cheap to use, but all bullets will stop short at their target's position in space and there will be no impact effects. Normal collision detection does the same things NPCs do when they fire their guns (except harm anything).
        self.collisions = collisions
        # Shoot Sound : Gunfire sound to make
        self.shootsound = shootsound
        # Tracer : Type of tracer to display
        self.tracertype = tracertype

        self.auto_properties.extend(["origin", "parentname", "targetname", "StartDisabled", "target", "minburstsize", "maxburstsize", "minburstdelay", "maxburstdelay", "rateoffire", "spread", "bias", "collisions", "shootsound", "tracertype"])


class EnvHeadcrabcanister(Entity):
    """
    Auto-generated from halflife2.fgd, line 1161.
    Headcrab canister
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", angles: "Origin"="0 0 0", targetname: str="", spawnflags="", HeadcrabType=0, HeadcrabCount: int=6, FlightSpeed: float=3000, FlightTime: float=5, StartingHeight: float=0, MinSkyboxRefireTime: float=0, MaxSkyboxRefireTime: float=0, SkyboxCannisterCount: int=1, Damage: float=150, DamageRadius: float=750, SmokeLifetime: float=30, LaunchPositionName: str=""):
        Entity.__init__(self, "env_headcrabcanister", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Which headcrab to spawn? : 
        self.HeadcrabType = HeadcrabType
        # Headcrab count : Number of headcrabs to spawn on impact
        self.HeadcrabCount: int = HeadcrabCount
        # Flight Speed : Speed to fly through the air
        self.FlightSpeed: float = FlightSpeed
        # Flight Time : Time to fly through the air in seconds
        self.FlightTime: float = FlightTime
        # Starting Height : Relative height from the landing position at which the canister should be launched. Positive values mean launch it above the impact point, negative values mean launch it below.
        self.StartingHeight: float = StartingHeight
        # Min Refire Time : Min number of seconds before the cannister is refired. This will only work for cannisters placed in the skybox.
        self.MinSkyboxRefireTime: float = MinSkyboxRefireTime
        # Max Refire Time : Max number of seconds before the cannister is refired. This will only work for cannisters placed in the skybox.
        self.MaxSkyboxRefireTime: float = MaxSkyboxRefireTime
        # Cannister count : Number of cannisters to fire in the skybox (0 means fire continuously, forever).
        self.SkyboxCannisterCount: int = SkyboxCannisterCount
        # Impact damage : Max damage the canister applies on impact
        self.Damage: float = Damage
        # Impact damage radius : Max radius of the impact damage for the canister
        self.DamageRadius: float = DamageRadius
        # Smoke Duration : Duration that the canister smokes.  -1 means always smoke.
        self.SmokeLifetime: float = SmokeLifetime
        # Launch Position Name : If the canister should launch to it's origin from another point within the world, this should specify an info_target at the launch origin.
        self.LaunchPositionName: str = LaunchPositionName

        self.auto_properties.extend(["origin", "parentname", "angles", "targetname", "spawnflags", "HeadcrabType", "HeadcrabCount", "FlightSpeed", "FlightTime", "StartingHeight", "MinSkyboxRefireTime", "MaxSkyboxRefireTime", "SkyboxCannisterCount", "Damage", "DamageRadius", "SmokeLifetime", "LaunchPositionName"])


class EnvMuzzleflash(Entity):
    """
    Auto-generated from halflife2.fgd, line 3967.
    Muzzle Flash
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", angles: "Origin"="0 0 0", parentattachment: str="", scale: float="1"):
        Entity.__init__(self, "env_muzzleflash", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent Attachment : The name of an attachment on the parent to hierarchically attach to.
        self.parentattachment: str = parentattachment
        # Scale : Size of the muzzle flash.
        self.scale: float = scale

        self.auto_properties.extend(["origin", "targetname", "parentname", "angles", "parentattachment", "scale"])


class EnvRotorwash(Entity):
    """
    Auto-generated from halflife2.fgd, line 3891.
    Rotorwash Effect
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags=""):
        Entity.__init__(self, "env_rotorwash", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags"])


class EnvSpeaker(Entity):
    """
    Auto-generated from halflife2.fgd, line 4432.
    Announcement Speaker
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", ResponseContext: str="", delaymin: str="15", delaymax: str="135", spawnflags="", rulescript: str="", concept: str=""):
        Entity.__init__(self, "env_speaker", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Min Delay Between Announcements : 
        self.delaymin: str = delaymin
        # Max Delay Between Announcements : 
        self.delaymax: str = delaymax
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Context rule script : Script file containing rules for playing appropriate sounds.
        self.rulescript: str = rulescript
        # Concept name : High level concept name used as primary search key.
        self.concept: str = concept


        self.auto_properties.extend(["origin", "targetname", "ResponseContext", "delaymin", "delaymax", "spawnflags", "rulescript", "concept"])


class EnvSporeexplosion(Entity):
    """
    Auto-generated from halflife2.fgd, line 1111.
    Bugbait Spore Effect
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=0, spawnrate: float="25"):
        Entity.__init__(self, "env_sporeexplosion", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Spawn Rate (as percentage) : How dense the spore effect is
        self.spawnrate: float = spawnrate

        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "spawnrate"])


class EnvStarfield(Entity):
    """
    Auto-generated from halflife2.fgd, line 3941.
    Starfield effect
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "env_starfield", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class EnvTerrainmorph(Entity):
    """
    Auto-generated from halflife2.fgd, line 3976.
    Morphs terrain by pulling vertices along a normal.\n\nPlace this entity the desired distance from a terrain surface and set ANGLES to the normal along which you want to pull the surface's vertices. If you set the INSTANT spawnflag, the morph will take place instantly instead of over time.\n
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", startradius: int=500, goalradius: int=100, duration: int=3, fraction: int=1, spawnflags=""):
        Entity.__init__(self, "env_terrainmorph", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Start Radius : Radius of the effect when morphing begins. Only this value is used
        self.startradius: int = startradius
        # Goal Radius : Radius of the effect at the end of morphing. The radius of this effect will change from 
        self.goalradius: int = goalradius
        # Duration : The morph will take place over this period of time (seconds). Ignored if flagged to occur instantly
        self.duration: int = duration
        # Displacement Fraction : If set to 1, the terrain surface will be pulled exactly to this entity's position.
        self.fraction: int = fraction
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "startradius", "goalradius", "duration", "fraction", "spawnflags"])


class FilterCombineballType(Entity):
    """
    Auto-generated from halflife2.fgd, line 4562.
    A filter that filters by combine ball type.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", balltype=1):
        Entity.__init__(self, "filter_combineball_type", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated

        # Ball Type : 
        self.balltype = balltype

        self.auto_properties.extend(["origin", "targetname", "Negated", "balltype"])


class FuncBulletshield(Entity):
    """
    Auto-generated from halflife2.fgd, line 4217.
    A shield that stops only bullets.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", InputFilter=0, StartDisabled=0, disableshadows=0, spawnflags="", _minlight: str="", Solidity=0, excludednpc: str="", invert_exclusion=0, solidbsp=0, vrad_brush_cast_shadows=0):
        Entity.__init__(self, "func_bulletshield", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Input Filter : Used to specify which inputs this entity will accept.
        self.InputFilter = InputFilter

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Solidity : Used to control the solidity/collision of these brushes.
        self.Solidity = Solidity
        # NPC class excluded from collisions : If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name.
        self.excludednpc: str = excludednpc
        # Invert NPC class exclusion : If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid.
        self.invert_exclusion = invert_exclusion
        # Solid BSP : Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush.
        self.solidbsp = solidbsp
        # Shadows : Set this if this brush casts lightmap shadows.
        self.vrad_brush_cast_shadows = vrad_brush_cast_shadows


        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "InputFilter", "StartDisabled", "disableshadows", "spawnflags", "_minlight", "Solidity", "excludednpc", "invert_exclusion", "solidbsp", "vrad_brush_cast_shadows"])


class FuncCombineBallSpawner(Entity):
    """
    Auto-generated from halflife2.fgd, line 171.
    Spawns Combine balls.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", globalname: str="", spawnflags="", ballcount: int=3, minspeed: float="300.0", maxspeed: float="600.0", ballradius: float="20.0", balltype="Combine Energy Ball 1", ballrespawntime: float="4.0f"):
        Entity.__init__(self, "func_combine_ball_spawner", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Ball count : This is how many balls will be bouncing around inside the spawner
        self.ballcount: int = ballcount
        # Min ball speed : The minimum speed of balls that fly in the spawner
        self.minspeed: float = minspeed
        # Max ball speed : The maximum speed of balls that fly in the spawner
        self.maxspeed: float = maxspeed
        # Ball radius : The radius of the energy balls
        self.ballradius: float = ballradius
        # Ball Type : 
        self.balltype = balltype
        # Ball Respawn Time : The energy balls respawn time
        self.ballrespawntime: float = ballrespawntime


        self.auto_properties.extend(["targetname", "origin", "angles", "globalname", "spawnflags", "ballcount", "minspeed", "maxspeed", "ballradius", "balltype", "ballrespawntime"])


class FuncHealthcharger(Entity):
    """
    Auto-generated from halflife2.fgd, line 3055.
    Wall health recharger
    """
    def __init__(self, vmf_map: "ValveMap", StartDisabled=0, parentname: str="", origin: "Origin"="", globalname: str="", _minlight: str=""):
        Entity.__init__(self, "func_healthcharger", vmf_map)

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Minimum light level : 
        self._minlight: str = _minlight

        self.auto_properties.extend(["StartDisabled", "parentname", "origin", "globalname", "_minlight"])


class FuncLookdoor(Entity):
    """
    Auto-generated from halflife2.fgd, line 3094.
    A door that moves either when looked by a targeted object or when a target object comes near the door.  Behavior can be either based on viewing direction or proximity alone, or on a combination of both.  If inverted the doors behavior will be the opposite.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, movedir: "Origin"="0 0 0", startposition: float=0, speed: int=100, movedistance: float=100, blockdamage: float=0, startsound: str="", stopsound: str="", spawnflags="", ProximityDistance: str="0.0", ProximityOffset: str="0.0", FieldOfView: str="0.0"):
        Entity.__init__(self, "func_lookdoor", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Move Direction (Pitch Yaw Roll) : The direction the brushes will move, when told to.
        self.movedir: "Origin" = movedir
        # Start Position : Position of brush when spawned. The range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance).
        self.startposition: float = startposition
        # Speed : The speed that the brush moves, in inches per second.
        self.speed: int = speed
        # Move Distance : The distance from the starting point that the brush should move, in inches.
        self.movedistance: float = movedistance
        # Block Damage : The amount of damage to do to any entity that blocks the brushes, per frame.
        self.blockdamage: float = blockdamage
        # Sound played when the brush starts moving. : 
        self.startsound: str = startsound
        # Sound played when the brush stops moving. : 
        self.stopsound: str = stopsound

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Proximity Distance : If non-zero, proximity range over which door will move
        self.ProximityDistance: str = ProximityDistance
        # Proximity Offset : Offset from the target object
        self.ProximityOffset: str = ProximityOffset
        # FieldOfView : If non-zero, field of view over which door will move
        self.FieldOfView: str = FieldOfView

        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "movedir", "startposition", "speed", "movedistance", "blockdamage", "startsound", "stopsound", "spawnflags", "ProximityDistance", "ProximityOffset", "FieldOfView"])


class FuncMonitor(Entity):
    """
    Auto-generated from halflife2.fgd, line 4205.
    A monitor that renders the view from a given point_camera entity.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", InputFilter=0, StartDisabled=0, disableshadows=0, spawnflags="", _minlight: str="", Solidity=0, excludednpc: str="", invert_exclusion=0, solidbsp=0, vrad_brush_cast_shadows=0, target: str=""):
        Entity.__init__(self, "func_monitor", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Input Filter : Used to specify which inputs this entity will accept.
        self.InputFilter = InputFilter

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Minimum Light Level : The minimum level of ambient light that hits this brush.
        self._minlight: str = _minlight
        # Solidity : Used to control the solidity/collision of these brushes.
        self.Solidity = Solidity
        # NPC class excluded from collisions : If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name.
        self.excludednpc: str = excludednpc
        # Invert NPC class exclusion : If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid.
        self.invert_exclusion = invert_exclusion
        # Solid BSP : Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush.
        self.solidbsp = solidbsp
        # Shadows : Set this if this brush casts lightmap shadows.
        self.vrad_brush_cast_shadows = vrad_brush_cast_shadows

        # Camera name : 
        self.target: str = target

        self.auto_properties.extend(["targetname", "parentname", "origin", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "InputFilter", "StartDisabled", "disableshadows", "spawnflags", "_minlight", "Solidity", "excludednpc", "invert_exclusion", "solidbsp", "vrad_brush_cast_shadows", "target"])


class FuncRecharge(Entity):
    """
    Auto-generated from halflife2.fgd, line 3065.
    Battery recharger
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", _minlight: str="", spawnflags=""):
        Entity.__init__(self, "func_recharge", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Minimum light level : 
        self._minlight: str = _minlight
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "origin", "_minlight", "spawnflags"])


class FuncTank(Entity):
    """
    Auto-generated from halflife2.fgd, line 3280.
    Brush Gun Turret
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, ammotype="", spawnflags=""):
        Entity.__init__(self, "func_tank", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # Ammo type : 
        self.ammotype = ammotype
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "ammotype", "spawnflags"])


class FuncTankCombineCannon(Entity):
    """
    Auto-generated from halflife2.fgd, line 3353.
    Combine sentry cannon
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, ammotype=""):
        Entity.__init__(self, "func_tank_combine_cannon", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # Ammo type : 
        self.ammotype = ammotype

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "ammotype"])


class FuncTankairboatgun(Entity):
    """
    Auto-generated from halflife2.fgd, line 3321.
    Airboat Gun Turret
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, airboat_gun_model: str=""):
        Entity.__init__(self, "func_tankairboatgun", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # Name of a prop_dynamic which is the airboat gun model : 
        self.airboat_gun_model: str = airboat_gun_model

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "airboat_gun_model"])


class FuncTankapcrocket(Entity):
    """
    Auto-generated from halflife2.fgd, line 3326.
    APC Rocket Turret
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, rocketspeed: float=800, burstcount: int=10):
        Entity.__init__(self, "func_tankapcrocket", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # Projectile speed : Speed the rocket will travel at.
        self.rocketspeed: float = rocketspeed
        # Burst shot count : Number of missiles to shoot in a burst
        self.burstcount: int = burstcount

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "rocketspeed", "burstcount"])


class FuncTanklaser(Entity):
    """
    Auto-generated from halflife2.fgd, line 3310.
    Brush Laser Turret
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, laserentity: str=""):
        Entity.__init__(self, "func_tanklaser", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # env_laser Entity : 
        self.laserentity: str = laserentity

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "laserentity"])


class FuncTankmortar(Entity):
    """
    Auto-generated from halflife2.fgd, line 3335.
    Brush Mortar Turret
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, iMagnitude: int=100, firedelay: str=2, firestartsound: str="", fireendsound: str="", incomingsound: str="", warningtime: float="1", firevariance: float="0"):
        Entity.__init__(self, "func_tankmortar", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # Explosion Magnitude : 
        self.iMagnitude: int = iMagnitude
        # Shell travel time : How long after the turret fires before the shell impacts
        self.firedelay: str = firedelay
        # Firing start sound : Sound of the mortar firing
        self.firestartsound: str = firestartsound
        # Firing end sound : 
        self.fireendsound: str = fireendsound
        # Incoming Shell Sound : Sound of the shell falling on the target
        self.incomingsound: str = incomingsound
        # Incoming warning time : How long before the shell impacts to play the warning sound
        self.warningtime: float = warningtime
        # Fire time variance : How much variability to add to fire rate (time +-)
        self.firevariance: float = firevariance

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "iMagnitude", "firedelay", "firestartsound", "fireendsound", "incomingsound", "warningtime", "firevariance"])


class FuncTankphyscannister(Entity):
    """
    Auto-generated from halflife2.fgd, line 3348.
    PhysCannister Turret
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, barrel_volume: str=""):
        Entity.__init__(self, "func_tankphyscannister", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # Barrel Volume : Name of a trigger the specifies the volume in which cannisters must be placed.
        self.barrel_volume: str = barrel_volume

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "barrel_volume"])


class FuncTankpulselaser(Entity):
    """
    Auto-generated from halflife2.fgd, line 3299.
    Brush Pulse Laser
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, PulseSpeed: float=1000, PulseColor: "RGB"="255 0 0", PulseWidth: float="20", PulseLife: float=2, PulseLag: float="0.05", PulseFireSound: str=""):
        Entity.__init__(self, "func_tankpulselaser", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # Pulse Speed : How fast does pulse travel
        self.PulseSpeed: float = PulseSpeed
        # Pulse Color : Color of the pulse
        self.PulseColor: "RGB" = PulseColor
        # Pulse Width : Width of the pulse
        self.PulseWidth: float = PulseWidth
        # Pulse Life : (Seconds)  How long the pulse lasts
        self.PulseLife: float = PulseLife
        # Pulse Lag : (Seconds)  How far behind is pulse tail
        self.PulseLag: float = PulseLag
        # Pulse Fire Sound : Sound played when pulse fires
        self.PulseFireSound: str = PulseFireSound

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "PulseSpeed", "PulseColor", "PulseWidth", "PulseLife", "PulseLag", "PulseFireSound"])


class FuncTankrocket(Entity):
    """
    Auto-generated from halflife2.fgd, line 3316.
    Brush Rocket Turret
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, globalname: str="", disableshadows=0, spawnflags="", control_volume: str="", master: str="", yawrate: str="30", yawrange: str="180", yawtolerance: str="15", pitchrate: str="0", pitchrange: str="0", pitchtolerance: str="5", barrel: str="0", barrely: str="0", barrelz: str="0", spritesmoke: str="", spriteflash: str="", spritescale: str="1", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", firerate: str="1", bullet_damage: str="0", bullet_damage_vs_player: str="0", persistence: str="1", persistence2: str="0", firespread=0, minRange: str="0", maxRange: str="0", _minlight: str="", gun_base_attach: str="", gun_barrel_attach: str="", gun_yaw_pose_param: str="", gun_yaw_pose_center: float="0", gun_pitch_pose_param: str="", gun_pitch_pose_center: float="0", ammo_count: int=-1, LeadTarget="No", npc_man_point: str="", playergraceperiod: float="0", ignoregraceupto: float="768", playerlocktimebeforefire: float="0", effecthandling=0, rocketspeed: float=800):
        Entity.__init__(self, "func_tankrocket", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Control Volume : Name of a trigger the specifies the volume in which a player must be to control this tank.
        self.control_volume: str = control_volume
        # (Team) Master : 
        self.master: str = master
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw range : 
        self.yawrange: str = yawrange
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch range : 
        self.pitchrange: str = pitchrange
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Barrel Length : 
        self.barrel: str = barrel
        # Barrel Horizontal : 
        self.barrely: str = barrely
        # Barrel Vertical : 
        self.barrelz: str = barrelz
        # Smoke Sprite : 
        self.spritesmoke: str = spritesmoke
        # Flash Sprite : 
        self.spriteflash: str = spriteflash
        # Sprite scale : 
        self.spritescale: str = spritescale
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Rate of Fire : 
        self.firerate: str = firerate
        # Damage Per Bullet : If set to 0, it'll use the base weapon bullet's damage.
        self.bullet_damage: str = bullet_damage
        # Damage Per Bullet Vs Player : If set to 0, it'll use the Damage Per Bullet value.
        self.bullet_damage_vs_player: str = bullet_damage_vs_player
        # Firing persistence : (Seconds) How long to keep firing at last known position after lose sight of target
        self.persistence: str = persistence
        # Firing persistence2 : (Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position
        self.persistence2: str = persistence2
        # Bullet accuracy : 
        self.firespread = firespread
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Minimum light level : 
        self._minlight: str = _minlight
        # Gun Base Attachment : If Parent is specified, this is the attachment point on the parent to aim from.
        self.gun_base_attach: str = gun_base_attach
        # Gun Barrel Attachment : If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too.
        self.gun_barrel_attach: str = gun_barrel_attach
        # Gun Yaw Pose Param : If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_yaw_pose_param: str = gun_yaw_pose_param
        # Gun Yaw Pose Center : The center yaw pose parameter of the gun on the parent
        self.gun_yaw_pose_center: float = gun_yaw_pose_center
        # Gun Pitch Pose Param : If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters.
        self.gun_pitch_pose_param: str = gun_pitch_pose_param
        # Gun Pitch Pose Center : The center pitch pose parameter of the gun on the parent
        self.gun_pitch_pose_center: float = gun_pitch_pose_center
        # Ammunition Count : Only applies to player use. -1 = unlimited ammo.
        self.ammo_count: int = ammo_count
        # Lead Target : 
        self.LeadTarget = LeadTarget
        # NPC Man Point : Point where NPC must stand to man this func_tank.
        self.npc_man_point: str = npc_man_point
        # Post-NPC Attack Grace Period : If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time.
        self.playergraceperiod: float = playergraceperiod
        # Ignore Grace Upto : The player grace period is ignored if the player's under this distance from the func_tank.
        self.ignoregraceupto: float = ignoregraceupto
        # Player Lock Time : The tank must have the player as a target for this amount of time before it's allowed to fire.
        self.playerlocktimebeforefire: float = playerlocktimebeforefire
        # Effect Handling : 
        self.effecthandling = effecthandling

        # Projectile speed : Speed the rocket will travel at.
        self.rocketspeed: float = rocketspeed

        self.auto_properties.extend(["targetname", "parentname", "origin", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "globalname", "disableshadows", "spawnflags", "control_volume", "master", "yawrate", "yawrange", "yawtolerance", "pitchrate", "pitchrange", "pitchtolerance", "barrel", "barrely", "barrelz", "spritesmoke", "spriteflash", "spritescale", "rotatestartsound", "rotatesound", "rotatestopsound", "firerate", "bullet_damage", "bullet_damage_vs_player", "persistence", "persistence2", "firespread", "minRange", "maxRange", "_minlight", "gun_base_attach", "gun_barrel_attach", "gun_yaw_pose_param", "gun_yaw_pose_center", "gun_pitch_pose_param", "gun_pitch_pose_center", "ammo_count", "LeadTarget", "npc_man_point", "playergraceperiod", "ignoregraceupto", "playerlocktimebeforefire", "effecthandling", "rocketspeed"])


class FuncVehicleclip(Entity):
    """
    Auto-generated from halflife2.fgd, line 3087.
    Vehicle Clip
    """
    def __init__(self, vmf_map: "ValveMap", parentname: str="", targetname: str="", globalname: str=""):
        Entity.__init__(self, "func_vehicleclip", vmf_map)

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname


        self.auto_properties.extend(["parentname", "targetname", "globalname"])


class GenericActor(Entity):
    """
    Auto-generated from halflife2.fgd, line 1958.
    Generic Actor NPC
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", damagefilter: str="", ResponseContext: str="", target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", parentname: str="", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, disableshadows=0, model: str="", hull_name="Human"):
        Entity.__init__(self, "generic_actor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles



        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext


        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Model : 
        self.model: str = model
        # Hull type : 
        self.hull_name = hull_name

        self.auto_properties.extend(["origin", "targetname", "angles", "damagefilter", "ResponseContext", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "parentname", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "disableshadows", "model", "hull_name"])


class GrenadeHelicopter(Entity):
    """
    Auto-generated from halflife2.fgd, line 1532.
    Helicopter bomb
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags=""):
        Entity.__init__(self, "grenade_helicopter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags"])


class InfoApcMissileHint(Entity):
    """
    Auto-generated from halflife2.fgd, line 4329.
    Something that helps APC missiles guide. If the missile can hit the associated target entitybetween the time it takes the current enemy to enter + leave the hint, then the missile will guide to the entity.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", StartDisabled=0, target: str=""):
        Entity.__init__(self, "info_apc_missile_hint", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Target Entity : The entity that the missile will guide towards if the conditions are met.
        self.target: str = target

        self.auto_properties.extend(["targetname", "origin", "angles", "StartDisabled", "target"])


class InfoDarknessmodeLightsource(Entity):
    """
    Auto-generated from halflife2.fgd, line 1889.
    
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, LightRadius: float="256.0"):
        Entity.__init__(self, "info_darknessmode_lightsource", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Light Radius : The radius around this lightsource in which Alyx will be able to see enemies.
        self.LightRadius: float = LightRadius

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "LightRadius"])


class InfoRadarTarget(Entity):
    """
    Auto-generated from halflife2.fgd, line 443.
    Jalopy Radar Beacon
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=0, radius: float=6000, type=0, mode=0):
        Entity.__init__(self, "info_radar_target", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Effective Radius : How close the Jalopy must be to detect this beacon. If this radius is -1, the range is infinite
        self.radius: float = radius
        # Type of target : 
        self.type = type
        # Mode : 
        self.mode = mode

        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "radius", "type", "mode"])


class InfoSnipertarget(Entity):
    """
    Auto-generated from halflife2.fgd, line 467.
    Sniper Target
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", speed: int=2, groupname: str="", spawnflags=""):
        Entity.__init__(self, "info_snipertarget", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Sweep to speed : 
        self.speed: int = speed
        # Group Name : 
        self.groupname: str = groupname
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "parentname", "speed", "groupname", "spawnflags"])


class InfoTargetGunshipcrash(Entity):
    """
    Auto-generated from halflife2.fgd, line 1390.
    Gunship Crash Target
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str=""):
        Entity.__init__(self, "info_target_gunshipcrash", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        self.auto_properties.extend(["origin", "targetname", "parentname"])


class InfoTargetHelicopterCrash(Entity):
    """
    Auto-generated from halflife2.fgd, line 1386.
    Helicopter Crash Target
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str=""):
        Entity.__init__(self, "info_target_helicopter_crash", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        self.auto_properties.extend(["origin", "targetname", "parentname"])


class InfoTargetVehicleTransition(Entity):
    """
    Auto-generated from halflife2.fgd, line 463.
    Vehicle Transition Point
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", StartDisabled=0):
        Entity.__init__(self, "info_target_vehicle_transition", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Disabled : 
        self.StartDisabled = StartDisabled


        self.auto_properties.extend(["origin", "targetname", "angles", "StartDisabled"])


class InfoTeleporterCountdown(Entity):
    """
    Auto-generated from halflife2.fgd, line 4521.
    Countdown timer for the teleporter. The status of the teleporter will appear on vgui_screen entities whose panel is 'teleport_countdown_screen'.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "info_teleporter_countdown", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class ItemAmmo357(Entity):
    """
    Auto-generated from halflife2.fgd, line 3433.
    Box of 357 ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_357", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmo357Large(Entity):
    """
    Auto-generated from halflife2.fgd, line 3434.
    Large Box of 357 ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_357_large", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoAr2(Entity):
    """
    Auto-generated from halflife2.fgd, line 3431.
    Box of AR2 ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_ar2", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoAr2Altfire(Entity):
    """
    Auto-generated from halflife2.fgd, line 3442.
    AR2 Alt-fire Round
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_ar2_altfire", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoAr2Large(Entity):
    """
    Auto-generated from halflife2.fgd, line 3432.
    Large Box of AR2 ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_ar2_large", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoCrate(Entity):
    """
    Auto-generated from halflife2.fgd, line 3451.
    Ammo Crate
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, AmmoType=0):
        Entity.__init__(self, "item_ammo_crate", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Ammo Type : 
        self.AmmoType = AmmoType

        self.auto_properties.extend(["origin", "targetname", "angles", "fademindist", "fademaxdist", "fadescale", "AmmoType"])


class ItemAmmoCrossbow(Entity):
    """
    Auto-generated from halflife2.fgd, line 3435.
    Box of Crossbow ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_crossbow", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoPistol(Entity):
    """
    Auto-generated from halflife2.fgd, line 3427.
    Box of Pistol ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_pistol", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoPistolLarge(Entity):
    """
    Auto-generated from halflife2.fgd, line 3428.
    Large Box of Pistol ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_pistol_large", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoSmg1(Entity):
    """
    Auto-generated from halflife2.fgd, line 3429.
    Box of SMG1 ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_smg1", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoSmg1Grenade(Entity):
    """
    Auto-generated from halflife2.fgd, line 3438.
    SMG1 Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_smg1_grenade", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemAmmoSmg1Large(Entity):
    """
    Auto-generated from halflife2.fgd, line 3430.
    Large Box of SMG1 ammo
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_ammo_smg1_large", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemBattery(Entity):
    """
    Auto-generated from halflife2.fgd, line 3439.
    HEV battery
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_battery", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemBoxBuckshot(Entity):
    """
    Auto-generated from halflife2.fgd, line 3436.
    Box Buckshot
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_box_buckshot", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemDynamicResupply(Entity):
    """
    Auto-generated from halflife2.fgd, line 3393.
    A dynamic item. When the player enters the PVS of this entity, it will determine the item most needed by the player, spawn one of those items, and remove itself. To determine which item the player most needs, it calculates which of the Desired Health/Armor/Ammo ratios the player is farthest from.\n\nIf the player is above all the desired levels, then no item will be spawned, unless this item_dynamic_resupply was created by an item_item_crate. In that case, a random piece of ammo used by a weapon, that the player has, will be spawned. If the 'Fallback to Health Vial' spawnflag is set, a health vial will be spawned instead of the ammo.\n\nBy default, the item_dynamic_resupply uses the values inside the Master resupply, instead of using it's own values. This makes it easy to tweak the desired loadout of many resupplies. The BecomeMaster input allows you to switch Masters dynamically as the level progresses.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", DesiredHealth: float="1", DesiredArmor: float="0.3", DesiredAmmoPistol: float="0.5", DesiredAmmoSMG1: float="0.5", DesiredAmmoSMG1_Grenade: float="0.1", DesiredAmmoAR2: float="0.4", DesiredAmmoBuckshot: float="0.5", DesiredAmmoRPG_Round: float="0", DesiredAmmoGrenade: float="0.1", DesiredAmmo357: float="0", DesiredAmmoCrossbow: float="0", DesiredAmmoAR2_AltFire: float="0"):
        Entity.__init__(self, "item_dynamic_resupply", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Desired Health Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max health.
        self.DesiredHealth: float = DesiredHealth
        # Desired Armor Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max armor.
        self.DesiredArmor: float = DesiredArmor
        # Desired Pistol Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoPistol: float = DesiredAmmoPistol
        # Desired SMG1 Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoSMG1: float = DesiredAmmoSMG1
        # Desired SMG1 Grenade Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoSMG1_Grenade: float = DesiredAmmoSMG1_Grenade
        # Desired AR2 Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoAR2: float = DesiredAmmoAR2
        # Desired Shotgun Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoBuckshot: float = DesiredAmmoBuckshot
        # Desired RPG Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoRPG_Round: float = DesiredAmmoRPG_Round
        # Desired Grenade Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoGrenade: float = DesiredAmmoGrenade
        # Desired 357 Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmo357: float = DesiredAmmo357
        # Desired Crossbow Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoCrossbow: float = DesiredAmmoCrossbow
        # Desired AR2 Alt-fire Ammo Ratio : A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity.
        self.DesiredAmmoAR2_AltFire: float = DesiredAmmoAR2_AltFire

        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags", "DesiredHealth", "DesiredArmor", "DesiredAmmoPistol", "DesiredAmmoSMG1", "DesiredAmmoSMG1_Grenade", "DesiredAmmoAR2", "DesiredAmmoBuckshot", "DesiredAmmoRPG_Round", "DesiredAmmoGrenade", "DesiredAmmo357", "DesiredAmmoCrossbow", "DesiredAmmoAR2_AltFire"])


class ItemHealthcharger(Entity):
    """
    Auto-generated from halflife2.fgd, line 3504.
    Health Charger
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, _minlight: str=""):
        Entity.__init__(self, "item_healthcharger", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Minimum light level : 
        self._minlight: str = _minlight

        self.auto_properties.extend(["origin", "targetname", "angles", "fademindist", "fademaxdist", "fadescale", "_minlight"])


class ItemHealthkit(Entity):
    """
    Auto-generated from halflife2.fgd, line 3440.
    Small Health Kit
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_healthkit", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemHealthvial(Entity):
    """
    Auto-generated from halflife2.fgd, line 3441.
    Personal Health Kit
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_healthvial", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemItemCrate(Entity):
    """
    Auto-generated from halflife2.fgd, line 3472.
    Item Crate
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", model: str="", skin: int=0, modelscale: float="1.0", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", targetname: str="", angles: "Origin"="0 0 0", damagefilter: str="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, CrateType=0, CrateAppearance=0, ItemClass: str="item_dynamic_resupply", ItemCount: int=1, SpecificResupply: str=""):
        Entity.__init__(self, "item_item_crate", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname


        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale



        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel


        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Crate Contains : 
        self.CrateType = CrateType
        # Crate Appearance : 
        self.CrateAppearance = CrateAppearance
        # Item Type : Class name of the entity to spawn when the crate is broken
        self.ItemClass: str = ItemClass
        # Item Count : Number of items to emit upon breakage
        self.ItemCount: int = ItemCount
        # Specific resupply : If item type is item_dynamic_resupply, specify a specific one to use instead of the master
        self.SpecificResupply: str = SpecificResupply

        self.auto_properties.extend(["origin", "globalname", "model", "skin", "modelscale", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "targetname", "angles", "damagefilter", "fademindist", "fademaxdist", "fadescale", "CrateType", "CrateAppearance", "ItemClass", "ItemCount", "SpecificResupply"])


class ItemRpgRound(Entity):
    """
    Auto-generated from halflife2.fgd, line 3437.
    RPG Round
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_rpg_round", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemSuit(Entity):
    """
    Auto-generated from halflife2.fgd, line 3443.
    HEV Suit
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", disableshadows=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags=""):
        Entity.__init__(self, "item_suit", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "disableshadows", "fademindist", "fademaxdist", "fadescale", "spawnflags"])


class ItemSuitcharger(Entity):
    """
    Auto-generated from halflife2.fgd, line 3514.
    Battery recharger
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, _minlight: str="", spawnflags=""):
        Entity.__init__(self, "item_suitcharger", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Minimum light level : 
        self._minlight: str = _minlight
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "fademindist", "fademaxdist", "fadescale", "_minlight", "spawnflags"])


class LogicAchievement(Entity):
    """
    Auto-generated from halflife2.fgd, line 4004.
    Sends an achievement system related event from the map to the achievement system.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, AchievementEvent=0):
        Entity.__init__(self, "logic_achievement", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Achievement Event : Named event is sent to the achievement system when this entity receives a 'FireEvent' input.
        self.AchievementEvent = AchievementEvent

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "AchievementEvent"])


class LogicChoreographedScene(Entity):
    """
    Auto-generated from halflife2.fgd, line 3753.
    Manages a choreographed scene of one or more actors.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", SceneFile: str="", target1: str="", target2: str="", target3: str="", target4: str="", target5: str="", target6: str="", target7: str="", target8: str="", busyactor=1, onplayerdeath=0):
        Entity.__init__(self, "logic_choreographed_scene", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Scene file : 
        self.SceneFile: str = SceneFile
        # Target 1 : 
        self.target1: str = target1
        # Target 2 : 
        self.target2: str = target2
        # Target 3 : 
        self.target3: str = target3
        # Target 4 : 
        self.target4: str = target4
        # Target 5 : 
        self.target5: str = target5
        # Target 6 : 
        self.target6: str = target6
        # Target 7 : 
        self.target7: str = target7
        # Target 8 : 
        self.target8: str = target8
        # If an Actor is talking... : What to do if an actor this scene needs is already talking when this scene is told to start.
        self.busyactor = busyactor
        # On player death : What should this entity do if the player dies
        self.onplayerdeath = onplayerdeath

        self.auto_properties.extend(["origin", "targetname", "SceneFile", "target1", "target2", "target3", "target4", "target5", "target6", "target7", "target8", "busyactor", "onplayerdeath"])


class LogicSceneListManager(Entity):
    """
    Auto-generated from halflife2.fgd, line 3818.
    Manages a list of logic_choreographed_scene entities. Store choreo scenes in them in order that they will be played by other inputs. Whenever a scene plays, the manager will remove all scenes before that one in the list. The name of another logic_scene_list_manager can be entered in a slot instead of an invididual scene, which will cause all scenes in that manager to be removed when a later scene in this list is played.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", scene0: str="", scene1: str="", scene2: str="", scene3: str="", scene4: str="", scene5: str="", scene6: str="", scene7: str="", scene8: str="", scene9: str="", scene10: str="", scene11: str="", scene12: str="", scene13: str="", scene14: str="", scene15: str=""):
        Entity.__init__(self, "logic_scene_list_manager", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Scene 1 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene0: str = scene0
        # Scene 2 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene1: str = scene1
        # Scene 3 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene2: str = scene2
        # Scene 4 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene3: str = scene3
        # Scene 5 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene4: str = scene4
        # Scene 6 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene5: str = scene5
        # Scene 7 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene6: str = scene6
        # Scene 8 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene7: str = scene7
        # Scene 9 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene8: str = scene8
        # Scene 10 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene9: str = scene9
        # Scene 11 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene10: str = scene10
        # Scene 12 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene11: str = scene11
        # Scene 13 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene12: str = scene12
        # Scene 14 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene13: str = scene13
        # Scene 15 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene14: str = scene14
        # Scene 16 : The name of a logic_choreographed_scene, or logic_scene_list_manager.
        self.scene15: str = scene15

        self.auto_properties.extend(["origin", "targetname", "scene0", "scene1", "scene2", "scene3", "scene4", "scene5", "scene6", "scene7", "scene8", "scene9", "scene10", "scene11", "scene12", "scene13", "scene14", "scene15"])


class MonsterGeneric(Entity):
    """
    Auto-generated from halflife2.fgd, line 1947.
    Generic Script NPC
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", damagefilter: str="", ResponseContext: str="", target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, disableshadows=0, spawnflags="", model: str="", body: int=0):
        Entity.__init__(self, "monster_generic", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles



        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext


        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Disable shadows : 
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Model : 
        self.model: str = model
        # Body : 
        self.body: int = body

        self.auto_properties.extend(["origin", "targetname", "angles", "damagefilter", "ResponseContext", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "disableshadows", "spawnflags", "model", "body"])


class NpcAdvisor(Entity):
    """
    Auto-generated from halflife2.fgd, line 1077.
    An adorable sluglike alien with benevolent psychic powers.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", model: str="models/advisor.mdl", levitationarea: str="", levitategoal_bottom: str="", levitategoal_top: str="", staging_ent_names: str="", priority_grab_name: str=""):
        Entity.__init__(self, "npc_advisor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # World model : 
        self.model: str = model
        # Levitation Area : Trigger volume inside which levitated objects reside
        self.levitationarea: str = levitationarea
        # Levitation Goal Bottom : Objects will levitate at least this high
        self.levitategoal_bottom: str = levitategoal_bottom
        # Levitation Goal Top : Objects will levitate at least this high
        self.levitategoal_top: str = levitategoal_top
        # Staging Position Names : All entities with this name will be considered staging positions for the throw behavior.
        self.staging_ent_names: str = staging_ent_names
        # Priority Name For Grabbing : If any entities named this are present, the advisor will preferentially pick them up for throwing at the player.
        self.priority_grab_name: str = priority_grab_name

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "model", "levitationarea", "levitategoal_bottom", "levitategoal_top", "staging_ent_names", "priority_grab_name"])


class NpcAlyx(Entity):
    """
    Auto-generated from halflife2.fgd, line 1811.
    Alyx
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, parentname: str="", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", AlwaysTransition="No", GameEndAlly="No", model: str="models/alyx.mdl", additionalequipment="weapon_alyxgun", DontPickupWeapons="1", ShouldHaveEMP="1"):
        Entity.__init__(self, "npc_alyx", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin








        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Always transition : If yes, this NPC will always teleport to a Player Squad Transition Point if they're not within the trigger_transition volume.
        self.AlwaysTransition = AlwaysTransition
        # Is this a vital ally? : If yes, this NPC will cause the game to end if killed.
        self.GameEndAlly = GameEndAlly

        # World model : 
        self.model: str = model
        # Weapons : 
        self.additionalequipment = additionalequipment
        # Prevent picking up weapons? : If yes, this NPC will NOT be allowed to pick up weapons they find on the ground.
        self.DontPickupWeapons = DontPickupWeapons
        # Should alyx have her EMP? : 
        self.ShouldHaveEMP = ShouldHaveEMP

        self.auto_properties.extend(["origin", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "parentname", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "AlwaysTransition", "GameEndAlly", "model", "additionalequipment", "DontPickupWeapons", "ShouldHaveEMP"])


class NpcAntlion(Entity):
    """
    Auto-generated from halflife2.fgd, line 499.
    Antlions will run away from ai_sound, type: Thumper.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", startburrowed="No", spawnflags="", radius: int=256, eludedist: int=1024, ignorebugbait="No", unburroweffects="No"):
        Entity.__init__(self, "npc_antlion", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Start Burrowed : 
        self.startburrowed = startburrowed
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Alert Radius : 
        self.radius: int = radius
        # Distance until eluded : Only available when Burrow When Eluded is flagged
        self.eludedist: int = eludedist
        # Ignore Bugbait : 
        self.ignorebugbait = ignorebugbait
        # Suppress unburrow effects : 
        self.unburroweffects = unburroweffects

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "startburrowed", "spawnflags", "radius", "eludedist", "ignorebugbait", "unburroweffects"])


class NpcAntlionGrub(Entity):
    """
    Auto-generated from halflife2.fgd, line 4629.
    Antlion grub
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, globalname: str="", spawnflags=""):
        Entity.__init__(self, "npc_antlion_grub", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "fademindist", "fademaxdist", "fadescale", "globalname", "spawnflags"])


class NpcAntlionTemplateMaker(Entity):
    """
    Auto-generated from halflife2.fgd, line 2004.
    Antlion Template Maker
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", StartDisabled=1, MaxNPCCount: int=1, SpawnFrequency: str="5", MaxLiveChildren: int=5, spawnflags="", TemplateName: str="", spawngroup: str="", spawnradius: float=512, spawntarget: str="", fighttarget: str="", followtarget: str="", vehicledistance: float="1", workerspawnrate: float="0", ignorebugbait="0", pool_start: int=0, pool_max: int=0, pool_regen_amount: int=0, pool_regen_time: float=0, createspores="0"):
        Entity.__init__(self, "npc_antlion_template_maker", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Num. of NPCs : Number of NPCs that will spawn before this spawner is exhausted.
        self.MaxNPCCount: int = MaxNPCCount
        # Frequency : How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies.
        self.SpawnFrequency: str = SpawnFrequency
        # Max Live NPCs : Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied.
        self.MaxLiveChildren: int = MaxLiveChildren

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Name of template NPC : 
        self.TemplateName: str = TemplateName
        # Spawn on Hint Group : If specified, children will spawn on a hint node from this group, nearest the target.
        self.spawngroup: str = spawngroup
        # Spawn radius : Target must be within this distance of any node in the hint group specified above. If the target is outside the radius, no NPC will spawn.
        self.spawnradius: float = spawnradius
        # Spawn target : Targetname of the entity to try and spawn near.
        self.spawntarget: str = spawntarget
        # Fight target : Targetname of an entity used as a goal for the children to fight to.
        self.fighttarget: str = fighttarget
        # Follow target : Targetname of an entity used as a goal for the children to follow.
        self.followtarget: str = followtarget
        # Vehicle Spawn Distance : This is a modifier of the current spawn distance. Spawn distance on a vehicle is based on speed, so this is just a modifier for it.
        self.vehicledistance: float = vehicledistance
        # Random Worker Spawn Rate : Percentage chance that a spawned antlion will be a worker. (0 = no chance, 1 = 100% chance)
        self.workerspawnrate: float = workerspawnrate
        # Ignore Bugbait : 
        self.ignorebugbait = ignorebugbait
        # Initial antlions in the pool. : Number of antlions in the pool at map start.
        self.pool_start: int = pool_start
        # Max antlions in the pool. : Maximum number of antlions allowed in the pool. If 0, pool behavior is turned off.
        self.pool_max: int = pool_max
        # Pool regen amount. : This is the number of antlions added to the pool every time it regenerates.
        self.pool_regen_amount: int = pool_regen_amount
        # Pool regen time. : Time interval between pool regeneration ticks.
        self.pool_regen_time: float = pool_regen_time
        # Create Spore effect : 
        self.createspores = createspores

        self.auto_properties.extend(["origin", "targetname", "angles", "StartDisabled", "MaxNPCCount", "SpawnFrequency", "MaxLiveChildren", "spawnflags", "TemplateName", "spawngroup", "spawnradius", "spawntarget", "fighttarget", "followtarget", "vehicledistance", "workerspawnrate", "ignorebugbait", "pool_start", "pool_max", "pool_regen_amount", "pool_regen_time", "createspores"])


class NpcAntlionguard(Entity):
    """
    Auto-generated from halflife2.fgd, line 544.
    Antlion Guard
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", startburrowed="No", allowbark="No", cavernbreed="No", incavern="No", shovetargets: str=""):
        Entity.__init__(self, "npc_antlionguard", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Burrowed : 
        self.startburrowed = startburrowed
        # Allow Bark : 
        self.allowbark = allowbark
        # Cavern Guard Model and Texture : 
        self.cavernbreed = cavernbreed
        # Use inside-Cavern Behavior : 
        self.incavern = incavern
        # Shove Targets : 
        self.shovetargets: str = shovetargets

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "startburrowed", "allowbark", "cavernbreed", "incavern", "shovetargets"])


class NpcApcdriver(Entity):
    """
    Auto-generated from halflife2.fgd, line 346.
    NPC used to drive an APC vehicle.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", vehicle: str="", spawnflags="", drivermaxspeed: float=1, driverminspeed: float=0):
        Entity.__init__(self, "npc_apcdriver", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Vehicle to drive : 
        self.vehicle: str = vehicle

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Maxspeed (percentage of vehicle's maxspeed). : 
        self.drivermaxspeed: float = drivermaxspeed
        # MinSpeed (percentage of vehicle's maxspeed). : 
        self.driverminspeed: float = driverminspeed

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "vehicle", "spawnflags", "drivermaxspeed", "driverminspeed"])


class NpcBarnacle(Entity):
    """
    Auto-generated from halflife2.fgd, line 1331.
    Barnacle
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", RestDist: float=16):
        Entity.__init__(self, "npc_barnacle", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Rest Distance : Distance above the ground that the tongue should lie when the barnacle is at rest
        self.RestDist: float = RestDist

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "fademindist", "fademaxdist", "fadescale", "spawnflags", "RestDist"])


class NpcBarney(Entity):
    """
    Auto-generated from halflife2.fgd, line 898.
    Barney
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", AlwaysTransition="No", DontPickupWeapons="No", GameEndAlly="No", additionalequipment="weapon_pistol", ExpressionOverride: str=""):
        Entity.__init__(self, "npc_barney", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin








        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore









        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Always transition : If yes, this NPC will always teleport to a Player Squad Transition Point if they're not within the trigger_transition volume.
        self.AlwaysTransition = AlwaysTransition
        # Prevent picking up weapons? : If yes, this NPC will NOT be allowed to pick up weapons they find on the ground.
        self.DontPickupWeapons = DontPickupWeapons
        # Is this a vital ally? : If yes, this NPC will cause the game to end if killed.
        self.GameEndAlly = GameEndAlly

        # Weapons : 
        self.additionalequipment = additionalequipment
        # Facial expression override : 
        self.ExpressionOverride: str = ExpressionOverride

        self.auto_properties.extend(["origin", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "AlwaysTransition", "DontPickupWeapons", "GameEndAlly", "additionalequipment", "ExpressionOverride"])


class NpcBlob(Entity):
    """
    Auto-generated from halflife2.fgd, line 195.
    Blob
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_blob", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcBreen(Entity):
    """
    Auto-generated from halflife2.fgd, line 1909.
    Dr Breen
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, model: str="models/breen.mdl", spawnflags=""):
        Entity.__init__(self, "npc_breen", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore

        # World model : 
        self.model: str = model
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "model", "spawnflags"])


class NpcBullseye(Entity):
    """
    Auto-generated from halflife2.fgd, line 678.
    Bullseye
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", health: int=35, minangle: str="360", mindist: str="0", autoaimradius: float="0", spawnflags=""):
        Entity.__init__(self, "npc_bullseye", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Health : 
        self.health: int = health
        # Minimum Angle : Angle from the bullseye required for bullseye to be a valid enemy
        self.minangle: str = minangle
        # Minimum Distance : Distance from the bullseye required for bullseye to be a valid enemy
        self.mindist: str = mindist
        # Autoaim Radius : Radius of autoaim influence. Use ent_autoaim <picker> to visualize.
        self.autoaimradius: float = autoaimradius
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "parentname", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "health", "minangle", "mindist", "autoaimradius", "spawnflags"])


class NpcCitizen(Entity):
    """
    Auto-generated from halflife2.fgd, line 773.
    Citizen
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", AlwaysTransition="No", DontPickupWeapons="No", GameEndAlly="No", spawnflags="", additionalequipment="0", ammosupply="SMG1", ammoamount: int=1, citizentype="Default", expressiontype="Random", model="models/humans/group01/male_01.mdl", ExpressionOverride: str="", notifynavfailblocked=0, neverleaveplayersquad=0, denycommandconcept: str=""):
        Entity.__init__(self, "npc_citizen", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin








        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname









        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Always transition : If yes, this NPC will always teleport to a Player Squad Transition Point if they're not within the trigger_transition volume.
        self.AlwaysTransition = AlwaysTransition
        # Prevent picking up weapons? : If yes, this NPC will NOT be allowed to pick up weapons they find on the ground.
        self.DontPickupWeapons = DontPickupWeapons
        # Is this a vital ally? : If yes, this NPC will cause the game to end if killed.
        self.GameEndAlly = GameEndAlly

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Weapons : 
        self.additionalequipment = additionalequipment
        # Ammo to Resupply (if spawnflag set) : 
        self.ammosupply = ammosupply
        # Amount of ammo to give : 
        self.ammoamount: int = ammoamount
        # Type : 
        self.citizentype = citizentype
        # Expression Type : 
        self.expressiontype = expressiontype
        # Model : 
        self.model = model
        # Facial expression override : 
        self.ExpressionOverride: str = ExpressionOverride
        # Fire output when Nav is blocked? : 
        self.notifynavfailblocked = notifynavfailblocked
        # Permanent squad member? : A permanent squad member cannot leave the player's squad unless killed or explicity removed by entity I/O. Only use this if you're sure you want to override the default AI.
        self.neverleaveplayersquad = neverleaveplayersquad
        # Deny command speech concept : If you want your citizens to squad with the player but not obey commands the player gives to move the squad, put a concept here and this citizen will speak the concept instead of obeying the order.
        self.denycommandconcept: str = denycommandconcept

        self.auto_properties.extend(["origin", "parentname", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "AlwaysTransition", "DontPickupWeapons", "GameEndAlly", "spawnflags", "additionalequipment", "ammosupply", "ammoamount", "citizentype", "expressiontype", "model", "ExpressionOverride", "notifynavfailblocked", "neverleaveplayersquad", "denycommandconcept"])


class NpcClawscanner(Entity):
    """
    Auto-generated from halflife2.fgd, line 1655.
    Claw Scanner
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", spotlightlength: int=500, spotlightwidth: int=50, spotlightdisabled=0, ShouldInspect=1, OnlyInspectPlayers=0, NeverInspectPlayers=0):
        Entity.__init__(self, "npc_clawscanner", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # SpotlightLength : 
        self.spotlightlength: int = spotlightlength
        # SpotlightWidth : 
        self.spotlightwidth: int = spotlightwidth
        # SpotlightDisabled : 
        self.spotlightdisabled = spotlightdisabled
        # Should inspect : 
        self.ShouldInspect = ShouldInspect
        # Only Inspect Players : 
        self.OnlyInspectPlayers = OnlyInspectPlayers
        # Never Inspect Players : 
        self.NeverInspectPlayers = NeverInspectPlayers

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "spotlightlength", "spotlightwidth", "spotlightdisabled", "ShouldInspect", "OnlyInspectPlayers", "NeverInspectPlayers"])


class NpcCombineCamera(Entity):
    """
    Auto-generated from halflife2.fgd, line 214.
    Combine security camera
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", innerradius: int=300, outerradius: int=450, minhealthdmg: int=0, defaulttarget: str=""):
        Entity.__init__(self, "npc_combine_camera", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Inner radius : The camera will only lock onto enemies that are within the inner radius.
        self.innerradius: int = innerradius
        # Outer radius : The camera will flash amber when enemies are within the outer radius, but outside the inner radius.
        self.outerradius: int = outerradius
        # Min req'd damage for hurting camera : 
        self.minhealthdmg: int = minhealthdmg
        # Default target : The default target is the entity that the camera follows when it has no other target to track.
        self.defaulttarget: str = defaulttarget

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "innerradius", "outerradius", "minhealthdmg", "defaulttarget"])


class NpcCombineCannon(Entity):
    """
    Auto-generated from halflife2.fgd, line 209.
    Combine Cannon
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", sightdist: float=1024):
        Entity.__init__(self, "npc_combine_cannon", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Sight radius : Radius distance at which the cannon is able to aquire enemies.
        self.sightdist: float = sightdist

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "sightdist"])


class NpcCombineS(Entity):
    """
    Auto-generated from halflife2.fgd, line 955.
    Combine Soldier
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", waitingtorappel="No", additionalequipment="weapon_smg1", spawnflags="", NumGrenades="5", model="models/combine_soldier.mdl", tacticalvariant="0", usemarch="0"):
        Entity.__init__(self, "npc_combine_s", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin








        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Waiting to Rappel? : If yes, this NPC spawns suspended in air and awaits a BeginRappel input. It will then spawn a zipline and slide down. When it hits the ground, NPC will cut away the line and try to move forward a few feet to make room for the next NPC. The NPC will not attempt to clear its landing space if it cannot do so by taking a few steps forward
        self.waitingtorappel = waitingtorappel

        # Weapons : 
        self.additionalequipment = additionalequipment
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Number of Grenades : 
        self.NumGrenades = NumGrenades

        # Model : Regular Soldier
        self.model = model
        # Tactical Variant : 
        self.tacticalvariant = tacticalvariant
        # Walk Easy : When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds. WARNING: this animation only has a north component. For use under very special circumstances only.
        self.usemarch = usemarch

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "waitingtorappel", "additionalequipment", "spawnflags", "NumGrenades", "model", "tacticalvariant", "usemarch"])


class NpcCombinedropship(Entity):
    """
    Auto-generated from halflife2.fgd, line 1396.
    Combine Dropship
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", InitialSpeed: str="0", target: str="", spawnflags="", LandTarget: str="", GunRange: float=2048, RollermineTemplate: str="", NPCTemplate: str="", NPCTemplate2: str="", NPCTemplate3: str="", NPCTemplate4: str="", NPCTemplate5: str="", NPCTemplate6: str="", Dustoff1: str="", Dustoff2: str="", Dustoff3: str="", Dustoff4: str="", Dustoff5: str="", Dustoff6: str="", APCVehicleName: str="", Invulnerable=0, CrateType=2):
        Entity.__init__(self, "npc_combinedropship", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Initial Speed : Sets the helicopter's desired speed that it should try to reach as soon as it's spawned.
        self.InitialSpeed: str = InitialSpeed
        # Target path_track : (Optional) The name of a path_track entity that this NPC will fly to after spawning.
        self.target: str = target

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Land target name : 
        self.LandTarget: str = LandTarget
        # Crate Gun Range : If the dropship's carrying a crate with a gun on it, it'll only shoot targets within this range.
        self.GunRange: float = GunRange
        # Name of Rollermine Template : If this dropship drops any rollermines due to the 'DropMines' input being fired, it will use this template for the rollermines it creates. If left blank, ordinary rollermines will be dropped.
        self.RollermineTemplate: str = RollermineTemplate
        # Name of Template NPC 1 : 
        self.NPCTemplate: str = NPCTemplate
        # Name of Template NPC 2 : 
        self.NPCTemplate2: str = NPCTemplate2
        # Name of Template NPC 3 : 
        self.NPCTemplate3: str = NPCTemplate3
        # Name of Template NPC 4 : 
        self.NPCTemplate4: str = NPCTemplate4
        # Name of Template NPC 5 : 
        self.NPCTemplate5: str = NPCTemplate5
        # Name of Template NPC 6 : 
        self.NPCTemplate6: str = NPCTemplate6
        # Name of dustoff point for NPC 1 : 
        self.Dustoff1: str = Dustoff1
        # Name of dustoff point for NPC 2 : 
        self.Dustoff2: str = Dustoff2
        # Name of dustoff point for NPC 3 : 
        self.Dustoff3: str = Dustoff3
        # Name of dustoff point for NPC 4 : 
        self.Dustoff4: str = Dustoff4
        # Name of dustoff point for NPC 5 : 
        self.Dustoff5: str = Dustoff5
        # Name of dustoff point for NPC 6 : 
        self.Dustoff6: str = Dustoff6
        # Name of the APC to drop : 
        self.APCVehicleName: str = APCVehicleName
        # Invulnerable : 
        self.Invulnerable = Invulnerable
        # Crate Type : 
        self.CrateType = CrateType

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "InitialSpeed", "target", "spawnflags", "LandTarget", "GunRange", "RollermineTemplate", "NPCTemplate", "NPCTemplate2", "NPCTemplate3", "NPCTemplate4", "NPCTemplate5", "NPCTemplate6", "Dustoff1", "Dustoff2", "Dustoff3", "Dustoff4", "Dustoff5", "Dustoff6", "APCVehicleName", "Invulnerable", "CrateType"])


class NpcCombinegunship(Entity):
    """
    Auto-generated from halflife2.fgd, line 1350.
    Combine Gunship
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", InitialSpeed: str="0", target: str="", spawnflags=""):
        Entity.__init__(self, "npc_combinegunship", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Initial Speed : Sets the helicopter's desired speed that it should try to reach as soon as it's spawned.
        self.InitialSpeed: str = InitialSpeed
        # Target path_track : (Optional) The name of a path_track entity that this NPC will fly to after spawning.
        self.target: str = target

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "InitialSpeed", "target", "spawnflags"])


class NpcCrabsynth(Entity):
    """
    Auto-generated from halflife2.fgd, line 1779.
    Crab Synth
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_crabsynth", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcCranedriver(Entity):
    """
    Auto-generated from halflife2.fgd, line 331.
    NPC used to drive cranes.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", vehicle: str="", spawnflags="", releasepause: float=0):
        Entity.__init__(self, "npc_cranedriver", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Vehicle to drive : 
        self.vehicle: str = vehicle
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Pause time before dropping a ForceDrop specified object. : 
        self.releasepause: float = releasepause

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "vehicle", "spawnflags", "releasepause"])


class NpcCrow(Entity):
    """
    Auto-generated from halflife2.fgd, line 601.
    Crow
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", deaf=0):
        Entity.__init__(self, "npc_crow", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Deaf? : 
        self.deaf = deaf

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "deaf"])


class NpcCscanner(Entity):
    """
    Auto-generated from halflife2.fgd, line 1602.
    City Scanner
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", spotlightlength: int=500, spotlightwidth: int=50, spotlightdisabled=0, ShouldInspect=1, OnlyInspectPlayers=0, NeverInspectPlayers=0):
        Entity.__init__(self, "npc_cscanner", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # SpotlightLength : 
        self.spotlightlength: int = spotlightlength
        # SpotlightWidth : 
        self.spotlightwidth: int = spotlightwidth
        # SpotlightDisabled : 
        self.spotlightdisabled = spotlightdisabled
        # Should inspect : 
        self.ShouldInspect = ShouldInspect
        # Only Inspect Players : 
        self.OnlyInspectPlayers = OnlyInspectPlayers
        # Never Inspect Players : 
        self.NeverInspectPlayers = NeverInspectPlayers

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "spotlightlength", "spotlightwidth", "spotlightdisabled", "ShouldInspect", "OnlyInspectPlayers", "NeverInspectPlayers"])


class NpcDog(Entity):
    """
    Auto-generated from halflife2.fgd, line 1927.
    d0g
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_dog", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcEli(Entity):
    """
    Auto-generated from halflife2.fgd, line 1899.
    Eli Vance
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, parentname: str="", model: str="models/eli.mdl"):
        Entity.__init__(self, "npc_eli", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # World model : 
        self.model: str = model

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "parentname", "model"])


class NpcEnemyfinder(Entity):
    """
    Auto-generated from halflife2.fgd, line 702.
    EnemyFinder
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", FieldOfView: str="0.2", MinSearchDist: int=0, MaxSearchDist: int=2048, freepass_timetotrigger: float=0, freepass_duration: float=0, freepass_movetolerance: float=120, freepass_refillrate: float="0.5", freepass_peektime: float=0, StartOn=1):
        Entity.__init__(self, "npc_enemyfinder", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # FieldOfView : How far to look (1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions)
        self.FieldOfView: str = FieldOfView
        # Min Search Dist : 
        self.MinSearchDist: int = MinSearchDist
        # Max Search Dist : 
        self.MaxSearchDist: int = MaxSearchDist
        # Player pass issue time : Amount of time an enemy is hidden after which a 'free pass' on reaquire is granted
        self.freepass_timetotrigger: float = freepass_timetotrigger
        # Player pass duration : After granted 'free pass', the amount of time a target is allowed before reaquire
        self.freepass_duration: float = freepass_duration
        # Player pass move tolerance : After granted 'free pass', the distance the target is allowed to move before reaquire
        self.freepass_movetolerance: float = freepass_movetolerance
        # Player pass refill rate : After free pass begins expiring, how much the time the target gets back for every second they hide again
        self.freepass_refillrate: float = freepass_refillrate
        # Player pass peek time : How long targets in cover are allowed to peek without penalty
        self.freepass_peektime: float = freepass_peektime
        # Start On : 
        self.StartOn = StartOn

        self.auto_properties.extend(["origin", "parentname", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "FieldOfView", "MinSearchDist", "MaxSearchDist", "freepass_timetotrigger", "freepass_duration", "freepass_movetolerance", "freepass_refillrate", "freepass_peektime", "StartOn"])


class NpcEnemyfinderCombinecannon(Entity):
    """
    Auto-generated from halflife2.fgd, line 735.
    EnemyFinder Specifically for use with func_tank_combine_cannon
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", FieldOfView: str="0.2", MinSearchDist: int=0, MaxSearchDist: int=2048, SnapToEnt: str="", freepass_timetotrigger: float=0, freepass_duration: float=0, freepass_movetolerance: float=120, freepass_refillrate: float="0.5", freepass_peektime: float=0, StartOn=1):
        Entity.__init__(self, "npc_enemyfinder_combinecannon", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # FieldOfView : How far to look (1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions)
        self.FieldOfView: str = FieldOfView
        # Min Search Dist : 
        self.MinSearchDist: int = MinSearchDist
        # Max Search Dist : 
        self.MaxSearchDist: int = MaxSearchDist
        # Name of entity to snap to : Since it can be hard to position these entities with respect to the func_tank brushwork, you can specify an entity name here and this enemyfinder will position itself at the center of that entity.
        self.SnapToEnt: str = SnapToEnt
        # Player pass issue time : Amount of time an enemy is hidden after which a 'free pass' on reaquire is granted
        self.freepass_timetotrigger: float = freepass_timetotrigger
        # Player pass duration : After granted 'free pass', the amount of time a target is allowed before reaquire
        self.freepass_duration: float = freepass_duration
        # Player pass move tolerance : After granted 'free pass', the distance the target is allowed to move before reaquire
        self.freepass_movetolerance: float = freepass_movetolerance
        # Player pass refill rate : After free pass begins expiring, how much the time the target gets back for every second they hide again
        self.freepass_refillrate: float = freepass_refillrate
        # Player pass peek time : How long targets in cover are allowed to peek without penalty
        self.freepass_peektime: float = freepass_peektime
        # Start On : 
        self.StartOn = StartOn

        self.auto_properties.extend(["origin", "parentname", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "FieldOfView", "MinSearchDist", "MaxSearchDist", "SnapToEnt", "freepass_timetotrigger", "freepass_duration", "freepass_movetolerance", "freepass_refillrate", "freepass_peektime", "StartOn"])


class NpcFastzombie(Entity):
    """
    Auto-generated from halflife2.fgd, line 1568.
    Fast Zombie
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_fastzombie", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcFastzombieTorso(Entity):
    """
    Auto-generated from halflife2.fgd, line 1573.
    Fast Zombie Torso
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_fastzombie_torso", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcFisherman(Entity):
    """
    Auto-generated from halflife2.fgd, line 892.
    Fisherman
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", ExpressionOverride: str=""):
        Entity.__init__(self, "npc_fisherman", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Facial expression override : 
        self.ExpressionOverride: str = ExpressionOverride

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "ExpressionOverride"])


class NpcGman(Entity):
    """
    Auto-generated from halflife2.fgd, line 1923.
    The G-Man
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0):
        Entity.__init__(self, "npc_gman", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore"])


class NpcGrenadeFrag(Entity):
    """
    Auto-generated from halflife2.fgd, line 203.
    Hand Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_grenade_frag", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcHeadcrab(Entity):
    """
    Auto-generated from halflife2.fgd, line 657.
    Headcrab
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", startburrowed="No", spawnflags="", parentname: str=""):
        Entity.__init__(self, "npc_headcrab", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Start burrowed : 
        self.startburrowed = startburrowed
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "startburrowed", "spawnflags", "parentname"])


class NpcHeadcrabBlack(Entity):
    """
    Auto-generated from halflife2.fgd, line 663.
    Black Headcrab
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", startburrowed="No", spawnflags=""):
        Entity.__init__(self, "npc_headcrab_black", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Start burrowed : 
        self.startburrowed = startburrowed
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "startburrowed", "spawnflags"])


class NpcHeadcrabFast(Entity):
    """
    Auto-generated from halflife2.fgd, line 660.
    Fast Headcrab
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", startburrowed="No", spawnflags=""):
        Entity.__init__(self, "npc_headcrab_fast", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Start burrowed : 
        self.startburrowed = startburrowed
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "startburrowed", "spawnflags"])


class NpcHeliAvoidbox(Entity):
    """
    Auto-generated from halflife2.fgd, line 1556.
    Helicopter avoidance box
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="", angles: "Origin"="0 0 0", parentname: str="", spawnflags=""):
        Entity.__init__(self, "npc_heli_avoidbox", vmf_map)

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "angles", "parentname", "spawnflags"])


class NpcHeliAvoidsphere(Entity):
    """
    Auto-generated from halflife2.fgd, line 1547.
    Helicopter avoidance sphere
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", spawnflags="", radius: float=128):
        Entity.__init__(self, "npc_heli_avoidsphere", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Radius : 
        self.radius: float = radius

        self.auto_properties.extend(["origin", "targetname", "parentname", "spawnflags", "radius"])


class NpcHeliNobomb(Entity):
    """
    Auto-generated from halflife2.fgd, line 1564.
    Helicopter bombing suppressor
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="", angles: "Origin"="0 0 0", parentname: str=""):
        Entity.__init__(self, "npc_heli_nobomb", vmf_map)

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        self.auto_properties.extend(["origin", "angles", "parentname"])


class NpcHelicopter(Entity):
    """
    Auto-generated from halflife2.fgd, line 1465.
    Helicopter
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", target: str="", spawnflags="", InitialSpeed: str="0", GracePeriod: float="2.0", PatrolSpeed: float="0", noncombat="No"):
        Entity.__init__(self, "npc_helicopter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Target path_track : (Optional) The name of a path_track entity that this NPC will fly to after spawning.
        self.target: str = target

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Initial Speed : 
        self.InitialSpeed: str = InitialSpeed
        # Grace Period : Time in seconds the helicopter has to see the player before he starts shooting
        self.GracePeriod: float = GracePeriod
        # Patrol Speed : Speed at which the helicopter moves if he has no enemy.
        self.PatrolSpeed: float = PatrolSpeed
        # Non-combat (Do not precache gibs) : 
        self.noncombat = noncombat

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "target", "spawnflags", "InitialSpeed", "GracePeriod", "PatrolSpeed", "noncombat"])


class NpcHunter(Entity):
    """
    Auto-generated from halflife2.fgd, line 1040.
    A smaller, faster, strider that can pursue the player into buildings.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", FollowTarget: str=""):
        Entity.__init__(self, "npc_hunter", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Strider to Follow : The name of the strider that this hunter should follow.
        self.FollowTarget: str = FollowTarget

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "FollowTarget"])


class NpcHunterMaker(Entity):
    """
    Auto-generated from halflife2.fgd, line 1071.
    An entity that creates hunters. The NPCs it creates are clones of a template NPC.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", StartDisabled=1, MaxNPCCount: int=1, SpawnFrequency: str="5", MaxLiveChildren: int=5, spawnflags="", TemplateName: str="", Radius: float=256, DestinationGroup: str="", CriterionVisibility=2, CriterionDistance=2, MinSpawnDistance: int=0):
        Entity.__init__(self, "npc_hunter_maker", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Num. of NPCs : Number of NPCs that will spawn before this spawner is exhausted.
        self.MaxNPCCount: int = MaxNPCCount
        # Frequency : How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies.
        self.SpawnFrequency: str = SpawnFrequency
        # Max Live NPCs : Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied.
        self.MaxLiveChildren: int = MaxLiveChildren

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Name of template NPC : Template NPC that this maker should be creating clones of.
        self.TemplateName: str = TemplateName
        # Radius : Radius around this maker within which NPCs are to be placed. Spawned NPCs will try and find empty space within this radius to spawn.
        self.Radius: float = Radius
        # Name of Destination Group : If you'd like spawned NPCs to be created at an info_npc_spawn_destination entity, enter the name of that entity here. If you have more than one destination entity by that name, the Destination Criteria will be used to select one from the group.
        self.DestinationGroup: str = DestinationGroup
        # Dest. Criterion: Visible to player? : Should the NPC try to spawn at a destination that the player can see? Only applicable if a Destination Group is being used.
        self.CriterionVisibility = CriterionVisibility
        # Dest. Criterion: Distance to player? : Should the NPC try to spawn nearest to or farthest from the player's current location? Only applicable if a Destination Group is being used.
        self.CriterionDistance = CriterionDistance
        # Minimum spawn distance from player : The spawn destination node distance to the player will have to be further or equal than this value.
        self.MinSpawnDistance: int = MinSpawnDistance


        self.auto_properties.extend(["origin", "targetname", "angles", "StartDisabled", "MaxNPCCount", "SpawnFrequency", "MaxLiveChildren", "spawnflags", "TemplateName", "Radius", "DestinationGroup", "CriterionVisibility", "CriterionDistance", "MinSpawnDistance"])


class NpcIchthyosaur(Entity):
    """
    Auto-generated from halflife2.fgd, line 634.
    Ichthyosaur. Not fully functional
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_ichthyosaur", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcKleiner(Entity):
    """
    Auto-generated from halflife2.fgd, line 1894.
    Kleiner
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, model: str="models/kleiner.mdl"):
        Entity.__init__(self, "npc_kleiner", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore

        # World model : 
        self.model: str = model

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "model"])


class NpcLauncher(Entity):
    """
    Auto-generated from halflife2.fgd, line 981.
    Launcher
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", StartOn=0, MissileModel: str="models/Weapons/wscanner_grenade.mdl", LaunchSound: str="npc/waste_scanner/grenade_fire.wav", FlySound: str="ambient/objects/machine2.wav", SmokeTrail=1, LaunchSmoke=1, LaunchDelay: int=8, LaunchSpeed: str=200, PathCornerName: str="", HomingSpeed: str=0, HomingStrength: int=10, HomingDelay: str=0, HomingRampUp: str="0.5", HomingDuration: str=5, HomingRampDown: str="1.0", Gravity: str="1.0", MinRange: int=100, MaxRange: int=2048, SpinMagnitude: str=0, SpinSpeed: str=0, Damage: str=50, DamageRadius: str=200):
        Entity.__init__(self, "npc_launcher", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start On : 
        self.StartOn = StartOn
        # Missile Model : 
        self.MissileModel: str = MissileModel
        # Launch Sound : 
        self.LaunchSound: str = LaunchSound
        # Fly Sound : 
        self.FlySound: str = FlySound
        # Smoke Trail : 
        self.SmokeTrail = SmokeTrail
        # Launch Smoke : 
        self.LaunchSmoke = LaunchSmoke
        # Launch Delay : When ON, how long to wait between each launch
        self.LaunchDelay: int = LaunchDelay
        # Launch Speed : Initial launch speed of missile (in up direction)
        self.LaunchSpeed: str = LaunchSpeed
        # Path Corner Name : Name of a path corner.  If set launches a pathfollowing missing, rather than a homing missile
        self.PathCornerName: str = PathCornerName
        # Homing Speed : Speed to reach when homing
        self.HomingSpeed: str = HomingSpeed
        # Homing Strength : How strong in homing effect (0-100)
        self.HomingStrength: int = HomingStrength
        # Homing Delay : Number of seconds to delay before homing starts
        self.HomingDelay: str = HomingDelay
        # Homing Ramp Up : Number of seconds it takes to reach full homing strength after homing delay
        self.HomingRampUp: str = HomingRampUp
        # Homing Duration : Number of seconds the homing effect lasts
        self.HomingDuration: str = HomingDuration
        # Homing Ramp Down : Number of seconds it takes homing effect to decay after homing duration
        self.HomingRampDown: str = HomingRampDown
        # Gravity : Scale for effect of gravity. (1.0 = normal gravity)
        self.Gravity: str = Gravity
        # Min Range : Minimun distance a target can be to be attacked
        self.MinRange: int = MinRange
        # Max Range : Maximum distance a target can be to be attacked
        self.MaxRange: int = MaxRange
        # Spin Magnitude : Strength of spin in missile trajectory
        self.SpinMagnitude: str = SpinMagnitude
        # Spin Speed : How fast does the spin rotate through 360
        self.SpinSpeed: str = SpinSpeed
        # Damage : How much damage does each missile do
        self.Damage: str = Damage
        # DamageRadius : How far away from impact does the missle do damage
        self.DamageRadius: str = DamageRadius

        self.auto_properties.extend(["origin", "parentname", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "StartOn", "MissileModel", "LaunchSound", "FlySound", "SmokeTrail", "LaunchSmoke", "LaunchDelay", "LaunchSpeed", "PathCornerName", "HomingSpeed", "HomingStrength", "HomingDelay", "HomingRampUp", "HomingDuration", "HomingRampDown", "Gravity", "MinRange", "MaxRange", "SpinMagnitude", "SpinSpeed", "Damage", "DamageRadius"])


class NpcMagnusson(Entity):
    """
    Auto-generated from halflife2.fgd, line 1904.
    Magnusson
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, model: str="models/magnusson.mdl"):
        Entity.__init__(self, "npc_magnusson", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore

        # World model : 
        self.model: str = model

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "model"])


class NpcMaker(Entity):
    """
    Auto-generated from halflife2.fgd, line 1980.
    NPC Maker
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", StartDisabled=1, MaxNPCCount: int=1, SpawnFrequency: str="5", MaxLiveChildren: int=5, spawnflags="", NPCType: str="", NPCTargetname: str="", NPCSquadname: str="", NPCHintGroup: str="", additionalequipment="0"):
        Entity.__init__(self, "npc_maker", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Num. of NPCs : Number of NPCs that will spawn before this spawner is exhausted.
        self.MaxNPCCount: int = MaxNPCCount
        # Frequency : How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies.
        self.SpawnFrequency: str = SpawnFrequency
        # Max Live NPCs : Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied.
        self.MaxLiveChildren: int = MaxLiveChildren

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Class name of spawned NPC : 
        self.NPCType: str = NPCType
        # Childrens' Name : 
        self.NPCTargetname: str = NPCTargetname
        # Childrens' Squad Name : 
        self.NPCSquadname: str = NPCSquadname
        # Childrens' Hint Group : 
        self.NPCHintGroup: str = NPCHintGroup
        # Weapons : 
        self.additionalequipment = additionalequipment

        self.auto_properties.extend(["origin", "targetname", "angles", "StartDisabled", "MaxNPCCount", "SpawnFrequency", "MaxLiveChildren", "spawnflags", "NPCType", "NPCTargetname", "NPCSquadname", "NPCHintGroup", "additionalequipment"])


class NpcManhack(Entity):
    """
    Auto-generated from halflife2.fgd, line 1707.
    Manhack
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", ignoreclipbrushes="0"):
        Entity.__init__(self, "npc_manhack", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Ignore NPC Clip brushes : 
        self.ignoreclipbrushes = ignoreclipbrushes

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "ignoreclipbrushes"])


class NpcMetropolice(Entity):
    """
    Auto-generated from halflife2.fgd, line 1732.
    MetroPolice
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", waitingtorappel="No", additionalequipment="weapon_pistol", manhacks=0, weapondrawn=0, spawnflags=""):
        Entity.__init__(self, "npc_metropolice", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin








        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Waiting to Rappel? : If yes, this NPC spawns suspended in air and awaits a BeginRappel input. It will then spawn a zipline and slide down. When it hits the ground, NPC will cut away the line and try to move forward a few feet to make room for the next NPC. The NPC will not attempt to clear its landing space if it cannot do so by taking a few steps forward
        self.waitingtorappel = waitingtorappel

        # Weapons : 
        self.additionalequipment = additionalequipment
        # Number of Manhacks : 
        self.manhacks = manhacks
        # Pistol starts drawn : 
        self.weapondrawn = weapondrawn
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "waitingtorappel", "additionalequipment", "manhacks", "weapondrawn", "spawnflags"])


class NpcMissiledefense(Entity):
    """
    Auto-generated from halflife2.fgd, line 395.
    Missile Defense
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_missiledefense", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcMonk(Entity):
    """
    Auto-generated from halflife2.fgd, line 1783.
    Monk
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, additionalequipment="weapon_annabelle", HasGun=1):
        Entity.__init__(self, "npc_monk", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore

        # Weapons : 
        self.additionalequipment = additionalequipment
        # Has Gun : 
        self.HasGun = HasGun

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "additionalequipment", "HasGun"])


class NpcMortarsynth(Entity):
    """
    Auto-generated from halflife2.fgd, line 1727.
    Mortar Synth
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_mortarsynth", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcMossman(Entity):
    """
    Auto-generated from halflife2.fgd, line 1919.
    Dr Mossman
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0):
        Entity.__init__(self, "npc_mossman", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore"])


class NpcPigeon(Entity):
    """
    Auto-generated from halflife2.fgd, line 623.
    Pigeon
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", deaf=0):
        Entity.__init__(self, "npc_pigeon", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Deaf? : 
        self.deaf = deaf

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "deaf"])


class NpcPoisonzombie(Entity):
    """
    Auto-generated from halflife2.fgd, line 1591.
    A bloated, disgusting, fluid-spurting zombie created by a poison headcrab.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", crabcount=3):
        Entity.__init__(self, "npc_poisonzombie", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Crabs in nest : 
        self.crabcount = crabcount

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "crabcount"])


class NpcRollermine(Entity):
    """
    Auto-generated from halflife2.fgd, line 368.
    Roller Mine
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", startburied="No", uniformsightdist=0):
        Entity.__init__(self, "npc_rollermine", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Buried : 
        self.startburied = startburied
        # Sight Distance : 
        self.uniformsightdist = uniformsightdist

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "startburied", "uniformsightdist"])


class NpcSeagull(Entity):
    """
    Auto-generated from halflife2.fgd, line 612.
    Seagull
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", deaf=0):
        Entity.__init__(self, "npc_seagull", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Deaf? : 
        self.deaf = deaf

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "deaf"])


class NpcSniper(Entity):
    """
    Auto-generated from halflife2.fgd, line 399.
    Sniper
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", radius: int=0, misses: int=0, beambrightness: int=100, shootZombiesInChest=0, shielddistance: float=64, shieldradius: float=48, PaintInterval: float=1, PaintIntervalVariance: float="0.75", spawnflags=""):
        Entity.__init__(self, "npc_sniper", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Patience Radius : Sniper will hold fire until the target is within this radius. After that, sniper will always attack, even if the target retreats outside of this radius
        self.radius: int = radius
        # Initial Misses : How many times to miss a target on purpose before beginning to fire accurately.
        self.misses: int = misses
        # Beam Brightness (0 to 255) : How bright the laser sight beam should be. (0 - 255)
        self.beambrightness: int = beambrightness
        # Shoot zombies in chest : If true, aim for chest instead of headcrab. Useful when at great distance and height.
        self.shootZombiesInChest = shootZombiesInChest
        # Bullet shield distance : Obsolete
        self.shielddistance: float = shielddistance
        # Bullet shield radius : Obsolete
        self.shieldradius: float = shieldradius
        # Paint interval : Sniper will keep a target painted for this many seconds before shooting. 'Faster Shooting' sniper flag multiplies this by 0.75.
        self.PaintInterval: float = PaintInterval
        # Paint interval variance : When shooting at NPCs, a random number between 0 and this is added to PaintInterval for every shot.
        self.PaintIntervalVariance: float = PaintIntervalVariance
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "radius", "misses", "beambrightness", "shootZombiesInChest", "shielddistance", "shieldradius", "PaintInterval", "PaintIntervalVariance", "spawnflags"])


class NpcSpotlight(Entity):
    """
    Auto-generated from halflife2.fgd, line 1241.
    Spotlight
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", spawnflags="", health: int=100, YawRange: int=90, PitchMin: int=35, PitchMax: int=50, IdleSpeed: int=2, AlertSpeed: int=5, spotlightlength: int=500, spotlightwidth: int=50, rendercolor: "RGB"="255 255 255"):
        Entity.__init__(self, "npc_spotlight", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Health : 
        self.health: int = health
        # YawRange : 
        self.YawRange: int = YawRange
        # PitchMin : 
        self.PitchMin: int = PitchMin
        # PitchMax : 
        self.PitchMax: int = PitchMax
        # IdleSpeed : 
        self.IdleSpeed: int = IdleSpeed
        # AlertSpeed : 
        self.AlertSpeed: int = AlertSpeed
        # SpotlightLength : 
        self.spotlightlength: int = spotlightlength
        # SpotlightWidth : 
        self.spotlightwidth: int = spotlightwidth
        # Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "spawnflags", "health", "YawRange", "PitchMin", "PitchMax", "IdleSpeed", "AlertSpeed", "spotlightlength", "spotlightwidth", "rendercolor"])


class NpcStalker(Entity):
    """
    Auto-generated from halflife2.fgd, line 667.
    Stalker
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", BeamPower="Low"):
        Entity.__init__(self, "npc_stalker", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Beam Power : 
        self.BeamPower = BeamPower

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "BeamPower"])


class NpcStrider(Entity):
    """
    Auto-generated from halflife2.fgd, line 1276.
    Strider
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", model="models/combine_strider.mdl", spawnflags="", disablephysics=0):
        Entity.__init__(self, "npc_strider", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Model : Standard strider
        self.model = model
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Disable physics (reduce CPU) : 
        self.disablephysics = disablephysics

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "model", "spawnflags", "disablephysics"])


class NpcTurretCeiling(Entity):
    """
    Auto-generated from halflife2.fgd, line 252.
    Combine Ceiling Turret
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, modelscale: float="1.0", disableshadows=0, spawnflags="", minhealthdmg: int=0):
        Entity.__init__(self, "npc_turret_ceiling", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min req'd damage for hurting turret : 
        self.minhealthdmg: int = minhealthdmg

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "skin", "modelscale", "disableshadows", "spawnflags", "minhealthdmg"])


class NpcTurretFloor(Entity):
    """
    Auto-generated from halflife2.fgd, line 276.
    Combine Floor Turret
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", SkinNumber: int=0):
        Entity.__init__(self, "npc_turret_floor", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Skin Number : Which skin to use for this turret. Set to 0 to select randomly.
        self.SkinNumber: int = SkinNumber

        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "SkinNumber"])


class NpcTurretGround(Entity):
    """
    Auto-generated from halflife2.fgd, line 244.
    Combine ground turret
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", parentname: str=""):
        Entity.__init__(self, "npc_turret_ground", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname



        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "parentname"])


class NpcVehicledriver(Entity):
    """
    Auto-generated from halflife2.fgd, line 319.
    NPC used to drive a target vehicle.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", vehicle: str="", spawnflags="", drivermaxspeed: float=1, driverminspeed: float=0):
        Entity.__init__(self, "npc_vehicledriver", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Vehicle to drive : 
        self.vehicle: str = vehicle
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        # Maxspeed (percentage of vehicle's maxspeed). : 
        self.drivermaxspeed: float = drivermaxspeed
        # MinSpeed (percentage of vehicle's maxspeed). : 
        self.driverminspeed: float = driverminspeed

        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "vehicle", "spawnflags", "drivermaxspeed", "driverminspeed"])


class NpcVortigaunt(Entity):
    """
    Auto-generated from halflife2.fgd, line 1206.
    Vortigaunt
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", UseSentence: str="", UnUseSentence: str="", DontUseSpeechSemaphore=0, targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0", AlwaysTransition="No", DontPickupWeapons="No", GameEndAlly="No", model: str="models/vortigaunt.mdl", ArmorRechargeEnabled=1, HealthRegenerateEnabled=0):
        Entity.__init__(self, "npc_vortigaunt", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
















        # Use Sentence : 
        self.UseSentence: str = UseSentence
        # Un-Use Sentence : 
        self.UnUseSentence: str = UnUseSentence
        # Don't Use Speech Semaphore : Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks.
        self.DontUseSpeechSemaphore = DontUseSpeechSemaphore

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale

        # Always transition : If yes, this NPC will always teleport to a Player Squad Transition Point if they're not within the trigger_transition volume.
        self.AlwaysTransition = AlwaysTransition
        # Prevent picking up weapons? : If yes, this NPC will NOT be allowed to pick up weapons they find on the ground.
        self.DontPickupWeapons = DontPickupWeapons
        # Is this a vital ally? : If yes, this NPC will cause the game to end if killed.
        self.GameEndAlly = GameEndAlly

        # World model : 
        self.model: str = model
        # Allow Armor Recharging : 
        self.ArmorRechargeEnabled = ArmorRechargeEnabled
        # Regenerate Health : Whether or not the vortigaunt will recover his own health over time like vital allies, while in combat
        self.HealthRegenerateEnabled = HealthRegenerateEnabled

        self.auto_properties.extend(["origin", "UseSentence", "UnUseSentence", "DontUseSpeechSemaphore", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale", "AlwaysTransition", "DontPickupWeapons", "GameEndAlly", "model", "ArmorRechargeEnabled", "HealthRegenerateEnabled"])


class NpcZombie(Entity):
    """
    Auto-generated from halflife2.fgd, line 1578.
    Zombie
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_zombie", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcZombieTorso(Entity):
    """
    Auto-generated from halflife2.fgd, line 1582.
    Zombie Torso
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_zombie_torso", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class NpcZombine(Entity):
    """
    Auto-generated from halflife2.fgd, line 1586.
    Combine Soldier Zombie
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0, damagefilter: str="", ResponseContext: str="", disableshadows=0, target: str="", squadname: str="", hintgroup: str="", hintlimiting=0, spawnflags="", sleepstate=0, wakeradius: float=0, wakesquad=0, enemyfilter: str="", ignoreunseenenemies=0, physdamagescale: float="1.0"):
        Entity.__init__(self, "npc_zombine", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Response Contexts : Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.
        self.ResponseContext: str = ResponseContext

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Target Path Corner : If set, the name of a path corner entity that this NPC will walk to, after spawning.
        self.target: str = target
        # Squad Name : NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other.
        self.squadname: str = squadname
        # Hint Group : Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.
        self.hintgroup: str = hintgroup
        # Hint Limit Nav : Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.
        self.hintlimiting = hintlimiting
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sleep State : Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.
        self.sleepstate = sleepstate
        # Wake Radius : Auto-wake if player within this distance
        self.wakeradius: float = wakeradius
        # Wake Squad : Wake all of the NPCs squadmates if the NPC is woken
        self.wakesquad = wakesquad
        # Enemy Filter : Filter by which to filter potential enemies
        self.enemyfilter: str = enemyfilter
        # Ignore unseen enemies : Prefer visible enemies, regardless of distance or relationship priority
        self.ignoreunseenenemies = ignoreunseenenemies
        # Physics Impact Damage Scale : Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.
        self.physdamagescale: float = physdamagescale


        self.auto_properties.extend(["origin", "targetname", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows", "damagefilter", "ResponseContext", "disableshadows", "target", "squadname", "hintgroup", "hintlimiting", "spawnflags", "sleepstate", "wakeradius", "wakesquad", "enemyfilter", "ignoreunseenenemies", "physdamagescale"])


class PathCorner(Entity):
    """
    Auto-generated from halflife2.fgd, line 3677.
    Generic path point
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", target: str="", wait: int=0, speed: int=0, yaw_speed: int=0):
        Entity.__init__(self, "path_corner", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Next stop target : 
        self.target: str = target
        # Wait here (secs) : 
        self.wait: int = wait
        # New Train Speed : 
        self.speed: int = speed
        # New Train rot. Speed : 
        self.yaw_speed: int = yaw_speed

        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "target", "wait", "speed", "yaw_speed"])


class PathCornerCrash(Entity):
    """
    Auto-generated from halflife2.fgd, line 3696.
    Helicopter Crash Path
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", target: str=""):
        Entity.__init__(self, "path_corner_crash", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Next stop target : 
        self.target: str = target

        self.auto_properties.extend(["origin", "targetname", "target"])


class PlayerLoadsaved(Entity):
    """
    Auto-generated from halflife2.fgd, line 3708.
    Load Auto-Saved game
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", duration: str="2", holdtime: str="0", renderamt: int=255, rendercolor: "RGB"="0 0 0", loadtime: str="0"):
        Entity.__init__(self, "player_loadsaved", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Fade Duration (seconds) : 
        self.duration: str = duration
        # Hold Fade (seconds) : 
        self.holdtime: str = holdtime
        # Fade Alpha : 
        self.renderamt: int = renderamt
        # Fade Color (R G B) : 
        self.rendercolor: "RGB" = rendercolor
        # Reload delay : 
        self.loadtime: str = loadtime

        self.auto_properties.extend(["origin", "targetname", "duration", "holdtime", "renderamt", "rendercolor", "loadtime"])


class PlayerSpeedmod(Entity):
    """
    Auto-generated from halflife2.fgd, line 3728.
    Speeds up or slows down player velocity over time (slow mo/fast forward)
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags=""):
        Entity.__init__(self, "player_speedmod", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["origin", "targetname", "spawnflags"])


class PlayerWeaponstrip(Entity):
    """
    Auto-generated from halflife2.fgd, line 3721.
    Strips player's weapons
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str=""):
        Entity.__init__(self, "player_weaponstrip", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname


        self.auto_properties.extend(["origin", "targetname"])


class PointAntlionRepellant(Entity):
    """
    Auto-generated from halflife2.fgd, line 2057.
    Antlion Repellant
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", repelradius: float=512):
        Entity.__init__(self, "point_antlion_repellant", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Repell radius : Antlions aren't allowed to be inside this radius
        self.repelradius: float = repelradius

        self.auto_properties.extend(["origin", "targetname", "repelradius"])


class PointApcController(Entity):
    """
    Auto-generated from halflife2.fgd, line 4287.
    APC Controller
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", yawrate: str="30", yawtolerance: str="15", pitchrate: str="0", pitchtolerance: str="20", rotatestartsound: str="", rotatesound: str="", rotatestopsound: str="", minRange: str="0", maxRange: str="0", targetentityname: str=""):
        Entity.__init__(self, "point_apc_controller", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Yaw rate : 
        self.yawrate: str = yawrate
        # Yaw tolerance : 
        self.yawtolerance: str = yawtolerance
        # Pitch rate : 
        self.pitchrate: str = pitchrate
        # Pitch tolerance : 
        self.pitchtolerance: str = pitchtolerance
        # Rotate Start Sound : 
        self.rotatestartsound: str = rotatestartsound
        # Rotate Loop Sound : 
        self.rotatesound: str = rotatesound
        # Rotate Stop Sound : 
        self.rotatestopsound: str = rotatestopsound
        # Minmum target range : 
        self.minRange: str = minRange
        # Maximum target range : 
        self.maxRange: str = maxRange
        # Name of entity I should follow/attack : 
        self.targetentityname: str = targetentityname

        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "yawrate", "yawtolerance", "pitchrate", "pitchtolerance", "rotatestartsound", "rotatesound", "rotatestopsound", "minRange", "maxRange", "targetentityname"])


class PointBugbait(Entity):
    """
    Auto-generated from halflife2.fgd, line 3639.
    Bugbait sensor point
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Enabled=1, spawnflags="", radius: int=512):
        Entity.__init__(self, "point_bugbait", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Enabled : 
        self.Enabled = Enabled
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sensor Radius : 
        self.radius: int = radius

        self.auto_properties.extend(["origin", "targetname", "Enabled", "spawnflags", "radius"])


class PointCamera(Entity):
    """
    Auto-generated from halflife2.fgd, line 4173.
    Camera
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", parentname: str="", angles: "Origin"="0 0 0", spawnflags="", targetname: str="", FOV: float=90, UseScreenAspectRatio=0, fogEnable=0, fogColor: "RGB"="0 0 0", fogStart: float=2048, fogEnd: float=4096, fogMaxDensity: float=1):
        Entity.__init__(self, "point_camera", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname
        # FOV : Field of view in degrees
        self.FOV: float = FOV
        # Screen Aspect Ratio : 
        self.UseScreenAspectRatio = UseScreenAspectRatio
        # Fog Enable : 
        self.fogEnable = fogEnable
        # Fog Color : 
        self.fogColor: "RGB" = fogColor
        # Fog Start : The near fog plane.
        self.fogStart: float = fogStart
        # Fog End : The far fog/clipping plane.
        self.fogEnd: float = fogEnd
        # Fog Max Density [0..1] : The maximum fog density. 0=no fog, 1=full fog.
        self.fogMaxDensity: float = fogMaxDensity

        self.auto_properties.extend(["origin", "parentname", "angles", "spawnflags", "targetname", "FOV", "UseScreenAspectRatio", "fogEnable", "fogColor", "fogStart", "fogEnd", "fogMaxDensity"])


class PointCombineBallLauncher(Entity):
    """
    Auto-generated from halflife2.fgd, line 178.
    Launches Combine balls.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", angles: "Origin"="0 0 0", globalname: str="", ballcount: int=3, minspeed: float="300.0", maxspeed: float="600.0", ballradius: float="20.0", balltype="Combine Energy Ball 1", ballrespawntime: float="4.0f", launchconenoise: float="0.0", bullseyename: str="", maxballbounces: int=8, spawnflags=""):
        Entity.__init__(self, "point_combine_ball_launcher", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Ball count : This is how many balls will be bouncing around inside the spawner
        self.ballcount: int = ballcount
        # Min ball speed : The minimum speed of balls that fly in the spawner
        self.minspeed: float = minspeed
        # Max ball speed : The maximum speed of balls that fly in the spawner
        self.maxspeed: float = maxspeed
        # Ball radius : The radius of the energy balls
        self.ballradius: float = ballradius
        # Ball Type : 
        self.balltype = balltype
        # Ball Respawn Time : The energy balls respawn time
        self.ballrespawntime: float = ballrespawntime

        # Noise to launch direction : Noise in degrees added to the launch direction.
        self.launchconenoise: float = launchconenoise
        # Name of bullseye : If you select the Attach Bullseye spawnflag, you may specify a name here which will be given to the bullseye.
        self.bullseyename: str = bullseyename
        # Max number of bounces : Maximum number of bounces the balls are allowed to do before they are removed.
        self.maxballbounces: int = maxballbounces
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "origin", "angles", "globalname", "ballcount", "minspeed", "maxspeed", "ballradius", "balltype", "ballrespawntime", "launchconenoise", "bullseyename", "maxballbounces", "spawnflags"])


class PointFleshEffectTarget(Entity):
    """
    Auto-generated from halflife2.fgd, line 4665.
    Flesh Effect Target
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", radius: float=8):
        Entity.__init__(self, "point_flesh_effect_target", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Radius : Radius of the effect when active
        self.radius: float = radius

        self.auto_properties.extend(["origin", "targetname", "parentname", "radius"])


class PointPush(Entity):
    """
    Auto-generated from halflife2.fgd, line 4604.
    Point Push
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", enabled=1, magnitude: float=100, radius: float=128, inner_radius: float="0"):
        Entity.__init__(self, "point_push", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Enabled : 
        self.enabled = enabled
        # Magnitude : How strongly to push away from the center.
        self.magnitude: float = magnitude
        # Radius : Radius to affect items in.
        self.radius: float = radius
        # Inner radius : If not zero, the LOS is calculated from a point intersecting this sphere.
        self.inner_radius: float = inner_radius

        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "enabled", "magnitude", "radius", "inner_radius"])


class PropCombineBall(Entity):
    """
    Auto-generated from halflife2.fgd, line 129.
    A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other constraints. It can also be configured to break when it takes enough damage.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, modelscale: float="1.0", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, spawnflags="", minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str=""):
        Entity.__init__(self, "prop_combine_ball", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound


        self.auto_properties.extend(["origin", "globalname", "angles", "model", "skin", "modelscale", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "spawnflags", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound"])


class PropCoreball(Entity):
    """
    Auto-generated from halflife2.fgd, line 4590.
    Core Ball
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0"):
        Entity.__init__(self, "prop_coreball", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles


        self.auto_properties.extend(["origin", "targetname", "angles"])


class PropScalable(Entity):
    """
    Auto-generated from halflife2.fgd, line 4597.
    Scalable Prop
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", model: str="", skin: int=0, modelscale: float="1.0", disableshadows=0, angles: "Origin"="0 0 0", renderfx=0, rendermode=0, renderamt: int=255, rendercolor: "RGB"="255 255 255", disablereceiveshadows=0):
        Entity.__init__(self, "prop_scalable", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale
        # Disable Shadows : Used to disable dynamic shadows on this entity.
        self.disableshadows = disableshadows

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Render FX : 
        self.renderfx = renderfx

        # Render Mode : Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.
        self.rendermode = rendermode
        # FX Amount (0 - 255) : The FX amount is used by the selected Render Mode.
        self.renderamt: int = renderamt
        # FX Color (R G B) : The FX color is used by the selected Render Mode.
        self.rendercolor: "RGB" = rendercolor
        # Disable Receiving Shadows : 
        self.disablereceiveshadows = disablereceiveshadows


        self.auto_properties.extend(["origin", "targetname", "model", "skin", "modelscale", "disableshadows", "angles", "renderfx", "rendermode", "renderamt", "rendercolor", "disablereceiveshadows"])


class PropThumper(Entity):
    """
    Auto-generated from halflife2.fgd, line 481.
    Thumper
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", model: str="models/props_combine/CombineThumper002.mdl", dustscale="Small Thumper", EffectRadius: int=1000):
        Entity.__init__(self, "prop_thumper", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World model : 
        self.model: str = model
        # Dust Scale : 
        self.dustscale = dustscale
        # Effect Radius : Radius of the thumper's sound. EPISODIC ONLY.
        self.EffectRadius: int = EffectRadius

        self.auto_properties.extend(["origin", "targetname", "angles", "model", "dustscale", "EffectRadius"])


class PropVehicle(Entity):
    """
    Auto-generated from halflife2.fgd, line 4268.
    Studiomodel vehicle that can be driven via inputs.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, model: str="", skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, vehiclescript: str="scripts/vehicles/jeep_test.txt", actionScale: float="1", spawnflags=""):
        Entity.__init__(self, "prop_vehicle", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "model", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "vehiclescript", "actionScale", "spawnflags"])


class PropVehicleAirboat(Entity):
    """
    Auto-generated from halflife2.fgd, line 4386.
    Driveable studiomodel airboat.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, actionScale: float="1", VehicleLocked=0, model: str="models/airboat.mdl", vehiclescript: str="scripts/vehicles/airboat.txt", EnableGun=0):
        Entity.__init__(self, "prop_vehicle_airboat", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked

        # World model : 
        self.model: str = model
        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Has Gun : Whether the airboat's gun is enabled or disabled.
        self.EnableGun = EnableGun

        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "actionScale", "VehicleLocked", "model", "vehiclescript", "EnableGun"])


class PropVehicleApc(Entity):
    """
    Auto-generated from halflife2.fgd, line 4313.
    APC with mounted guns, can only be driven by a vehicle driver or a npc_apcdriver.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, model: str="", skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, vehiclescript: str="scripts/vehicles/jeep_test.txt", actionScale: float="1", VehicleLocked=0, missilehint: str=""):
        Entity.__init__(self, "prop_vehicle_apc", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked

        # Missile Hint Target : Name of one or more info_apc_missile_hint entities to use to determine what to hit.
        self.missilehint: str = missilehint

        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "model", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "vehiclescript", "actionScale", "VehicleLocked", "missilehint"])


class PropVehicleCannon(Entity):
    """
    Auto-generated from halflife2.fgd, line 4401.
    Driveable studiomodel cannon.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, model: str="", skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, vehiclescript: str="scripts/vehicles/jeep_test.txt", actionScale: float="1", VehicleLocked=0):
        Entity.__init__(self, "prop_vehicle_cannon", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked


        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "model", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "vehiclescript", "actionScale", "VehicleLocked"])


class PropVehicleChoreoGeneric(Entity):
    """
    Auto-generated from halflife2.fgd, line 4532.
    Generic Choreo vehicle used for magical events.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, actionScale: float="1", VehicleLocked=0, parentname: str="", model: str="models/vehicles/prisoner_pod.mdl", vehiclescript: str="scripts/vehicles/choreo_vehicle.txt", ignoremoveparent=0, ignoreplayer=0):
        Entity.__init__(self, "prop_vehicle_choreo_generic", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # World model : 
        self.model: str = model
        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Ignore Move Parent on Exit : Should the player ignore this vehicle's move parent went performing exit checks.
        self.ignoremoveparent = ignoremoveparent
        # Ignore Player collision : The player wont collide against this vehicle when moving around.
        self.ignoreplayer = ignoreplayer

        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "actionScale", "VehicleLocked", "parentname", "model", "vehiclescript", "ignoremoveparent", "ignoreplayer"])


class PropVehicleCrane(Entity):
    """
    Auto-generated from halflife2.fgd, line 4407.
    Driveable studiomodel crane.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, model: str="", skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, vehiclescript: str="scripts/vehicles/jeep_test.txt", actionScale: float="1", VehicleLocked=0, magnetname: str=""):
        Entity.__init__(self, "prop_vehicle_crane", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked

        # Magnet entity : 
        self.magnetname: str = magnetname

        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "model", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "vehiclescript", "actionScale", "VehicleLocked", "magnetname"])


class PropVehicleDriveable(Entity):
    """
    Auto-generated from halflife2.fgd, line 4282.
    Generic driveable studiomodel vehicle.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, model: str="", skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, vehiclescript: str="scripts/vehicles/jeep_test.txt", actionScale: float="1", VehicleLocked=0):
        Entity.__init__(self, "prop_vehicle_driveable", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked


        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "model", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "vehiclescript", "actionScale", "VehicleLocked"])


class PropVehicleJeep(Entity):
    """
    Auto-generated from halflife2.fgd, line 4336.
    Driveable studiomodel jeep.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, model: str="", skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, vehiclescript: str="scripts/vehicles/jeep_test.txt", actionScale: float="1", VehicleLocked=0, CargoVisible=0, spawnflags=""):
        Entity.__init__(self, "prop_vehicle_jeep", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked

        # Hopper Visible : Is the striderbuster cargo hopper visible?
        self.CargoVisible = CargoVisible
        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "model", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "vehiclescript", "actionScale", "VehicleLocked", "CargoVisible", "spawnflags"])


class PropVehiclePrisonerPod(Entity):
    """
    Auto-generated from halflife2.fgd, line 4415.
    Combine prisoner pod that the player can ride in.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, actionScale: float="1", VehicleLocked=0, parentname: str="", model: str="models/vehicles/prisoner_pod.mdl", vehiclescript: str="scripts/vehicles/prisoner_pod.txt"):
        Entity.__init__(self, "prop_vehicle_prisoner_pod", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # World model : 
        self.model: str = model
        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript

        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "actionScale", "VehicleLocked", "parentname", "model", "vehiclescript"])


class ScriptIntro(Entity):
    """
    Auto-generated from halflife2.fgd, line 4449.
    Script: Custom entity used to handle the intro sequence.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", alternatefovchange=0):
        Entity.__init__(self, "script_intro", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Match env_zoom's FOV transition : Whether the script should match env_zoom's FOV transition.
        self.alternatefovchange = alternatefovchange

        self.auto_properties.extend(["origin", "targetname", "alternatefovchange"])


class ScriptTauremoval(Entity):
    """
    Auto-generated from halflife2.fgd, line 4440.
    Script: Custom entity used to handle the tau removal sequence in coast. (unused)
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", parentname: str="", vortigaunt: str=""):
        Entity.__init__(self, "script_tauremoval", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Vortigaunt to use : 
        self.vortigaunt: str = vortigaunt

        self.auto_properties.extend(["origin", "angles", "targetname", "parentname", "vortigaunt"])


class ScriptedSentence(Entity):
    """
    Auto-generated from halflife2.fgd, line 2148.
    Scripted Sentence
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", spawnflags="", sentence: str="", entity: str="", delay: str="0", radius: int=512, refire: str="3", listener: str="", volume: str="10", attenuation=0):
        Entity.__init__(self, "scripted_sentence", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Sentence Name : 
        self.sentence: str = sentence
        # Speaker Type : 
        self.entity: str = entity
        # Additional Sentence Time : 
        self.delay: str = delay
        # Search Radius : 
        self.radius: int = radius
        # Delay Before Refire : 
        self.refire: str = refire
        # Listener Type : 
        self.listener: str = listener
        # Volume 0-10 : 
        self.volume: str = volume
        # Sound Radius : 
        self.attenuation = attenuation

        self.auto_properties.extend(["origin", "targetname", "spawnflags", "sentence", "entity", "delay", "radius", "refire", "listener", "volume", "attenuation"])


class ScriptedSequence(Entity):
    """
    Auto-generated from halflife2.fgd, line 2952.
    Grabs an NPC and makes them play a specified set of animations. The NPC can be told to move to the scripted sequence position or can be told to play the script wherever they currently are. Multiple scripted sequences of the same name will frame-synchronize in the action animation once all the actors have moved to position. This allows tight interaction between actors (one actor grabbing another, hitting them, etc.) The flow is as follows:\n\n1) Move to position using the specified movement animation. If 'Move to Position' is set to NONE, skip to step 2.\n2) If forced to wait for another actor to move to position, play the pre-action idle animation, otherwise skip to step 3. If there is no pre-action idle specified, ACT_IDLE is used.\n3) Fire the OnBeginSequence output.\n4) Play the action animation. If no action animation is specified, skip to step 5.\n5) Play the post-action idle animation. If none is specified, skip to step 6. If the 'Loop in Post Idle' spawnflag is set, keep playing the post-action idle until the script is cancelled. If no post-action idle animation is specified, ACT_IDLE is used.\n6) Fire the OnEndSequence output.\n7) If a next script to play is specified, hand the NPC to the next script and repeat this process for that script.\n\nThe MoveToPosition input runs steps 1 and 2, then waits while playing the pre-action idle animation until the BeginSequence input is received.\n\nIf the sequence has motion extraction in it, set the 'Don't Teleport NPC On End' spawnflag.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", m_iszEntity: str="", m_iszIdle: str="", m_iszEntry: str="", m_iszPlay: str="", m_iszPostIdle: str="", m_iszCustomMove: str="", m_bLoopActionSequence=0, m_bSynchPostIdles=0, m_flRadius: int=0, m_flRepeat: int=0, m_fMoveTo=1, m_iszNextScript: str="", m_bIgnoreGravity=0, m_bDisableNPCCollisions=0, angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, spawnflags="", onplayerdeath=0):
        Entity.__init__(self, "scripted_sequence", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname


        # Target NPC : The name or class name (such as 'npc_zombie') of an NPC to use for this script.
        self.m_iszEntity: str = m_iszEntity
        # Pre Action Idle Animation : The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play before the action animation if the NPC must wait for the script to be triggered. Use 'Start on Spawn' flag or MoveToPosition input to play this idle animation.
        self.m_iszIdle: str = m_iszIdle
        # Entry Animation : The name of the sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play when the sequence starts, before transitioning to play the main action sequence.
        self.m_iszEntry: str = m_iszEntry
        # Action Animation : The name of the main sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play.
        self.m_iszPlay: str = m_iszPlay
        # Post Action Idle Animation : The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play after the action animation.
        self.m_iszPostIdle: str = m_iszPostIdle
        # Custom Move Animation : Used in conjunction with the 'Custom movement' setting for the 'Move to Position' property, specifies the sequence (such as 'crouch_run01') or activity (such as 'ACT_RUN') to use while moving to the scripted position.
        self.m_iszCustomMove: str = m_iszCustomMove
        # Loop Action Animation? : 
        self.m_bLoopActionSequence = m_bLoopActionSequence
        # Synch Post Idles? : 
        self.m_bSynchPostIdles = m_bSynchPostIdles
        # Search Radius (0=everywhere) : Radius to search within for an NPC to use. 0 searches everywhere.
        self.m_flRadius: int = m_flRadius
        # Repeat Rate ms : 
        self.m_flRepeat: int = m_flRepeat
        # Move to Position : 
        self.m_fMoveTo = m_fMoveTo
        # Next Script : The name of the script to run immediately after this script completes. The NPC will not return to AI between the two scripts.
        self.m_iszNextScript: str = m_iszNextScript
        # Ignore Gravity on NPC during script : If this is set to 'Yes', the NPC will not be subject to gravity while playing this script.
        self.m_bIgnoreGravity = m_bIgnoreGravity
        # Disable NPC collisions during script : Useful for when NPCs playing scripts must interpenetrate while riding on trains, elevators, etc. This only disables collisions between the NPCs in the script and must be enabled on BOTH scripted_sequences.
        self.m_bDisableNPCCollisions = m_bDisableNPCCollisions

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # On player death : What should this entity do if the player dies
        self.onplayerdeath = onplayerdeath

        self.auto_properties.extend(["origin", "targetname", "parentname", "m_iszEntity", "m_iszIdle", "m_iszEntry", "m_iszPlay", "m_iszPostIdle", "m_iszCustomMove", "m_bLoopActionSequence", "m_bSynchPostIdles", "m_flRadius", "m_flRepeat", "m_fMoveTo", "m_iszNextScript", "m_bIgnoreGravity", "m_bDisableNPCCollisions", "angles", "mindxlevel", "maxdxlevel", "spawnflags", "onplayerdeath"])


class ScriptedTarget(Entity):
    """
    Auto-generated from halflife2.fgd, line 2182.
    Scripted Target
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", parentname: str="", StartDisabled=1, m_iszEntity: str="", m_flRadius: int=0, MoveSpeed: int=5, PauseDuration: int=0, EffectDuration: int=2, target: str=""):
        Entity.__init__(self, "scripted_target", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Target NPC : 
        self.m_iszEntity: str = m_iszEntity
        # Search Radius (0=everywhere) : Radius to search within for an NPC to use. 0 searches everywhere.
        self.m_flRadius: int = m_flRadius
        # Move Speed : 
        self.MoveSpeed: int = MoveSpeed
        # Pause Duration : 
        self.PauseDuration: int = PauseDuration
        # Effect Duration : 
        self.EffectDuration: int = EffectDuration
        # Next Target : 
        self.target: str = target

        self.auto_properties.extend(["origin", "targetname", "parentname", "StartDisabled", "m_iszEntity", "m_flRadius", "MoveSpeed", "PauseDuration", "EffectDuration", "target"])


class TestSidelist(Entity):
    """
    Auto-generated from halflife2.fgd, line 4511.
    Test entity for Ken!
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", sides=""):
        Entity.__init__(self, "test_sidelist", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Sides : 
        self.sides = sides

        self.auto_properties.extend(["origin", "sides"])


class TriggerPhysicsTrap(Entity):
    """
    Auto-generated from halflife2.fgd, line 137.
    A volumetric trigger that disintegrates enemies
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", angles: "Origin"="0 0 0", dissolvetype="Energy"):
        Entity.__init__(self, "trigger_physics_trap", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Dissolve Type : 
        self.dissolvetype = dissolvetype

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "angles", "dissolvetype"])


class TriggerRpgfire(Entity):
    """
    Auto-generated from halflife2.fgd, line 3577.
    A volumetric trigger that triggers whenever an RPG is fired within it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str=""):
        Entity.__init__(self, "trigger_rpgfire", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername



        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername"])


class TriggerVphysicsMotion(Entity):
    """
    Auto-generated from halflife2.fgd, line 3584.
    A volumetric trigger that affects the motion of vphysics objects that touch it.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", globalname: str="", spawnflags="", StartDisabled=0, filtername: str="", SetGravityScale: float="1.0", SetAdditionalAirDensity: float="0", SetVelocityLimit: float="0.0", SetVelocityLimitDelta: float="0.0", SetVelocityScale: float="1.0", SetAngVelocityLimit: float="0.0", SetAngVelocityScale: float="1.0", SetLinearForce: float="0.0", SetLinearForceAngles: "Origin"="0 0 0", ParticleTrailMaterial: str="", ParticleTrailLifetime: float=4, ParticleTrailStartSize: float=2, ParticleTrailEndSize: float=3):
        Entity.__init__(self, "trigger_vphysics_motion", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin


        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname



        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Disabled : 
        self.StartDisabled = StartDisabled
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername
        # Scale gravity of objects in the field. : 
        self.SetGravityScale: float = SetGravityScale
        # Additional air density for drag : 
        self.SetAdditionalAirDensity: float = SetAdditionalAirDensity
        # Max velocity in field (0 disables) : 
        self.SetVelocityLimit: float = SetVelocityLimit
        # Max amount to reduce velocity per second when it exceeds the velocity limit (0 disables) : 
        self.SetVelocityLimitDelta: float = SetVelocityLimitDelta
        # Velocity scale/drag : 
        self.SetVelocityScale: float = SetVelocityScale
        # Max angular velocity in field (degrees/s, 0 disables) : 
        self.SetAngVelocityLimit: float = SetAngVelocityLimit
        # Angular Velocity scale/drag : 
        self.SetAngVelocityScale: float = SetAngVelocityScale
        # Linear force (0 disables) : 
        self.SetLinearForce: float = SetLinearForce
        # Direction of linear force (Pitch Yaw Roll (Y Z X)) : 
        self.SetLinearForceAngles: "Origin" = SetLinearForceAngles
        # Particle Trail Material : Name of a material to use for the particle trail, no name means no particle trail
        self.ParticleTrailMaterial: str = ParticleTrailMaterial
        # Particle Trail Lifetime : Lifetime of the particles to emit
        self.ParticleTrailLifetime: float = ParticleTrailLifetime
        # Particle Trail Starting Sprite Size : Starting size of the sprite to emit
        self.ParticleTrailStartSize: float = ParticleTrailStartSize
        # Particle Trail Ending Sprite Size : Ending size of the sprite to emit
        self.ParticleTrailEndSize: float = ParticleTrailEndSize

        self.auto_properties.extend(["targetname", "parentname", "origin", "globalname", "spawnflags", "StartDisabled", "filtername", "SetGravityScale", "SetAdditionalAirDensity", "SetVelocityLimit", "SetVelocityLimitDelta", "SetVelocityScale", "SetAngVelocityLimit", "SetAngVelocityScale", "SetLinearForce", "SetLinearForceAngles", "ParticleTrailMaterial", "ParticleTrailLifetime", "ParticleTrailStartSize", "ParticleTrailEndSize"])


class TriggerWaterydeath(Entity):
    """
    Auto-generated from halflife2.fgd, line 3114.
    A trigger volume that spawns leeches around entities inside it, and does damage to them until they die. Used to prevent players entering deep water.
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str=""):
        Entity.__init__(self, "trigger_waterydeath", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername



        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername"])


class TriggerWeaponDissolve(Entity):
    """
    Auto-generated from halflife2.fgd, line 148.
    A volumetric trigger that dissolves all weapons within it
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", emittername: str=""):
        Entity.__init__(self, "trigger_weapon_dissolve", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Emitter Name : Name of a single or multiple entities to use as the basis for the emitted effects.
        self.emittername: str = emittername

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "emittername"])


class TriggerWeaponStrip(Entity):
    """
    Auto-generated from halflife2.fgd, line 161.
    A volumetric trigger that strips combat characters of all weapons
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", origin: "Origin"="", StartDisabled=0, globalname: str="", spawnflags="", filtername: str="", KillWeapons="No"):
        Entity.__init__(self, "trigger_weapon_strip", vmf_map)





        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Filter Name : Filter to use to see if activator triggers me. See filter_activator_name for more explanation.
        self.filtername: str = filtername


        # Kill Weapons : 
        self.KillWeapons = KillWeapons

        self.auto_properties.extend(["targetname", "parentname", "origin", "StartDisabled", "globalname", "spawnflags", "filtername", "KillWeapons"])


class VehicleViewcontroller(Entity):
    """
    Auto-generated from halflife2.fgd, line 4379.
    Vehicle hack to control player view
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", origin: "Origin"="", globalname: str="", angles: "Origin"="0 0 0", mindxlevel=0, maxdxlevel=0, model: str="", skin: int=0, solid=6, disableshadows=0, screenspacefade=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, lightingorigin: str="", disablevertexlighting=0, disableselfshadowing=0, ignorenormals=0, generatelightmaps=0, lightmapresolutionx: int=32, lightmapresolutiony: int=32, vehiclescript: str="scripts/vehicles/jeep_test.txt", actionScale: float="1", VehicleLocked=0):
        Entity.__init__(self, "vehicle_viewcontroller", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Origin (X Y Z) : The position of this entity's center in the world. Rotating entities typically rotate around their origin.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Collisions : 
        self.solid = solid
        # Disable Shadows : 
        self.disableshadows = disableshadows
        # Screen Space Fade : The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.
        self.screenspacefade = screenspacefade
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale
        # Lighting Origin : Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.
        self.lightingorigin: str = lightingorigin
        # Disable Vertex lighting : 
        self.disablevertexlighting = disablevertexlighting
        # Disable Self-Shadowing with vertex lighting : 
        self.disableselfshadowing = disableselfshadowing
        # Ignore surface normal for computing vertex lighting : 
        self.ignorenormals = ignorenormals
        # Generate (and use) lightmaps for this static prop : 
        self.generatelightmaps = generatelightmaps
        # Lightmap Resolution X : The resolution of the generated lightmap in the X (or U) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutionx: int = lightmapresolutionx
        # Lightmap Resolution Y : The resolution of the generated lightmap in the Y (or V) direction (only used if Generate Lightmaps is Yes) 
        self.lightmapresolutiony: int = lightmapresolutiony

        # Vehicle Script File : 
        self.vehiclescript: str = vehiclescript
        # Scale of action input / framerate : 
        self.actionScale: float = actionScale

        # Start locked : 
        self.VehicleLocked = VehicleLocked


        self.auto_properties.extend(["targetname", "origin", "globalname", "angles", "mindxlevel", "maxdxlevel", "model", "skin", "solid", "disableshadows", "screenspacefade", "fademindist", "fademaxdist", "fadescale", "lightingorigin", "disablevertexlighting", "disableselfshadowing", "ignorenormals", "generatelightmaps", "lightmapresolutionx", "lightmapresolutiony", "vehiclescript", "actionScale", "VehicleLocked"])


class Weapon357(Entity):
    """
    Auto-generated from halflife2.fgd, line 3567.
    357
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_357", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponAlyxgun(Entity):
    """
    Auto-generated from halflife2.fgd, line 3573.
    Alyx Gun
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_alyxgun", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponAnnabelle(Entity):
    """
    Auto-generated from halflife2.fgd, line 3574.
    Annabelle (Grigori)
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_annabelle", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponAr2(Entity):
    """
    Auto-generated from halflife2.fgd, line 3564.
    Assault Rifle 2
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_ar2", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponBrickbat(Entity):
    """
    Auto-generated from halflife2.fgd, line 3665.
    Brickbat
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, BrickbatType="Rock"):
        Entity.__init__(self, "weapon_brickbat", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # BrickbatType : 
        self.BrickbatType = BrickbatType

        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale", "BrickbatType"])


class WeaponBugbait(Entity):
    """
    Auto-generated from halflife2.fgd, line 3572.
    Bug bait
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_bugbait", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponCrossbow(Entity):
    """
    Auto-generated from halflife2.fgd, line 3568.
    Crossbow
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_crossbow", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponCrowbar(Entity):
    """
    Auto-generated from halflife2.fgd, line 3561.
    Crowbar
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_crowbar", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponFrag(Entity):
    """
    Auto-generated from halflife2.fgd, line 3570.
    Frag Grenade
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_frag", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponPhyscannon(Entity):
    """
    Auto-generated from halflife2.fgd, line 3571.
    Physics Cannon
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_physcannon", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponPistol(Entity):
    """
    Auto-generated from halflife2.fgd, line 3563.
    Pistol
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_pistol", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponRpg(Entity):
    """
    Auto-generated from halflife2.fgd, line 3565.
    Missile Launcher
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_rpg", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponShotgun(Entity):
    """
    Auto-generated from halflife2.fgd, line 3569.
    Shotgun
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_shotgun", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponSmg1(Entity):
    """
    Auto-generated from halflife2.fgd, line 3566.
    SMG1
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_smg1", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


class WeaponStriderbuster(Entity):
    """
    Auto-generated from halflife2.fgd, line 4645.
    Strider Buster
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", globalname: str="", angles: "Origin"="0 0 0", model: str="", skin: int=0, modelscale: float="1.0", targetname: str="", damagefilter: str="", disableshadows=0, ExplodeDamage: float=0, ExplodeRadius: float=0, PerformanceMode=0, BreakModelMessage: str="", pressuredelay: float=0, mindxlevel=0, maxdxlevel=0, fademindist: float=-1, fademaxdist: float=0, fadescale: float=1, minhealthdmg: int=0, shadowcastdist: int=0, physdamagescale: float="0.1", Damagetype=0, nodamageforces=0, inertiaScale: float="1.0", massScale: float="0", overridescript: str="", damagetoenablemotion: int=0, forcetoenablemotion: float=0, puntsound: str="", spawnflags="", dud=0):
        Entity.__init__(self, "weapon_striderbuster", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin

        # Global Entity Name : Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.
        self.globalname: str = globalname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # World Model : 
        self.model: str = model
        # Skin : Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.
        self.skin: int = skin
        # Model Scale : A multiplier for the size of the model.
        self.modelscale: float = modelscale

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Damage Filter : Name of the filter entity that controls which entities can damage us.
        self.damagefilter: str = damagefilter

        # Disable shadows : 
        self.disableshadows = disableshadows

        # Explosion Damage : If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.
        self.ExplodeDamage: float = ExplodeDamage
        # Explosion Radius : If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.
        self.ExplodeRadius: float = ExplodeRadius
        # Performance Mode : Used to limit the amount of gibs produced when this entity breaks, for performance reasons.
        self.PerformanceMode = PerformanceMode
        # Break Model Message : If set, will use this break model message instead of the normal break behavior.
        self.BreakModelMessage: str = BreakModelMessage

        # Pressure Delay : Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).
        self.pressuredelay: float = pressuredelay

        # Minimum DX Level : 
        self.mindxlevel = mindxlevel
        # Maximum DX Level : 
        self.maxdxlevel = maxdxlevel

        # Start Fade Dist : Distance at which the prop starts to fade (<0 = use fademaxdist).
        self.fademindist: float = fademindist
        # End Fade Dist : Max fade distance at which the prop is visible (0 = don't fade out)
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale

        # Min Damage to Hurt : The prop will ignore any damage events if the damage is less than this amount.
        self.minhealthdmg: int = minhealthdmg
        # Shadow Cast Distance : Use this to override how far this object casts shadows. 0 = default distance.
        self.shadowcastdist: int = shadowcastdist
        # Physics Impact Damage Scale : Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.
        self.physdamagescale: float = physdamagescale
        # Impact damage type : 
        self.Damagetype = Damagetype
        # Damaging it Doesn't Push It : Used to determine whether or not damage should cause the brush to move.
        self.nodamageforces = nodamageforces
        # Scale Factor For Inertia : Scales the angular mass of an object. Used to hack angular damage and collision response.
        self.inertiaScale: float = inertiaScale
        # Mass Scale : A scale multiplier for the object's mass.
        self.massScale: float = massScale
        # Override Parameters : A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.
        self.overridescript: str = overridescript
        # Health Level to Override Motion : If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.
        self.damagetoenablemotion: int = damagetoenablemotion
        # Physics Impact Force to Override Motion : If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.
        self.forcetoenablemotion: float = forcetoenablemotion
        # Sound to make when punted : 
        self.puntsound: str = puntsound

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Dud Bomb : This striderbuster is not armed (to be used for training).
        self.dud = dud

        self.auto_properties.extend(["origin", "globalname", "angles", "model", "skin", "modelscale", "targetname", "damagefilter", "disableshadows", "ExplodeDamage", "ExplodeRadius", "PerformanceMode", "BreakModelMessage", "pressuredelay", "mindxlevel", "maxdxlevel", "fademindist", "fademaxdist", "fadescale", "minhealthdmg", "shadowcastdist", "physdamagescale", "Damagetype", "nodamageforces", "inertiaScale", "massScale", "overridescript", "damagetoenablemotion", "forcetoenablemotion", "puntsound", "spawnflags", "dud"])


class WeaponStunstick(Entity):
    """
    Auto-generated from halflife2.fgd, line 3562.
    StunStick
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", angles: "Origin"="0 0 0", spawnflags="", fademindist: float=-1, fademaxdist: float=0, fadescale: float=1):
        Entity.__init__(self, "weapon_stunstick", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # Start Fade Dist/Pixels : Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.
        self.fademindist: float = fademindist
        # End Fade Dist/Pixels : Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.
        self.fademaxdist: float = fademaxdist
        # Fade Scale : If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified.
        self.fadescale: float = fadescale


        self.auto_properties.extend(["origin", "targetname", "angles", "spawnflags", "fademindist", "fademaxdist", "fadescale"])


