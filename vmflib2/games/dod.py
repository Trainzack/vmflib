"""
Helper classes for creating maps in any Source Engine game that uses dod.fgd.
This file was auto-generated by import_fgd.py on 2018-06-20 02:19:30.605576.
"""

from vmflib2.vmf import *


class DodLocation(Entity):
    """
    Auto-generated from dod.fgd, line 121.
    
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Name of this location : TODO: Replace this filler.
        self.location_name = ""

        self.auto_properties.extend(["targetname", "location_name"])


class DodBombDispenser(Entity):
    """
    Auto-generated from dod.fgd, line 255.
    Bomb Dispenser Area
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "dod_bomb_dispenser", vmf_map)

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team to give bombs to : TODO: Replace this filler.
        self.dispense_team = 0 

        self.auto_properties.extend(["StartDisabled", "targetname", "dispense_team"])


class DodBombTarget(Entity):
    """
    Auto-generated from dod.fgd, line 236.
    Bomb Target
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "dod_bomb_target", vmf_map)

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.target_control_point = ""
        # Bombing Team : TODO: Replace this filler.
        self.bombing_team = 2 
        # Add To Timer (sec) : TODO: Replace this filler.
        self.add_timer_seconds = 0

        self.auto_properties.extend(["StartDisabled", "angles", "targetname", "target_control_point", "bombing_team", "add_timer_seconds"])


class DodCaptureArea(Entity):
    """
    Auto-generated from dod.fgd, line 202.
    Capture Area
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "dod_capture_area", vmf_map)

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Can Allies Cap? : TODO: Replace this filler.
        self.area_allies_cancap = 1 
        # Can Axis Cap? : TODO: Replace this filler.
        self.area_axis_cancap = 1 
        # Number of Allies to cap : TODO: Replace this filler.
        self.area_allies_numcap = 1
        # Number of Axis to cap : TODO: Replace this filler.
        self.area_axis_numcap = 1
        # Time to cap (sec) : TODO: Replace this filler.
        self.area_time_to_cap = 5
        # Name of the control point this area is linked to : TODO: Replace this filler.
        self.area_cap_point = ""

        self.auto_properties.extend(["StartDisabled", "targetname", "area_allies_cancap", "area_axis_cancap", "area_allies_numcap", "area_axis_numcap", "area_time_to_cap", "area_cap_point"])


class DodControlPoint(Entity):
    """
    Auto-generated from dod.fgd, line 126.
    Control Point
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "dod_control_point", vmf_map)

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""
        # LOCALIZED name to print on the hud : TODO: Replace this filler.
        self.point_printname = "TODO: Set Name"
        # Time based point value for Allies : TODO: Replace this filler.
        self.point_timedpoints_allies = 0
        # Time based point value for Axis : TODO: Replace this filler.
        self.point_timedpoints_axis = 0
        # Default Owner of the control point : TODO: Replace this filler.
        self.point_default_owner = 0 
        # Sound Made when Axis captures : TODO: Replace this filler.
        self.point_axis_capsound = ""
        # Sound Made when Allies captures : TODO: Replace this filler.
        self.point_allies_capsound = ""
        # Sound Made when point resets : TODO: Replace this filler.
        self.point_resetsound = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.point_allies_model = ""
        # Allies model bodygroup : TODO: Replace this filler.
        self.point_allies_model_bodygroup = 1
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.point_axis_model = ""
        # Axis model bodygroup : TODO: Replace this filler.
        self.point_axis_model_bodygroup = 0
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.point_reset_model = ""
        # Reset model bodygroup : TODO: Replace this filler.
        self.point_reset_model_bodygroup = 3
        # Group Index : TODO: Replace this filler.
        self.point_group = 0
        # Index of this point ( unique ) : TODO: Replace this filler.
        self.point_index = 0
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.point_hud_icon_neutral = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.point_hud_icon_axis = ""
        # TODO: Replace this filler. : TODO: Replace this filler.
        self.point_hud_icon_allies = ""
        # Hud icon - bomb planted : TODO: Replace this filler.
        self.point_hud_icon_timercap = "sprites/obj_icons/icon_obj_neutral"
        # Hud icon - point destroyed : TODO: Replace this filler.
        self.point_hud_icon_bombed = "sprites/obj_icons/icon_obj_neutral"
        # Number of Bombs required to destroy : TODO: Replace this filler.
        self.point_num_bombs = 0 

        self.auto_properties.extend(["StartDisabled", "targetname", "angles", "spawnflags", "point_printname", "point_timedpoints_allies", "point_timedpoints_axis", "point_default_owner", "point_axis_capsound", "point_allies_capsound", "point_resetsound", "point_allies_model", "point_allies_model_bodygroup", "point_axis_model", "point_axis_model_bodygroup", "point_reset_model", "point_reset_model_bodygroup", "point_group", "point_index", "point_hud_icon_neutral", "point_hud_icon_axis", "point_hud_icon_allies", "point_hud_icon_timercap", "point_hud_icon_bombed", "point_num_bombs"])


class DodControlPointMaster(Entity):
    """
    Auto-generated from dod.fgd, line 98.
    Control Point Master
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "dod_control_point_master", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Use round timer? : TODO: Replace this filler.
        self.cpm_use_timer = 0  
        # Round timer length in seconds : TODO: Replace this filler.
        self.cpm_timer_length = 300
        # Which team wins when timer expires : TODO: Replace this filler.
        self.cpm_timer_team = 0  

        self.auto_properties.extend(["targetname", "StartDisabled", "cpm_use_timer", "cpm_timer_length", "cpm_timer_team"])


class DodScoring(Entity):
    """
    Auto-generated from dod.fgd, line 87.
    Custom Scoring
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "dod_scoring", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Team Number (int) : TODO: Replace this filler.
        self.TeamNum = 0 

        # Seconds between point gives : TODO: Replace this filler.
        self.point_give_delay = 60
        # Points to give each time : TODO: Replace this filler.
        self.point_give_amount = 1
        # Max number of times to give points : TODO: Replace this filler.
        self.point_give_max_times = 10

        self.auto_properties.extend(["targetname", "TeamNum", "point_give_delay", "point_give_amount", "point_give_max_times"])


class FilterActivatorTeam(Entity):
    """
    Auto-generated from dod.fgd, line 31.
    A filter that filters by the team of the activator.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "filter_activator_team", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = "Allow entities that match criteria" 

        # Filter Team Number : The team number to filter by.  If the filter mode is Allow, only entities whose 
        self.filterteam = 2 

        self.auto_properties.extend(["targetname", "Negated", "filterteam"])


class FuncLadder(Entity):
    """
    Auto-generated from dod.fgd, line 195.
    Ladder. Players will be able to freely along this brush, as if it was a ladder. If you are using a model prop for the visual representation of the ladder in the map, apply the toolsinvisibleladder material to the func_ladder brush.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_ladder", vmf_map)


class FuncTeamWall(Entity):
    """
    Auto-generated from dod.fgd, line 265.
    Team Blocker Wall
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_team_wall", vmf_map)

        # Team to block : TODO: Replace this filler.
        self.blockteam = 0 

        self.auto_properties.extend(["blockteam"])


class FuncTeamblocker(Entity):
    """
    Auto-generated from dod.fgd, line 275.
    Walls that players of a certain team are unable to pass through
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "func_teamblocker", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname = ""

        # Team Number (int) : TODO: Replace this filler.
        self.TeamNum = 0 

        # TODO: Replace this filler. : TODO: Replace this filler.
        self.spawnflags = ""

        self.auto_properties.extend(["targetname", "parentname", "TeamNum", "spawnflags"])


class InfoDoddetect(Entity):
    """
    Auto-generated from dod.fgd, line 59.
    DoD Gamerules
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_doddetect", vmf_map)

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 

        # Allies Respawn delay factor : TODO: Replace this filler.
        self.detect_allies_respawnfactor = "1.0"
        # Axis Respawn delay factor : TODO: Replace this filler.
        self.detect_axis_respawnfactor = "1.0"
        # Start round command for Allies : TODO: Replace this filler.
        self.detect_allies_startroundvoice = 0 
        # Start round command for Axis : TODO: Replace this filler.
        self.detect_axis_startroundvoice = 0 

        self.auto_properties.extend(["StartDisabled", "detect_allies_respawnfactor", "detect_axis_respawnfactor", "detect_allies_startroundvoice", "detect_axis_startroundvoice"])


class InfoPlayerAllies(Entity):
    """
    Auto-generated from dod.fgd, line 49.
    This entity marks the start point for Allied players.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_allies", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        self.auto_properties.extend(["angles", "targetname", "StartDisabled"])


class InfoPlayerAxis(Entity):
    """
    Auto-generated from dod.fgd, line 54.
    This entity marks the start point for Axis players.
    """
    def __init__(self, vmf_map):
        Entity.__init__(self, "info_player_axis", vmf_map)

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles = "0 0 0" 

        # Name : The name that other entities refer to this entity by.
        self.targetname = ""

        # Start Disabled : TODO: Replace this filler.
        self.StartDisabled = 0 


        self.auto_properties.extend(["angles", "targetname", "StartDisabled"])


