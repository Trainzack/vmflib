"""
Helper classes for creating maps in any Source Engine game that uses dod.fgd.
This file was auto-generated by import_fgd.py on 2020-01-19 09:11:10.324911.
"""

from vmflib2.vmf import *


class DodBombDispenser(Entity):
    """
    Auto-generated from dod.fgd, line 255.
    Bomb Dispenser Area
    """
    def __init__(self, vmf_map: "ValveMap", StartDisabled=0, targetname: str="", dispense_team=0):
        Entity.__init__(self, "dod_bomb_dispenser", vmf_map)

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Team to give bombs to : 
        self.dispense_team = dispense_team

        self.auto_properties.extend(["StartDisabled", "targetname", "dispense_team"])


class DodBombTarget(Entity):
    """
    Auto-generated from dod.fgd, line 236.
    Bomb Target
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", StartDisabled=0, angles: "Origin"="0 0 0", targetname: str="", target_control_point: str="", bombing_team=2, add_timer_seconds: int=0):
        Entity.__init__(self, "dod_bomb_target", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Target CP : 
        self.target_control_point: str = target_control_point
        # Bombing Team : 
        self.bombing_team = bombing_team
        # Add To Timer (sec) : 
        self.add_timer_seconds: int = add_timer_seconds

        self.auto_properties.extend(["origin", "StartDisabled", "angles", "targetname", "target_control_point", "bombing_team", "add_timer_seconds"])


class DodCaptureArea(Entity):
    """
    Auto-generated from dod.fgd, line 202.
    Capture Area
    """
    def __init__(self, vmf_map: "ValveMap", StartDisabled=0, targetname: str="", area_allies_cancap=1, area_axis_cancap=1, area_allies_numcap: int=1, area_axis_numcap: int=1, area_time_to_cap: int=5, area_cap_point: str=""):
        Entity.__init__(self, "dod_capture_area", vmf_map)

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Can Allies Cap? : 
        self.area_allies_cancap = area_allies_cancap
        # Can Axis Cap? : 
        self.area_axis_cancap = area_axis_cancap
        # Number of Allies to cap : 
        self.area_allies_numcap: int = area_allies_numcap
        # Number of Axis to cap : 
        self.area_axis_numcap: int = area_axis_numcap
        # Time to cap (sec) : 
        self.area_time_to_cap: int = area_time_to_cap
        # Name of the control point this area is linked to : 
        self.area_cap_point: str = area_cap_point

        self.auto_properties.extend(["StartDisabled", "targetname", "area_allies_cancap", "area_axis_cancap", "area_allies_numcap", "area_axis_numcap", "area_time_to_cap", "area_cap_point"])


class DodControlPoint(Entity):
    """
    Auto-generated from dod.fgd, line 126.
    Control Point
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", StartDisabled=0, targetname: str="", angles: "Origin"="0 0 0", spawnflags="", point_printname: str="TODO", point_timedpoints_allies: int=0, point_timedpoints_axis: int=0, point_default_owner=0, point_axis_capsound: str="", point_allies_capsound: str="", point_resetsound: str="", point_allies_model: str="models/mapmodels/flags.mdl", point_allies_model_bodygroup: int=1, point_axis_model: str="models/mapmodels/flags.mdl", point_axis_model_bodygroup: int=0, point_reset_model: str="models/mapmodels/flags.mdl", point_reset_model_bodygroup: int=3, point_group: int=0, point_index: int=0, point_hud_icon_neutral: str="sprites/obj_icons/icon_obj_neutral", point_hud_icon_axis: str="sprites/obj_icons/icon_obj_axis", point_hud_icon_allies: str="sprites/obj_icons/icon_obj_allies", point_hud_icon_timercap: str="sprites/obj_icons/icon_obj_neutral", point_hud_icon_bombed: str="sprites/obj_icons/icon_obj_neutral", point_num_bombs=0):
        Entity.__init__(self, "dod_control_point", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags
        # LOCALIZED name to print on the hud : 
        self.point_printname: str = point_printname
        # Time based point value for Allies : 
        self.point_timedpoints_allies: int = point_timedpoints_allies
        # Time based point value for Axis : 
        self.point_timedpoints_axis: int = point_timedpoints_axis
        # Default Owner of the control point : 
        self.point_default_owner = point_default_owner
        # Sound Made when Axis captures : 
        self.point_axis_capsound: str = point_axis_capsound
        # Sound Made when Allies captures : 
        self.point_allies_capsound: str = point_allies_capsound
        # Sound Made when point resets : 
        self.point_resetsound: str = point_resetsound
        # Allies Model : Model when Allies own point
        self.point_allies_model: str = point_allies_model
        # Allies model bodygroup : 
        self.point_allies_model_bodygroup: int = point_allies_model_bodygroup
        # Axis Model : Model when Axis own point
        self.point_axis_model: str = point_axis_model
        # Axis model bodygroup : 
        self.point_axis_model_bodygroup: int = point_axis_model_bodygroup
        # Reset Model : Model when point reset
        self.point_reset_model: str = point_reset_model
        # Reset model bodygroup : 
        self.point_reset_model_bodygroup: int = point_reset_model_bodygroup
        # Group Index : 
        self.point_group: int = point_group
        # Index of this point ( unique ) : 
        self.point_index: int = point_index
        # Hud icon material when noone owns point : 
        self.point_hud_icon_neutral: str = point_hud_icon_neutral
        # Hud icon material when Axis own point : 
        self.point_hud_icon_axis: str = point_hud_icon_axis
        # Hud icon material when Allies own point : 
        self.point_hud_icon_allies: str = point_hud_icon_allies
        # Hud icon - bomb planted : 
        self.point_hud_icon_timercap: str = point_hud_icon_timercap
        # Hud icon - point destroyed : 
        self.point_hud_icon_bombed: str = point_hud_icon_bombed
        # Number of Bombs required to destroy : 
        self.point_num_bombs = point_num_bombs

        self.auto_properties.extend(["origin", "StartDisabled", "targetname", "angles", "spawnflags", "point_printname", "point_timedpoints_allies", "point_timedpoints_axis", "point_default_owner", "point_axis_capsound", "point_allies_capsound", "point_resetsound", "point_allies_model", "point_allies_model_bodygroup", "point_axis_model", "point_axis_model_bodygroup", "point_reset_model", "point_reset_model_bodygroup", "point_group", "point_index", "point_hud_icon_neutral", "point_hud_icon_axis", "point_hud_icon_allies", "point_hud_icon_timercap", "point_hud_icon_bombed", "point_num_bombs"])


class DodControlPointMaster(Entity):
    """
    Auto-generated from dod.fgd, line 98.
    Control Point Master
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", StartDisabled=0, cpm_use_timer=0, cpm_timer_length: int=300, cpm_timer_team=0):
        Entity.__init__(self, "dod_control_point_master", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Use round timer? : 
        self.cpm_use_timer = cpm_use_timer
        # Round timer length in seconds : 
        self.cpm_timer_length: int = cpm_timer_length
        # Which team wins when timer expires : 
        self.cpm_timer_team = cpm_timer_team

        self.auto_properties.extend(["origin", "targetname", "StartDisabled", "cpm_use_timer", "cpm_timer_length", "cpm_timer_team"])


class DodLocation(Entity):
    """
    Auto-generated from dod.fgd, line 121.
    Location
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", location_name: str=""):
        Entity.__init__(self, "dod_location", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Name of this location : 
        self.location_name: str = location_name

        self.auto_properties.extend(["origin", "targetname", "location_name"])


class DodScoring(Entity):
    """
    Auto-generated from dod.fgd, line 87.
    Custom Scoring
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", TeamNum=0, point_give_delay: int=60, point_give_amount: int=1, point_give_max_times: int=10):
        Entity.__init__(self, "dod_scoring", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Team Number (int) : 
        self.TeamNum = TeamNum

        # Seconds between point gives : 
        self.point_give_delay: int = point_give_delay
        # Points to give each time : 
        self.point_give_amount: int = point_give_amount
        # Max number of times to give points : 
        self.point_give_max_times: int = point_give_max_times

        self.auto_properties.extend(["origin", "targetname", "TeamNum", "point_give_delay", "point_give_amount", "point_give_max_times"])


class FilterActivatorTeam(Entity):
    """
    Auto-generated from dod.fgd, line 31.
    A filter that filters by the team of the activator.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", targetname: str="", Negated="Allow entities that match criteria", filterteam=2):
        Entity.__init__(self, "filter_activator_team", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Filter mode : If set to Allow, only entities who match the criteria will pass the filter. 
        self.Negated = Negated

        # Filter Team Number : The team number to filter by.  If the filter mode is Allow, only entities whose 
        self.filterteam = filterteam

        self.auto_properties.extend(["origin", "targetname", "Negated", "filterteam"])


class FuncLadder(Entity):
    """
    Auto-generated from dod.fgd, line 195.
    Ladder. Players will be able to freely along this brush, as if it was a ladder. If you are using a model prop for the visual representation of the ladder in the map, apply the toolsinvisibleladder material to the func_ladder brush.
    """
    def __init__(self, vmf_map: "ValveMap"):
        Entity.__init__(self, "func_ladder", vmf_map)


class FuncTeamWall(Entity):
    """
    Auto-generated from dod.fgd, line 265.
    Team Blocker Wall
    """
    def __init__(self, vmf_map: "ValveMap", blockteam=0):
        Entity.__init__(self, "func_team_wall", vmf_map)

        # Team to block : 
        self.blockteam = blockteam

        self.auto_properties.extend(["blockteam"])


class FuncTeamblocker(Entity):
    """
    Auto-generated from dod.fgd, line 275.
    Walls that players of a certain team are unable to pass through
    """
    def __init__(self, vmf_map: "ValveMap", targetname: str="", parentname: str="", TeamNum=0, spawnflags=""):
        Entity.__init__(self, "func_teamblocker", vmf_map)

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Parent : The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent.
        self.parentname: str = parentname

        # Team Number (int) : 
        self.TeamNum = TeamNum

        # TODO: Replace this filler. : 
        self.spawnflags = spawnflags

        self.auto_properties.extend(["targetname", "parentname", "TeamNum", "spawnflags"])


class InfoDoddetect(Entity):
    """
    Auto-generated from dod.fgd, line 59.
    DoD Gamerules
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", StartDisabled=0, detect_allies_respawnfactor: str="1.0", detect_axis_respawnfactor: str="1.0", detect_allies_startroundvoice=0, detect_axis_startroundvoice=0):
        Entity.__init__(self, "info_doddetect", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Start Disabled : 
        self.StartDisabled = StartDisabled

        # Allies Respawn delay factor : 
        self.detect_allies_respawnfactor: str = detect_allies_respawnfactor
        # Axis Respawn delay factor : 
        self.detect_axis_respawnfactor: str = detect_axis_respawnfactor
        # Start round command for Allies : 
        self.detect_allies_startroundvoice = detect_allies_startroundvoice
        # Start round command for Axis : 
        self.detect_axis_startroundvoice = detect_axis_startroundvoice

        self.auto_properties.extend(["origin", "StartDisabled", "detect_allies_respawnfactor", "detect_axis_respawnfactor", "detect_allies_startroundvoice", "detect_axis_startroundvoice"])


class InfoPlayerAllies(Entity):
    """
    Auto-generated from dod.fgd, line 49.
    This entity marks the start point for Allied players.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", StartDisabled=0):
        Entity.__init__(self, "info_player_allies", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled


        self.auto_properties.extend(["origin", "angles", "targetname", "StartDisabled"])


class InfoPlayerAxis(Entity):
    """
    Auto-generated from dod.fgd, line 54.
    This entity marks the start point for Axis players.
    """
    def __init__(self, vmf_map: "ValveMap", origin: "Origin"="0 0 0", angles: "Origin"="0 0 0", targetname: str="", StartDisabled=0):
        Entity.__init__(self, "info_player_axis", vmf_map)

        # Origin : This entity's location in 3D space.
        self.origin: "Origin" = origin
        # Pitch Yaw Roll (Y Z X) : This entity's orientation in the world. Pitch is rotation around the Y axis, 
        self.angles: "Origin" = angles

        # Name : The name that other entities refer to this entity by.
        self.targetname: str = targetname

        # Start Disabled : 
        self.StartDisabled = StartDisabled


        self.auto_properties.extend(["origin", "angles", "targetname", "StartDisabled"])


